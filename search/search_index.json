{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u901a\u8fc7python\u89e3\u51b3\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u95ee\u9898","text":"<p>Problem Solving with Algorithms and Data Structures using Python</p> \u4e2d\u6587\u82f1\u6587 <p>\u7531Brad Miller\u548cDavid Ranum\u64b0\u5199\uff0c\u6765\u81eaLuther College</p> <p>\u4f5c\u4e1a</p> <p>Gerry Jenkins\u5f55\u5236\u4e86\u4e00\u7cfb\u5217\u7cbe\u5f69\u7684YouTube\u89c6\u9891\uff0c\u652f\u6301\u672c\u4e66\u4e2d\u6240\u6709\u7ae0\u8282\u7684\u5b66\u4e60\u3002</p> <p>By Brad Miller and David Ranum, Luther College</p> <ul> <li>Assignments</li> </ul> <p>There is a wonderful collection of YouTube videos recorded by Gerry Jenkins to support all of the chapters in this text.</p>"},{"location":"#1-\u5f15\u8a00","title":"1. \u5f15\u8a00","text":"<p>1.Introduction</p> \u4e2d\u6587\u82f1\u6587 <ul> <li>1.1. \u76ee\u6807 </li> <li>1.2. \u5165\u95e8 </li> <li>1.3. \u4ec0\u4e48\u662f\u8ba1\u7b97\u673a\u79d1\u5b66\uff1f </li> <li>1.4. \u4ec0\u4e48\u662f\u7f16\u7a0b\uff1f </li> <li>1.5. \u4e3a\u4ec0\u4e48\u5b66\u4e60\u6570\u636e\u7ed3\u6784\u548c\u62bd\u8c61\u6570\u636e\u7c7b\u578b\uff1f </li> <li>1.6. \u4e3a\u4ec0\u4e48\u5b66\u4e60\u7b97\u6cd5\uff1f </li> <li>1.7. Python\u57fa\u7840\u56de\u987e </li> <li>1.8. \u6570\u636e\u5165\u95e8 <ul> <li>1.8.1. \u5185\u5efa\u7684\u539f\u5b50\u6570\u636e\u7c7b\u578b </li> <li>1.8.2. \u5185\u5efa\u7684\u96c6\u5408\u6570\u636e\u7c7b\u578b </li> </ul> </li> <li>1.9. \u8f93\u5165\u548c\u8f93\u51fa <ul> <li>1.9.1. \u5b57\u7b26\u4e32\u683c\u5f0f\u5316 </li> </ul> </li> <li>1.10. \u63a7\u5236\u7ed3\u6784 </li> <li>1.11. \u5f02\u5e38\u5904\u7406 </li> <li>1.12. \u5b9a\u4e49\u51fd\u6570 </li> <li>1.13. Python\u4e2d\u7684\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\uff1a\u5b9a\u4e49\u7c7b <ul> <li>1.13.1. \u4e00\u4e2a\u5206\u6570\u7c7b </li> <li>1.13.2. \u7ee7\u627f\uff1a\u903b\u8f91\u95e8\u548c\u7535\u8def </li> </ul> </li> <li>1.14. \u603b\u7ed3</li> <li>1.15. \u5173\u952e\u672f\u8bed </li> <li>1.16. \u7ec3\u4e60</li> </ul> <ul> <li>1.1. Objectives</li> <li>1.2. Getting Started</li> <li>1.3. What Is Computer Science?</li> <li>1.4. What Is Programming?</li> <li>1.5. Why Study Data Structures and Abstract Data Types?</li> <li>1.6. Why Study Algorithms?</li> <li>1.7. Review of Basic Python</li> <li>1.8. Getting Started with Data<ul> <li>1.8.1. Built-in Atomic Data Types</li> <li>1.8.2. Built-in Collection Data Types</li> </ul> </li> <li>1.9. Input and Output<ul> <li>1.9.1. String Formatting</li> </ul> </li> <li>1.10. Control Structures</li> <li>1.11. Exception Handling</li> <li>1.12. Defining Functions</li> <li>1.13. Object-Oriented Programming in Python: Defining Classes<ul> <li>1.13.1. A Fraction Class</li> <li>1.13.2. Inheritance: Logic Gates and Circuits</li> </ul> </li> <li>1.14. Summary</li> <li>1.15. Key Terms</li> <li>1.16. Exercises</li> </ul>"},{"location":"#2-\u7b97\u6cd5\u5206\u6790","title":"2. \u7b97\u6cd5\u5206\u6790","text":"<p>2. Algorithm Analysis</p> \u4e2d\u6587\u82f1\u6587 <ul> <li>2.1. \u76ee\u6807 </li> <li>2.2. \u4ec0\u4e48\u662f\u7b97\u6cd5\u5206\u6790\uff1f </li> <li>2.3. \u5927O\u7b26\u53f7 </li> <li>2.4. \u4e00\u4e2a\u5b57\u8c1c\u68c0\u6d4b\u4f8b\u5b50 <ul> <li>2.4.1. \u89e3\u51b3\u65b9\u68481\uff1a\u5b57\u8c1c\u68c0\u6d4b\u9010\u4e00\u68c0\u67e5 </li> <li>2.4.2. \u89e3\u51b3\u65b9\u68482\uff1a\u6392\u5e8f\u548c\u6bd4\u8f83 </li> <li>2.4.3. \u89e3\u51b3\u65b9\u68483\uff1a\u66b4\u529b\u7834\u89e3 </li> <li>2.4.4. \u89e3\u51b3\u65b9\u68484\uff1a\u8ba1\u6570\u548c\u6bd4\u8f83 </li> </ul> </li> <li>2.5. Python\u6570\u636e\u7ed3\u6784\u7684\u6027\u80fd </li> <li>2.6. \u5217\u8868 </li> <li>2.7. \u5b57\u5178 </li> <li>2.8. \u603b\u7ed3 </li> <li>2.9. \u5173\u952e\u672f\u8bed </li> <li>2.10. \u7ec3\u4e60</li> </ul> <ul> <li>2.1. Objectives</li> <li>2.2. What Is Algorithm Analysis?</li> <li>2.3. Big O Notation</li> <li>2.4. An Anagram Detection Example<ul> <li>2.4.1. Solution 1: Anagram Detection Checking Off</li> <li>2.4.2. Anagram Detection Solution 2: Sort and Compare</li> <li>2.4.3. Anagram Detection Solution 3: Brute Force</li> <li>2.4.4. Anagram Detection Solution 4: Count and Compare</li> </ul> </li> <li>2.5. Performance of Python Data Structures</li> <li>2.6. Lists</li> <li>2.7. Dictionaries</li> <li>2.8. Summary</li> <li>2.9. Key Terms</li> <li>2.10. Exercises</li> </ul>"},{"location":"#3-\u57fa\u672c\u6570\u636e\u7ed3\u6784","title":"3. \u57fa\u672c\u6570\u636e\u7ed3\u6784","text":"<p>3. Basic Data Structures</p> \u4e2d\u6587\u82f1\u6587 <ul> <li>3.1. \u76ee\u6807 </li> <li>3.2. \u4ec0\u4e48\u662f\u7ebf\u6027\u7ed3\u6784\uff1f </li> <li>3.3. \u6808 </li> <li>3.4. \u6808\u7684\u62bd\u8c61\u6570\u636e\u7c7b\u578b </li> <li>3.5. \u7528Python\u5b9e\u73b0\u6808 </li> <li>3.6. \u7b80\u5355\u7684\u62ec\u53f7\u5339\u914d </li> <li>3.7. \u7b26\u53f7\u5339\u914d\uff08\u4e00\u822c\u60c5\u51b5\uff09 </li> <li>3.8. \u5c06\u5341\u8fdb\u5236\u6570\u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\u6570 </li> <li>3.9. \u4e2d\u7f00\u3001\u524d\u7f00\u548c\u540e\u7f00\u8868\u8fbe\u5f0f <ul> <li>3.9.1. \u4e2d\u7f00\u8868\u8fbe\u5f0f\u8f6c\u6362\u4e3a\u524d\u7f00\u548c\u540e\u7f00 </li> <li>3.9.2. \u4e00\u822c\u7684\u4e2d\u7f00\u8f6c\u540e\u7f00\u8f6c\u6362 </li> <li>3.9.3. \u540e\u7f00\u8868\u8fbe\u5f0f\u6c42\u503c </li> </ul> </li> <li>3.10. \u961f\u5217 </li> <li>3.11. \u961f\u5217\u7684\u62bd\u8c61\u6570\u636e\u7c7b\u578b </li> <li>3.12. \u7528Python\u5b9e\u73b0\u961f\u5217 </li> <li>3.13. \u961f\u5217\u6a21\u62df\uff1a\u70eb\u624b\u5c71\u828b\u6e38\u620f </li> <li>3.14. \u961f\u5217\u6a21\u62df\uff1a\u6253\u5370\u4efb\u52a1 <ul> <li>3.14.1. \u4e3b\u8981\u6a21\u62df\u6b65\u9aa4 </li> <li>3.14.2. Python\u5b9e\u73b0 </li> <li>3.14.3. \u8ba8\u8bba </li> </ul> </li> <li>3.15. \u53cc\u7aef\u961f\u5217 </li> <li>3.16. \u53cc\u7aef\u961f\u5217\u7684\u62bd\u8c61\u6570\u636e\u7c7b\u578b </li> <li>3.17. \u7528Python\u5b9e\u73b0\u53cc\u7aef\u961f\u5217 </li> <li>3.18. \u56de\u6587\u68c0\u6d4b\u5668 </li> <li>3.19. \u5217\u8868 </li> <li>3.20. \u65e0\u5e8f\u5217\u8868\u7684\u62bd\u8c61\u6570\u636e\u7c7b\u578b </li> <li>3.21. \u7528\u94fe\u8868\u5b9e\u73b0\u65e0\u5e8f\u5217\u8868 <ul> <li>3.21.1. \u8282\u70b9\u7c7b </li> <li>3.21.2. \u65e0\u5e8f\u5217\u8868\u7c7b </li> </ul> </li> <li>3.22. \u6709\u5e8f\u5217\u8868\u7684\u62bd\u8c61\u6570\u636e\u7c7b\u578b </li> <li>3.23. \u5b9e\u73b0\u6709\u5e8f\u5217\u8868 <ul> <li>3.23.1. \u94fe\u8868\u5206\u6790 </li> </ul> </li> <li>3.24. \u603b\u7ed3 </li> <li>3.25. \u5173\u952e\u672f\u8bed </li> <li>3.26. \u7ec3\u4e60</li> </ul> <ul> <li>3.1. Objectives</li> <li>3.2. What Are Linear Structures?</li> <li>3.3. Stacks</li> <li>3.4. The Stack Abstract Data Type</li> <li>3.5. Implementing a Stack in Python</li> <li>3.6. Simple Balanced Parentheses</li> <li>3.7. Balanced Symbols (A General Case)</li> <li>3.8. Converting Decimal Numbers to Binary Numbers</li> <li>3.9. Infix, Prefix, and Postfix Expressions<ul> <li>3.9.1. Conversion of Infix Expressions to Prefix and Postfix</li> <li>3.9.2. General Infix-to-Postfix Conversion</li> <li>3.9.3. Postfix Evaluation</li> </ul> </li> <li>3.10. Queues</li> <li>3.11. The Queue Abstract Data Type</li> <li>3.12. Implementing a Queue in Python</li> <li>3.13. Queue Simulation: Hot Potato</li> <li>3.14. Queue Simulation: Printing Tasks<ul> <li>3.14.1. Main Simulation Steps</li> <li>3.14.2. Python Implementation</li> <li>3.14.3. Discussion</li> </ul> </li> <li>3.15. Deques</li> <li>3.16. The Deque Abstract Data Type</li> <li>3.17. Implementing a Deque in Python</li> <li>3.18. Palindrome Checker</li> <li>3.19. Lists</li> <li>3.20. The Unordered List Abstract Data Type</li> <li>3.21. Implementing an Unordered List: Linked Lists<ul> <li>3.21.1. The Node Class</li> <li>3.21.2. The UnorderedList Class</li> </ul> </li> <li>3.22. The Ordered List Abstract Data Type</li> <li>3.23. Implementing an Ordered List<ul> <li>3.23.1. Analysis of Linked Lists</li> </ul> </li> <li>3.24. Summary</li> <li>3.25. Key Terms</li> <li>3.26. Exercises</li> </ul>"},{"location":"#4-\u9012\u5f52","title":"4. \u9012\u5f52","text":"<p>4. Recursion</p> \u4e2d\u6587\u82f1\u6587 <ul> <li>4.1. \u76ee\u6807 </li> <li>4.2. \u4ec0\u4e48\u662f\u9012\u5f52\uff1f </li> <li>4.3. \u8ba1\u7b97\u4e00\u4e2a\u6570\u5217\u7684\u548c </li> <li>4.4. \u9012\u5f52\u7684\u4e09\u6761\u6cd5\u5219 </li> <li>4.5. \u5c06\u6574\u6570\u8f6c\u6362\u4e3a\u4efb\u610f\u8fdb\u5236\u7684\u5b57\u7b26\u4e32 </li> <li>4.6. \u6808\u5e27\uff1a\u5b9e\u73b0\u9012\u5f52 </li> <li>4.7. \u9012\u5f52\u7684\u53ef\u89c6\u5316 </li> <li>4.8. \u8c22\u5c14\u5bbe\u65af\u57fa\u4e09\u89d2\u5f62 </li> <li>4.9. \u590d\u6742\u7684\u9012\u5f52\u95ee\u9898 </li> <li>4.10. \u6c49\u8bfa\u5854\u95ee\u9898 </li> <li>4.11. \u8ff7\u5bab\u63a2\u7d22 </li> <li>4.12. \u52a8\u6001\u89c4\u5212 </li> <li>4.13. \u603b\u7ed3 </li> <li>4.14. \u5173\u952e\u672f\u8bed </li> <li>4.15. \u7ec3\u4e60</li> </ul> <ul> <li>4.1. Objectives</li> <li>4.2. What Is Recursion?</li> <li>4.3. Calculating the Sum of a List of Numbers</li> <li>4.4. The Three Laws of Recursion</li> <li>4.5. Converting an Integer to a String in Any Base</li> <li>4.6. Stack Frames: Implementing Recursion</li> <li>4.7. Visualizing Recursion</li> <li>4.8. Sierpinski Triangle</li> <li>4.9. Complex Recursive Problems</li> <li>4.10. Tower of Hanoi</li> <li>4.11. Exploring a Maze</li> <li>4.12. Dynamic Programming</li> <li>4.13. Summary</li> <li>4.14. Key Terms</li> <li>4.15. Exercises</li> </ul>"},{"location":"#5-\u641c\u7d22\u4e0e\u6392\u5e8f","title":"5. \u641c\u7d22\u4e0e\u6392\u5e8f","text":"<p>5. Searching and Sorting</p> \u4e2d\u6587\u82f1\u6587 <ul> <li>5.1. \u76ee\u6807</li> <li>5.2. \u641c\u7d22</li> <li>5.3. \u987a\u5e8f\u641c\u7d22<ul> <li>5.3.1. \u987a\u5e8f\u641c\u7d22\u7684\u5206\u6790</li> </ul> </li> <li>5.4. \u4e8c\u5206\u641c\u7d22<ul> <li>5.4.1. \u4e8c\u5206\u641c\u7d22\u7684\u5206\u6790</li> </ul> </li> <li>5.5. \u54c8\u5e0c<ul> <li>5.5.1. \u54c8\u5e0c\u51fd\u6570</li> <li>5.5.2. \u78b0\u649e\u89e3\u51b3</li> <li>5.5.3. \u5b9e\u73b0Map\u62bd\u8c61\u6570\u636e\u7c7b\u578b</li> <li>5.5.4. \u54c8\u5e0c\u5206\u6790</li> </ul> </li> <li>5.6. \u6392\u5e8f</li> <li>5.7. \u5192\u6ce1\u6392\u5e8f</li> <li>5.8. \u9009\u62e9\u6392\u5e8f</li> <li>5.9. \u63d2\u5165\u6392\u5e8f</li> <li>5.10. \u5e0c\u5c14\u6392\u5e8f</li> <li>5.11. \u5f52\u5e76\u6392\u5e8f</li> <li>5.12. \u5feb\u901f\u6392\u5e8f</li> <li>5.13. \u603b\u7ed3</li> <li>5.14. \u5173\u952e\u672f\u8bed</li> <li>5.15. \u7ec3\u4e60</li> </ul> <ul> <li>5.1. Objectives</li> <li>5.2. Searching</li> <li>5.3. The Sequential Search<ul> <li>5.3.1. Analysis of Sequential Search</li> </ul> </li> <li>5.4. The Binary Search<ul> <li>5.4.1. Analysis of Binary Search</li> </ul> </li> <li>5.5. Hashing<ul> <li>5.5.1. Hash Functions</li> <li>5.5.2. Collision Resolution</li> <li>5.5.3. Implementing the Map Abstract Data Type</li> <li>5.5.4. Analysis of Hashing</li> </ul> </li> <li>5.6. Sorting</li> <li>5.7. The Bubble Sort</li> <li>5.8. The Selection Sort</li> <li>5.9. The Insertion Sort</li> <li>5.10. The Shell Sort</li> <li>5.11. The Merge Sort</li> <li>5.12. The Quicksort</li> <li>5.13. Summary</li> <li>5.14. Key Terms</li> <li>5.15. Exercises</li> </ul>"},{"location":"#6-\u6811\u548c\u6811\u7b97\u6cd5","title":"6. \u6811\u548c\u6811\u7b97\u6cd5","text":"\u4e2d\u6587\u82f1\u6587 <ul> <li>6.1. \u76ee\u6807</li> <li>6.2. \u6811\u7684\u793a\u4f8b</li> <li>6.3. \u8bcd\u6c47\u548c\u5b9a\u4e49</li> <li>6.4. \u5b9e\u73b0</li> <li>6.5. \u5217\u8868\u8868\u793a\u6cd5</li> <li>6.6. \u8282\u70b9\u4e0e\u5f15\u7528</li> <li>6.7. \u89e3\u6790\u6811</li> <li>6.8. \u6811\u904d\u5386</li> <li>6.9. \u4f7f\u7528\u4e8c\u53c9\u5806\u7684\u4f18\u5148\u961f\u5217</li> <li>6.10. \u4e8c\u53c9\u5806\u64cd\u4f5c</li> <li>6.11. \u4e8c\u53c9\u5806\u5b9e\u73b0<ul> <li>6.11.1. \u7ed3\u6784\u5c5e\u6027</li> <li>6.11.2. \u5806\u5e8f\u5c5e\u6027</li> <li>6.11.3. \u5806\u64cd\u4f5c</li> </ul> </li> <li>6.12. \u4e8c\u53c9\u641c\u7d22\u6811</li> <li>6.13. \u641c\u7d22\u6811\u64cd\u4f5c</li> <li>6.14. \u641c\u7d22\u6811\u5b9e\u73b0</li> <li>6.15. \u641c\u7d22\u6811\u5206\u6790</li> <li>6.16. \u5e73\u8861\u4e8c\u53c9\u641c\u7d22\u6811</li> <li>6.17. AVL\u6811\u6027\u80fd</li> <li>6.18. AVL\u6811\u5b9e\u73b0</li> <li>6.19. Map ADT\u5b9e\u73b0\u603b\u7ed3</li> <li>6.20. \u603b\u7ed3</li> <li>6.21. \u5173\u952e\u672f\u8bed</li> <li>6.22. \u7ec3\u4e60</li> </ul> <ul> <li>6.1. Objectives</li> <li>6.2. Examples of Trees</li> <li>6.3. Vocabulary and Definitions</li> <li>6.4. Implementation</li> <li>6.5. List of Lists Representation</li> <li>6.6. Nodes and References</li> <li>6.7. Parse Tree</li> <li>6.8. Tree Traversals</li> <li>6.9. Priority Queues with Binary Heaps</li> <li>6.10. Binary Heap Operations</li> <li>6.11. Binary Heap Implementation<ul> <li>6.11.1. The Structure Property</li> <li>6.11.2. The Heap Order Property</li> <li>6.11.3. Heap Operations</li> </ul> </li> <li>6.12. Binary Search Trees</li> <li>6.13. Search Tree Operations</li> <li>6.14. Search Tree Implementation</li> <li>6.15. Search Tree Analysis</li> <li>6.16. Balanced Binary Search Trees</li> <li>6.17. AVL Tree Performance</li> <li>6.18. AVL Tree Implementation</li> <li>6.19. Summary of Map ADT Implementations</li> <li>6.20. Summary</li> <li>6.21. Key Terms</li> <li>6.22. Exercises</li> </ul>"},{"location":"#7-\u56fe\u548c\u56fe\u7b97\u6cd5","title":"7. \u56fe\u548c\u56fe\u7b97\u6cd5","text":"<p>7. Graphs and Graphing Algorithms</p> \u4e2d\u6587\u82f1\u6587 <p>7.1. \u76ee\u6807 7.2. \u8bcd\u6c47\u548c\u5b9a\u4e49 7.3. \u56fe\u7684\u62bd\u8c61\u6570\u636e\u7c7b\u578b 7.4. \u90bb\u63a5\u77e9\u9635 7.5. \u90bb\u63a5\u8868 7.6. \u5b9e\u73b0 7.7. \u5b57\u68af\u95ee\u9898 7.8. \u6784\u5efa\u5b57\u68af\u56fe 7.9. \u5b9e\u73b0\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22 7.10. \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u5206\u6790 7.11. \u9a91\u58eb\u5de1\u6e38\u95ee\u9898 7.12. \u6784\u5efa\u9a91\u58eb\u5de1\u6e38\u56fe 7.13. \u5b9e\u73b0\u9a91\u58eb\u5de1\u6e38 7.14. \u9a91\u58eb\u5de1\u6e38\u5206\u6790 7.15. \u4e00\u822c\u7684\u6df1\u5ea6\u4f18\u5148\u641c\u7d22 7.16. \u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u5206\u6790 7.17. \u62d3\u6251\u6392\u5e8f 7.18. \u5f3a\u8fde\u901a\u5206\u91cf 7.19. \u6700\u77ed\u8def\u5f84\u95ee\u9898 7.20. Dijkstra\u7b97\u6cd5 7.21. Dijkstra\u7b97\u6cd5\u5206\u6790 7.22. Prim\u751f\u6210\u6811\u7b97\u6cd5 7.23. \u603b\u7ed3 7.24. \u5173\u952e\u672f\u8bed 7.25. \u7ec3\u4e60</p> <ul> <li>7.1. Objectives</li> <li>7.2. Vocabulary and Definitions</li> <li>7.3. The Graph Abstract Data Type</li> <li>7.4. An Adjacency Matrix</li> <li>7.5. An Adjacency List</li> <li>7.6. Implementation</li> <li>7.7. The Word Ladder Problem</li> <li>7.8. Building the Word Ladder Graph</li> <li>7.9. Implementing Breadth-First Search</li> <li>7.10. Breadth-First Search Analysis</li> <li>7.11. The Knight\u2019s Tour Problem</li> <li>7.12. Building the Knight\u2019s Tour Graph</li> <li>7.13. Implementing Knight\u2019s Tour</li> <li>7.14. Knight\u2019s Tour Analysis</li> <li>7.15. General Depth-First Search</li> <li>7.16. Depth-First Search Analysis</li> <li>7.17. Topological Sorting</li> <li>7.18. Strongly Connected Components</li> <li>7.19. Shortest Path Problems</li> <li>7.20. Dijkstra\u2019s Algorithm</li> <li>7.21. Analysis of Dijkstra\u2019s Algorithm</li> <li>7.22. Prim\u2019s Spanning Tree Algorithm</li> <li>7.23. Summary</li> <li>7.24. Key Terms</li> <li>7.25. Exercises</li> </ul>"},{"location":"#8-\u9ad8\u7ea7\u4e3b\u9898","title":"8. \u9ad8\u7ea7\u4e3b\u9898","text":"<p>8. Advanced Topics</p> \u4e2d\u6587\u82f1\u6587 <ul> <li>8.1. \u76ee\u6807</li> <li>8.2. Python\u5217\u8868\u518d\u63a2</li> <li>8.3. \u9012\u5f52\u518d\u63a2<ul> <li>8.3.1. \u6a21\u8fd0\u7b97\u5b9a\u7406</li> <li>8.3.2. \u6a21\u5e42\u8fd0\u7b97</li> <li>8.3.3. \u6700\u5927\u516c\u7ea6\u6570\u4e0e\u4e58\u6cd5\u9006\u5143</li> <li>8.3.4. RSA\u7b97\u6cd5</li> </ul> </li> <li>8.4. \u5b57\u5178\u518d\u63a2\uff1a\u8df3\u8868<ul> <li>8.4.1. Map\u62bd\u8c61\u6570\u636e\u7c7b\u578b</li> <li>8.4.2. \u7528Python\u5b9e\u73b0\u5b57\u5178</li> </ul> </li> <li>8.5. \u6811\u518d\u63a2\uff1a\u56fe\u50cf\u91cf\u5316<ul> <li>8.5.1. \u6570\u5b57\u56fe\u50cf\u5feb\u901f\u56de\u987e</li> <li>8.5.2. \u56fe\u50cf\u91cf\u5316</li> <li>8.5.3. \u4f7f\u7528\u516b\u53c9\u6811\u7684\u6539\u8fdb\u91cf\u5316\u7b97\u6cd5</li> </ul> </li> <li>8.6. \u56fe\u518d\u63a2\uff1a\u6a21\u5f0f\u5339\u914d<ul> <li>8.6.1. \u751f\u7269\u5b57\u7b26\u4e32</li> <li>8.6.2. \u7b80\u5355\u6bd4\u8f83</li> <li>8.6.3. \u4f7f\u7528\u56fe\uff1a\u6709\u9650\u72b6\u6001\u81ea\u52a8\u673a</li> <li>8.6.4. \u4f7f\u7528\u56fe\uff1aKnuth-Morris-Pratt\u7b97\u6cd5</li> </ul> </li> </ul> <ul> <li>8.1. Objectives</li> <li>8.2. Python Lists Revisited</li> <li>8.3. Recursion Revisited<ul> <li>8.3.1. Modular Arithmetic Theorems</li> <li>8.3.2. Modular Exponentiation</li> <li>8.3.3. The Greatest Common Divisor and Multiplicative Inverses</li> <li>8.3.4. RSA Algorithm</li> </ul> </li> <li>8.4. Dictionaries Revisited: Skip Lists<ul> <li>8.4.1. The Map Abstract Data Type</li> <li>8.4.2. Implementing a Dictionary in Python</li> </ul> </li> <li>8.5. Trees Revisited: Quantizing Images<ul> <li>8.5.1. A Quick Review of Digital Images</li> <li>8.5.2. Quantizing an Image</li> <li>8.5.3. An Improved Quantization Algorithm Using Octrees</li> </ul> </li> <li>8.6. Graphs Revisited: Pattern Matching<ul> <li>8.6.1. Biological Strings</li> <li>8.6.2. Simple Comparison</li> <li>8.6.3. Using Graphs: Finite State Automata</li> <li>8.6.4. Using Graphs: Knuth-Morris-Pratt</li> </ul> </li> </ul>"},{"location":"#\u81f4\u8c22","title":"\u81f4\u8c22","text":"<p>Acknowledgements</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u975e\u5e38\u611f\u8c22Franklin Beedle Publishers\u5141\u8bb8\u6211\u4eec\u514d\u8d39\u63d0\u4f9b\u8fd9\u672c\u4e92\u52a8\u6559\u6750\u7684\u5728\u7ebf\u7248\u672c\u3002\u8fd9\u4e2a\u7248\u672c\u732e\u7ed9\u6211\u4eec\u7684\u7b2c\u4e00\u4f4d\u7f16\u8f91Jim Leisy\uff0c\u4ed6\u5e0c\u671b\u6211\u4eec\u201c\u6539\u53d8\u4e16\u754c\u201d\u3002</p> <p>We are very grateful to Franklin Beedle Publishers for allowing us to make this interactive textbook freely available. This online version is dedicated to the memory of our first editor, Jim Leisy, who wanted us to \u201cchange the world.\u201d</p>"},{"location":"c1/","title":"1. \u5f15\u8a00","text":"<p>1.Introduction</p> \u4e2d\u6587\u82f1\u6587 <ul> <li>1.1. \u76ee\u6807 </li> <li>1.2. \u5165\u95e8 </li> <li>1.3. \u4ec0\u4e48\u662f\u8ba1\u7b97\u673a\u79d1\u5b66\uff1f </li> <li>1.4. \u4ec0\u4e48\u662f\u7f16\u7a0b\uff1f </li> <li>1.5. \u4e3a\u4ec0\u4e48\u5b66\u4e60\u6570\u636e\u7ed3\u6784\u548c\u62bd\u8c61\u6570\u636e\u7c7b\u578b\uff1f </li> <li>1.6. \u4e3a\u4ec0\u4e48\u5b66\u4e60\u7b97\u6cd5\uff1f </li> <li>1.7. Python\u57fa\u7840\u56de\u987e </li> <li>1.8. \u6570\u636e\u5165\u95e8 <ul> <li>1.8.1. \u5185\u5efa\u7684\u539f\u5b50\u6570\u636e\u7c7b\u578b </li> <li>1.8.2. \u5185\u5efa\u7684\u96c6\u5408\u6570\u636e\u7c7b\u578b </li> </ul> </li> <li>1.9. \u8f93\u5165\u548c\u8f93\u51fa <ul> <li>1.9.1. \u5b57\u7b26\u4e32\u683c\u5f0f\u5316 </li> </ul> </li> <li>1.10. \u63a7\u5236\u7ed3\u6784 </li> <li>1.11. \u5f02\u5e38\u5904\u7406 </li> <li>1.12. \u5b9a\u4e49\u51fd\u6570 </li> <li>1.13. Python\u4e2d\u7684\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\uff1a\u5b9a\u4e49\u7c7b <ul> <li>1.13.1. \u4e00\u4e2a\u5206\u6570\u7c7b </li> <li>1.13.2. \u7ee7\u627f\uff1a\u903b\u8f91\u95e8\u548c\u7535\u8def </li> </ul> </li> <li>1.14. \u603b\u7ed3</li> <li>1.15. \u5173\u952e\u672f\u8bed </li> <li>1.16. \u7ec3\u4e60</li> </ul> <ul> <li>1.1. Objectives</li> <li>1.2. Getting Started</li> <li>1.3. What Is Computer Science?</li> <li>1.4. What Is Programming?</li> <li>1.5. Why Study Data Structures and Abstract Data Types?</li> <li>1.6. Why Study Algorithms?</li> <li>1.7. Review of Basic Python</li> <li>1.8. Getting Started with Data<ul> <li>1.8.1. Built-in Atomic Data Types</li> <li>1.8.2. Built-in Collection Data Types</li> </ul> </li> <li>1.9. Input and Output<ul> <li>1.9.1. String Formatting</li> </ul> </li> <li>1.10. Control Structures</li> <li>1.11. Exception Handling</li> <li>1.12. Defining Functions</li> <li>1.13. Object-Oriented Programming in Python: Defining Classes<ul> <li>1.13.1. A Fraction Class</li> <li>1.13.2. Inheritance: Logic Gates and Circuits</li> </ul> </li> <li>1.14. Summary</li> <li>1.15. Key Terms</li> <li>1.16. Exercises</li> </ul>"},{"location":"c1/s1/","title":"1.1. \u76ee\u6807","text":"<p>1.1. Objectives</p> \u4e2d\u6587\u82f1\u6587 <ul> <li>\u56de\u987e\u8ba1\u7b97\u673a\u79d1\u5b66\u3001\u7f16\u7a0b\u548c\u89e3\u51b3\u95ee\u9898\u7684\u601d\u60f3\u3002</li> <li>\u7406\u89e3\u62bd\u8c61\u53ca\u5176\u5728\u89e3\u51b3\u95ee\u9898\u8fc7\u7a0b\u4e2d\u6240\u626e\u6f14\u7684\u89d2\u8272\u3002</li> <li>\u7406\u89e3\u5e76\u5b9e\u73b0\u62bd\u8c61\u6570\u636e\u7c7b\u578b\u7684\u6982\u5ff5\u3002</li> <li>\u56de\u987ePython\u7f16\u7a0b\u8bed\u8a00\u3002</li> </ul> <ul> <li>To review the ideas of computer science, programming, and problem-solving.</li> <li>To understand abstraction and the role it plays in the problem-solving process.</li> <li>To understand and implement the notion of an abstract data type.</li> <li>To review the Python programming language.</li> </ul>"},{"location":"c1/s10/","title":"1.10. \u63a7\u5236\u7ed3\u6784","text":"<p>1.10. Control Structures</p> \u4e2d\u6587\u82f1\u6587 <p>\u6b63\u5982\u6211\u4eec\u4e4b\u524d\u63d0\u5230\u7684\uff0c\u7b97\u6cd5\u9700\u8981\u4e24\u4e2a\u91cd\u8981\u7684\u63a7\u5236\u7ed3\u6784\uff1a\u8fed\u4ee3(iteration)\u548c\u9009\u62e9(selection)\u3002 Python \u4ee5\u5404\u79cd\u5f62\u5f0f\u652f\u6301\u8fd9\u4e24\u8005\u3002 \u7a0b\u5e8f\u5458\u53ef\u4ee5\u9009\u62e9\u5bf9\u4e8e\u7ed9\u5b9a\u60c5\u51b5\u6700\u6709\u7528\u7684\u8bed\u53e5\u3002</p> <p>\u5bf9\u4e8e\u8fed\u4ee3\uff0cPython \u63d0\u4f9b\u4e86\u4e00\u4e2a\u6807\u51c6\u7684<code>while</code>\u8bed\u53e5\u548c\u4e00\u4e2a\u975e\u5e38\u5f3a\u5927\u7684<code>for</code>\u8bed\u53e5\u3002 \u53ea\u8981\u6761\u4ef6\u8ba1\u7b97\u7ed3\u679c\u4e3a<code>True</code>\uff0cwhile \u8bed\u53e5\u5c31\u4f1a\u91cd\u590d\u4e00\u6bb5\u4ee3\u7801\u3002 \u4f8b\u5982\uff0c</p> <pre><code>&gt;&gt;&gt; counter = 1\n&gt;&gt;&gt; while counter &lt;= 5:\n...     print(\"Hello, world\")\n...     counter = counter + 1\n... \nHello, world\nHello, world\nHello, world\nHello, world\nHello, world\n</code></pre> <p>\u6253\u5370\u51fa\u4e94\u6b21<code>Hello, world</code>\u77ed\u8bed\u3002 <code>while</code> \u8bed\u53e5\u4e0a\u7684\u6761\u4ef6\u5728\u6bcf\u6b21\u91cd\u590d\u5f00\u59cb\u65f6\u8fdb\u884c\u8bc4\u4f30\u3002 \u5982\u679c\u6761\u4ef6\u8ba1\u7b97\u7ed3\u679c\u4e3a<code>True</code>\uff0c\u5219\u8bed\u53e5\u7684\u4e3b\u4f53\u5c06\u6267\u884c\u3002 \u7531\u4e8e Python \u8bed\u8a00\u5f3a\u5236\u6267\u884c\u5f3a\u5236\u7f29\u8fdb\u6a21\u5f0f\uff0c\u56e0\u6b64\u5f88\u5bb9\u6613\u770b\u5230 Python while \u8bed\u53e5\u7684\u7ed3\u6784\u3002</p> <p>while \u8bed\u53e5\u662f\u4e00\u79cd\u975e\u5e38\u901a\u7528\u7684\u8fed\u4ee3\u7ed3\u6784\uff0c\u6211\u4eec\u5c06\u5728\u8bb8\u591a\u4e0d\u540c\u7684\u7b97\u6cd5\u4e2d\u4f7f\u7528\u5b83\u3002 \u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u590d\u5408\u6761\u4ef6\u5c06\u63a7\u5236\u8fed\u4ee3\u3002 \u4e00\u4e2a\u7247\u6bb5\u5982</p> <pre><code>while counter &lt;= 10 and not done:\n...\n</code></pre> <p>\u53ea\u4f1a\u5728\u6761\u4ef6\u7684\u4e24\u4e2a\u90e8\u5206\u90fd\u6ee1\u8db3\u7684\u60c5\u51b5\u4e0b\u624d\u6267\u884c\u8bed\u53e5\u4e3b\u4f53\u3002 \u53d8\u91cf<code>counter</code>\u7684\u503c\u9700\u8981\u5c0f\u4e8e\u6216\u7b49\u4e8e10\uff0c\u5e76\u4e14\u53d8\u91cf<code>done</code>\u7684\u503c\u9700\u8981\u4e3a<code>False</code>\uff08<code>not False</code>\u662f <code>True</code>\uff09\uff0c\u8fd9\u6837<code>True and True</code> \u5c31\u4f1a\u5f97\u5230<code>True</code>\u3002</p> <p>\u5c3d\u7ba1\u8fd9\u79cd\u7c7b\u578b\u7684\u6784\u9020\u5728\u591a\u79cd\u60c5\u51b5\u4e0b\u90fd\u975e\u5e38\u6709\u7528\uff0c\u4f46\u53e6\u4e00\u79cd\u8fed\u4ee3\u7ed3\u6784<code>for</code>\u8bed\u53e5\u53ef\u4ee5\u4e0e\u8bb8\u591a Python \u96c6\u5408\u7ed3\u5408\u4f7f\u7528\u3002 <code>for</code> \u8bed\u53e5\u53ef\u7528\u4e8e\u8fed\u4ee3\u96c6\u5408\u7684\u6210\u5458\uff0c\u53ea\u8981\u96c6\u5408\u662f\u4e00\u4e2a\u5e8f\u5217\u3002 \u6240\u4ee5\uff0c\u4e3e\u4f8b\u6765\u8bf4\uff0c</p> <pre><code>&gt;&gt;&gt; for item in [1, 3, 6, 2, 5]:\n...    print(item)\n...\n1\n3\n6\n2\n5\n</code></pre> <p>\u5c06\u53d8\u91cf<code>item</code>\u6307\u5b9a\u4e3a\u5217\u8868 <code>[1, 3, 6, 2, 5]</code> \u4e2d\u7684\u6bcf\u4e2a\u8fde\u7eed\u503c\u3002 \u7136\u540e\u6267\u884c\u8fed\u4ee3\u7684\u4e3b\u4f53\u3002 \u8fd9\u9002\u7528\u4e8e\u4efb\u4f55\u5e8f\u5217\u96c6\u5408\uff08\u5217\u8868\u3001\u5143\u7ec4\u548c\u5b57\u7b26\u4e32\uff09\u3002</p> <p><code>for</code> \u8bed\u53e5\u7684\u5e38\u89c1\u7528\u9014\u662f\u5728\u4e00\u7cfb\u5217\u503c\u4e0a\u5b9e\u73b0\u660e\u786e\u7684\u8fed\u4ee3\u3002 \u8be5\u58f0\u660e</p> <pre><code>&gt;&gt;&gt; for item in range(5):\n...    print(item ** 2)\n...\n0\n1\n4\n9\n16\n</code></pre> <p>\u5c06\u6267\u884c<code>print</code>\u51fd\u6570\u4e94\u6b21\u3002 <code>range</code>\u51fd\u6570\u5c06\u8fd4\u56de\u4e00\u4e2a\u8868\u793a\u5e8f\u5217 0\u30011\u30012\u30013\u30014 \u7684\u8303\u56f4\u5bf9\u8c61\uff0c\u6bcf\u4e2a\u503c\u5c06\u5206\u914d\u7ed9\u53d8\u91cf<code>item</code>\u3002 \u7136\u540e\u5bf9\u8be5\u503c\u8fdb\u884c\u5e73\u65b9\u5e76\u6253\u5370\u3002</p> <p>\u6b64\u8fed\u4ee3\u7ed3\u6784\u7684\u53e6\u4e00\u4e2a\u6709\u7528\u7248\u672c\u7528\u4e8e\u5904\u7406\u5b57\u7b26\u4e32\u7684\u6bcf\u4e2a\u5b57\u7b26\u3002 \u4ee5\u4e0b\u4ee3\u7801\u7247\u6bb5\u8fed\u4ee3\u5b57\u7b26\u4e32\u5217\u8868\uff0c\u5e76\u901a\u8fc7\u5c06\u6bcf\u4e2a\u5b57\u7b26\u4e32\u9644\u52a0\u5230\u5217\u8868\u6765\u5904\u7406\u6bcf\u4e2a\u5b57\u7b26\u4e32\u3002 \u7ed3\u679c\u662f\u6240\u6709\u5355\u8bcd\u4e2d\u6240\u6709\u5b57\u6bcd\u7684\u5217\u8868\u3002</p> \u5904\u7406\u5b57\u7b26\u4e32\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26(Activecode 8)<pre><code>word_list = [\"cat\", \"dog\", \"rabbit\"]\nletter_list = [ ]\nfor a_word in word_list:\n    for a_letter in a_word:\n        letter_list.append(a_letter)\nprint(letter_list)\n</code></pre> <p>\u9009\u62e9\u8bed\u53e5\u5141\u8bb8\u7a0b\u5e8f\u5458\u63d0\u51fa\u95ee\u9898\uff0c\u7136\u540e\u6839\u636e\u7ed3\u679c\u6267\u884c\u4e0d\u540c\u7684\u64cd\u4f5c\u3002 \u5927\u591a\u6570\u7f16\u7a0b\u8bed\u8a00\u63d0\u4f9b\u4e86\u8fd9\u4e2a\u6709\u7528\u7ed3\u6784\u7684\u4e24\u4e2a\u7248\u672c\uff1a<code>if...else</code>\u548c<code>if</code>\u3002 \u4e8c\u8fdb\u5236\u9009\u62e9\u7684\u4e00\u4e2a\u7b80\u5355\u793a\u4f8b\u4f7f\u7528<code>if...else</code>\u8bed\u53e5\u3002</p> <pre><code>&gt;&gt;&gt; import math\n&gt;&gt;&gt; n = 16\n&gt;&gt;&gt; if n &lt; 0:\n...   print(\"Sorry, value is negative\")\n... else:\n...   print(math.sqrt(n))\n... \n4.0\n</code></pre> <p>\u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u68c0\u67e5<code>n</code>\u5f15\u7528\u7684\u5bf9\u8c61\u4ee5\u67e5\u770b\u5b83\u662f\u5426\u5c0f\u4e8e\u96f6\u3002 \u5982\u679c\u662f\uff0c\u5219\u4f1a\u6253\u5370\u4e00\u6761\u6d88\u606f\uff0c\u6307\u51fa\u7ed3\u679c\u662f\u5426\u5b9a\u7684\u3002 \u5982\u679c\u4e0d\u662f\uff0c\u5219\u8be5\u8bed\u53e5\u6267\u884c<code>else</code>\u5b50\u53e5\u5e76\u8ba1\u7b97\u5e73\u65b9\u6839\u3002</p> <p>\u4e0e\u4efb\u4f55\u63a7\u5236\u7ed3\u6784\u4e00\u6837\uff0c\u9009\u62e9\u7ed3\u6784\u53ef\u4ee5\u5d4c\u5957\uff0c\u4ee5\u4fbf\u4e00\u4e2a\u95ee\u9898\u7684\u7ed3\u679c\u6709\u52a9\u4e8e\u51b3\u5b9a\u662f\u5426\u8be2\u95ee\u4e0b\u4e00\u4e2a\u95ee\u9898\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe<code>score</code>\u662f\u4e00\u4e2a\u53d8\u91cf\uff0c\u4fdd\u5b58\u5bf9\u8ba1\u7b97\u673a\u79d1\u5b66\u6d4b\u8bd5\u5206\u6570\u7684\u5f15\u7528\u3002</p> <pre><code>&gt;&gt;&gt; if score &gt;= 90:\n...     print(\"A\")\n... else:\n...     if score &gt;= 80:\n...         print(\"B\")\n...     else:\n...         if score &gt;= 70:\n...             print(\"C\")\n...         else:\n...             if score &gt;= 60:\n...                 print(\"D\")\n...             else:\n...                 print(\"F\")\n</code></pre> <p>\u8be5\u7247\u6bb5\u5c06\u901a\u8fc7\u6253\u5370\u83b7\u5f97\u7684\u5b57\u6bcd\u7b49\u7ea7\u6765\u5bf9\u79f0\u4e3a\u201c\u5206\u6570(score)\u201d\u7684\u503c\u8fdb\u884c\u5206\u7c7b\u3002 \u5982\u679c\u5206\u6570\u5927\u4e8e\u6216\u7b49\u4e8e 90\uff0c\u5219\u8bed\u53e5\u5c06\u6253\u5370\u201cA\u201d\u3002 \u5982\u679c\u4e0d\u662f\uff08<code>else</code>\uff09\uff0c\u5219\u8be2\u95ee\u4e0b\u4e00\u4e2a\u95ee\u9898\u3002 \u5982\u679c\u5206\u6570\u5927\u4e8e\u6216\u7b49\u4e8e 80\uff0c\u90a3\u4e48\u5b83\u5fc5\u987b\u5728 80 \u5230 89 \u4e4b\u95f4\uff0c\u56e0\u4e3a\u7b2c\u4e00\u4e2a\u95ee\u9898\u7684\u7b54\u6848\u662f\u9519\u8bef\u7684\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6253\u5370\u201cB\u201d\u3002 \u60a8\u53ef\u4ee5\u770b\u5230\uff0cPython \u7f29\u8fdb\u6a21\u5f0f\u6709\u52a9\u4e8e\u7406\u89e3<code>if</code>\u548c<code>else</code>\u4e4b\u95f4\u7684\u5173\u8054\uff0c\u800c\u4e0d\u9700\u8981\u4efb\u4f55\u989d\u5916\u7684\u8bed\u6cd5\u5143\u7d20\u3002</p> <p>\u8fd9\u79cd\u7c7b\u578b\u7684\u5d4c\u5957\u9009\u62e9\u7684\u66ff\u4ee3\u8bed\u6cd5\u4f7f\u7528<code>elif</code>\u5173\u952e\u5b57\u3002 \u5c06<code>else</code>\u548c\u4e0b\u4e00\u4e2a<code>if</code>\u7ec4\u5408\u8d77\u6765\uff0c\u4ee5\u4fbf\u6d88\u9664\u989d\u5916\u5d4c\u5957\u7ea7\u522b\u7684\u9700\u8981\u3002 \u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u6240\u6709\u5176\u4ed6\u6761\u4ef6\u5747\u5931\u8d25\uff0c\u6700\u540e\u7684<code>else</code>\u4ecd\u7136\u9700\u8981\u63d0\u4f9b\u9ed8\u8ba4\u60c5\u51b5\u3002</p> <pre><code>&gt;&gt;&gt; if score &gt;= 90:\n...     print(\"A\")\n... elif score &gt;= 80:\n...     print(\"B\")\n... elif score &gt;= 70:\n...     print(\"C\")\n... elif score &gt;= 60:\n...     print(\"D\")\n... else:\n...     print(\"F\")\n</code></pre> <p>Python \u8fd8\u6709\u4e00\u4e2a\u5355\u5411\u9009\u62e9\u7ed3\u6784\uff0c\u5373<code>if</code>\u8bed\u53e5\u3002 \u4f7f\u7528\u6b64\u8bed\u53e5\uff0c\u5982\u679c\u6761\u4ef6\u4e3a\u771f\uff0c\u5219\u6267\u884c\u64cd\u4f5c\u3002 \u5728\u6761\u4ef6\u4e3a\u5047\u7684\u60c5\u51b5\u4e0b\uff0c\u5904\u7406\u7b80\u5355\u5730\u7ee7\u7eed\u5230<code>if</code>\u4e4b\u540e\u7684\u4e0b\u4e00\u4e2a\u8bed\u53e5\u3002 \u4f8b\u5982\uff0c\u4ee5\u4e0b\u7247\u6bb5\u5c06\u9996\u5148\u68c0\u67e5\u53d8\u91cf\u201cn\u201d\u7684\u503c\u662f\u5426\u4e3a\u8d1f\u6570\u3002 \u5982\u679c\u662f\uff0c\u5219\u901a\u8fc7\u7edd\u5bf9\u503c\u51fd\u6570\u5bf9\u5176\u8fdb\u884c\u4fee\u6539\u3002 \u65e0\u8bba\u5982\u4f55\uff0c\u4e0b\u4e00\u6b65\u662f\u8ba1\u7b97\u5e73\u65b9\u6839\u3002</p> <pre><code>if n &lt; 0:\n    n = abs(n)\nprint(math.sqrt(n))\n</code></pre> <p>\u81ea\u68c0</p> <p>\u901a\u8fc7\u5c1d\u8bd5\u4ee5\u4e0b\u7ec3\u4e60\u6765\u6d4b\u8bd5\u60a8\u5bf9\u6211\u4eec\u8fc4\u4eca\u4e3a\u6b62\u6240\u6db5\u76d6\u5185\u5bb9\u7684\u7406\u89e3\u3002 \u4fee\u6539 Activecode 8 \u4e2d\u7684\u4ee3\u7801\uff0c\u4ee5\u4fbf\u6700\u7ec8\u5217\u8868\u4ec5\u5305\u542b\u6bcf\u4e2a\u5b57\u6bcd\u7684\u4e00\u4e2a\u526f\u672c\u3002</p> <pre><code># the answer is: ['c', 'a', 't', 'd', 'o', 'g', 'r', 'b', 'i']\n</code></pre> <p></p> <p>\u56de\u5230\u5217\u8868\uff0c\u8fd8\u6709\u4e00\u79cd\u521b\u5efa\u5217\u8868\u7684\u66ff\u4ee3\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u4f7f\u7528\u8fed\u4ee3\u548c\u9009\u62e9\u7ed3\u6784\uff0c\u79f0\u4e3a\u5217\u8868\u63a8\u5bfc\u5f0f(list comprehension)\u3002 \u5217\u8868\u63a8\u5bfc\u5f0f\u5141\u8bb8\u60a8\u6839\u636e\u67d0\u4e9b\u5904\u7406\u6216\u9009\u62e9\u6807\u51c6\u8f7b\u677e\u521b\u5efa\u5217\u8868\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u6211\u4eec\u60f3\u521b\u5efa\u524d 10 \u4e2a\u5b8c\u5168\u5e73\u65b9\u6570\u7684\u5217\u8868\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528<code>for</code>\u8bed\u53e5\uff1a</p> <pre><code>&gt;&gt;&gt; sq_list = []\n&gt;&gt;&gt; for x in range(1, 11):\n...     sq_list.append(x * x)\n... \n&gt;&gt;&gt; sq_list\n[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n</code></pre> <p>\u4f7f\u7528\u5217\u8868\u63a8\u5bfc\u5f0f\uff0c\u6211\u4eec\u53ef\u4ee5\u4e00\u6b65\u5b8c\u6210\u6b64\u64cd\u4f5c\uff0c\u5982\u4e0b\u6240\u793a</p> <pre><code>&gt;&gt;&gt; sq_list=[x * x for x in range(1, 11)]\n&gt;&gt;&gt; sq_list\n[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n</code></pre> <p>\u53d8\u91cf<code>x</code>\u91c7\u7528\u7531<code>for</code>\u7ed3\u6784\u6307\u5b9a\u7684\u4ece1\u523010\u7684\u503c\u3002 \u7136\u540e\u8ba1\u7b97<code>x * x</code>\u7684\u503c\u5e76\u5c06\u5176\u6dfb\u52a0\u5230\u6b63\u5728\u6784\u9020\u7684\u5217\u8868\u4e2d\u3002</p> <p>\u5217\u8868\u63a8\u5bfc\u5f0f\u7684\u901a\u7528\u8bed\u6cd5\u8fd8\u5141\u8bb8\u6dfb\u52a0\u9009\u62e9\u6807\u51c6\uff0c\u4ee5\u4fbf\u4ec5\u6dfb\u52a0\u67d0\u4e9b\u9879\u76ee\u3002 \u4f8b\u5982\uff0c</p> <pre><code>&gt;&gt;&gt; sq_list=[x * x for x in range(1,11) if x % 2 != 0]\n&gt;&gt;&gt; sq_list\n[1, 9, 25, 49, 81]\n</code></pre> <p>\u6b64\u5217\u8868\u63a8\u5bfc\u5f0f\u6784\u9020\u4e00\u4e2a\u4ec5\u5305\u542b 1 \u5230 10 \u8303\u56f4\u5185\u7684\u5947\u6570\u7684\u5e73\u65b9\u7684\u5217\u8868\u3002\u4efb\u4f55\u652f\u6301\u8fed\u4ee3\u7684\u5e8f\u5217\u90fd\u53ef\u4ee5\u5728\u5217\u8868\u63a8\u5bfc\u5f0f\u4e2d\u4f7f\u7528\u6765\u6784\u9020\u65b0\u5217\u8868\u3002</p> <pre><code>&gt;&gt;&gt;[ch.upper() for ch in 'comprehension' if ch not in 'aeiou']\n['C', 'M', 'P', 'R', 'H', 'N', 'S', 'N']\n</code></pre> <p>\u81ea\u68c0</p> <p>\u901a\u8fc7\u4f7f\u7528\u5217\u8868\u63a8\u5bfc\u5f0f\u91cd\u505a Activecode 1 \u6765\u6d4b\u8bd5\u60a8\u5bf9\u5217\u8868\u63a8\u5bfc\u5f0f\u7684\u7406\u89e3\u3002 \u5bf9\u4e8e\u989d\u5916\u7684\u6311\u6218\uff0c\u770b\u770b\u60a8\u662f\u5426\u80fd\u5f04\u6e05\u695a\u5982\u4f55\u5220\u9664\u91cd\u590d\u9879\u3002</p> <pre><code># the answer is: ['c', 'a', 't', 'd', 'o', 'g', 'r', 'a', 'b', 'b', 'i', 't']\n</code></pre> <p></p> <p>As we noted earlier, algorithms require two important control structures: iteration and selection. Both of these are supported by Python in various forms. The programmer can choose the statement that is most useful for the given circumstance.</p> <p>For iteration, Python provides a standard <code>while</code> statement and a very powerful <code>for</code> statement. The while statement repeats a body of code as long as a condition evaluates to <code>True</code>. For example,</p> <pre><code>&gt;&gt;&gt; counter = 1\n&gt;&gt;&gt; while counter &lt;= 5:\n...     print(\"Hello, world\")\n...     counter = counter + 1\n... \nHello, world\nHello, world\nHello, world\nHello, world\nHello, world\n</code></pre> <p>prints out the phrase <code>Hello, world</code> five times. The condition on the <code>while</code> statement is evaluated at the start of each repetition. If the condition evaluates to <code>True</code>, the body of the statement will execute. It is easy to see the structure of a Python <code>while</code> statement due to the mandatory indentation pattern that the language enforces.</p> <p>The <code>while</code> statement is a very general-purpose iterative structure that we will use in a number of different algorithms. In many cases, a compound condition will control the iteration. A fragment such as</p> <pre><code>while counter &lt;= 10 and not done:\n...\n</code></pre> <p>would cause the body of the statement to be executed only in the case where both parts of the condition are satisfied. The value of the variable <code>counter</code> would need to be less than or equal to 10, and the value of the variable <code>done</code> would need to be <code>False</code> (<code>not False</code> is <code>True</code>) so that <code>True and True</code> results in <code>True</code>.</p> <p>Even though this type of construct is very useful in a wide variety of situations, another iterative structure, the <code>for</code> statement, can be used in conjunction with many of the Python collections. The <code>for</code> statement can be used to iterate over the members of a collection, so long as the collection is a sequence. So, for example,</p> <pre><code>&gt;&gt;&gt; for item in [1, 3, 6, 2, 5]:\n...    print(item)\n...\n1\n3\n6\n2\n5\n</code></pre> <p>assigns the variable <code>item</code> to be each successive value in the list [1, 3, 6, 2, 5]. The body of the iteration is then executed. This works for any collection that is a sequence (lists, tuples, and strings).</p> <p>A common use of the <code>for</code> statement is to implement definite iteration over a range of values. The statement</p> <pre><code>&gt;&gt;&gt; for item in range(5):\n...    print(item ** 2)\n...\n0\n1\n4\n9\n16\n</code></pre> <p>will perform the <code>print</code> function five times. The <code>range</code> function will return a range object representing the sequence 0, 1, 2, 3, 4 and each value will be assigned to the variable <code>item</code>. This value is then squared and printed.</p> <p>Another useful version of this iteration structure is used to process each character of a string. The following code fragment iterates over a list of strings and for each string processes each character by appending it to a list. The result is a list of all the letters in all of the words.</p> Processing Each Character in a List of Strings<pre><code>word_list = [\"cat\", \"dog\", \"rabbit\"]\nletter_list = [ ]\nfor a_word in word_list:\n    for a_letter in a_word:\n        letter_list.append(a_letter)\nprint(letter_list)\n</code></pre> <p>Selection statements allow programmers to ask questions and then, based on the result, perform different actions. Most programming languages provide two versions of this useful construct: the <code>if...else</code> and the <code>if</code>. A simple example of a binary selection uses the <code>if...else</code> statement.</p> <pre><code>&gt;&gt;&gt; import math\n&gt;&gt;&gt; n = 16\n&gt;&gt;&gt; if n &lt; 0:\n...   print(\"Sorry, value is negative\")\n... else:\n...   print(math.sqrt(n))\n... \n4.0\n</code></pre> <p>In this example, the object referred to by <code>n</code> is checked to see if it is less than zero. If it is, a message is printed stating that it is negative. If it is not, the statement performs the <code>else</code> clause and computes the square root.</p> <p>Selection constructs, as with any control construct, can be nested so that the result of one question helps decide whether to ask the next. For example, assume that <code>score</code> is a variable holding a reference to a score for a computer science test.</p> <pre><code>&gt;&gt;&gt; if score &gt;= 90:\n...     print(\"A\")\n... else:\n...     if score &gt;= 80:\n...         print(\"B\")\n...     else:\n...         if score &gt;= 70:\n...             print(\"C\")\n...         else:\n...             if score &gt;= 60:\n...                 print(\"D\")\n...             else:\n...                 print(\"F\")\n</code></pre> <p>This fragment will classify a value called <code>score</code> by printing the letter grade earned. If the score is greater than or equal to 90, the statement will print <code>A</code>. If it is not (<code>else</code>), the next question is asked. If the score is greater than or equal to 80, then it must be between 80 and 89 since the answer to the first question was false. In this case print <code>B</code> is printed. You can see that the Python indentation pattern helps to make sense of the association between <code>if</code> and <code>else</code> without requiring any additional syntactic elements.</p> <p>An alternative syntax for this type of nested selection uses the <code>elif</code> keyword. The <code>else</code> and the next <code>if</code> are combined so as to eliminate the need for additional nesting levels. Note that the final <code>else</code> is still necessary to provide the default case if all other conditions fail.</p> <pre><code>&gt;&gt;&gt; if score &gt;= 90:\n...     print(\"A\")\n... elif score &gt;= 80:\n...     print(\"B\")\n... elif score &gt;= 70:\n...     print(\"C\")\n... elif score &gt;= 60:\n...     print(\"D\")\n... else:\n...     print(\"F\")\n</code></pre> <p>Python also has a single-way selection construct, the <code>if</code> statement. With this statement, if the condition is true, an action is performed. In the case where the condition is false, processing simply continues on to the next statement after the <code>if</code>. For example, the following fragment will first check to see if the value of a variable <code>n</code> is negative. If it is, then it is modified by the absolute value function. Regardless, the next action is to compute the square root.</p> <pre><code>if n &lt; 0:\n    n = abs(n)\nprint(math.sqrt(n))\n</code></pre> <p>Self Check</p> <p>Test your understanding of what we have covered so far by trying the following exercise.  Modify the code from Activecode 8 so that the final list only contains a single copy of each letter.</p> <pre><code># the answer is: ['c', 'a', 't', 'd', 'o', 'g', 'r', 'b', 'i']\n</code></pre> <p></p> <p>Returning to lists, there is an alternative method for creating a list that uses iteration and selection constructs known as a list comprehension. A list comprehension allows you to easily create a list based on some processing or selection criteria. For example, if we would like to create a list of the first 10 perfect squares, we could use a <code>for</code> statement:</p> <pre><code>&gt;&gt;&gt; sq_list = []\n&gt;&gt;&gt; for x in range(1, 11):\n...     sq_list.append(x * x)\n... \n&gt;&gt;&gt; sq_list\n[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n</code></pre> <p>Using a list comprehension, we can do this in one step as</p> <pre><code>&gt;&gt;&gt; sq_list=[x * x for x in range(1, 11)]\n&gt;&gt;&gt; sq_list\n[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n</code></pre> <p>The variable <code>x</code> takes on the values 1 through 10 as specified by the <code>for</code> construct. The value of <code>x * x</code> is then computed and added to the list that is being constructed.</p> <p>The general syntax for a list comprehension also allows a selection criteria to be added so that only certain items get added. For example,</p> <pre><code>&gt;&gt;&gt; sq_list=[x * x for x in range(1,11) if x % 2 != 0]\n&gt;&gt;&gt; sq_list\n[1, 9, 25, 49, 81]\n</code></pre> <p>This list comprehension constructs a list that contains the squares of only the odd numbers in the range from 1 to 10. Any sequence that supports iteration can be used within a list comprehension to construct a new list.</p> <pre><code>&gt;&gt;&gt;[ch.upper() for ch in 'comprehension' if ch not in 'aeiou']\n['C', 'M', 'P', 'R', 'H', 'N', 'S', 'N']\n</code></pre> <p>Self Check</p> <p>Test your understanding of list comprehensions by redoing Activecode 1 using list comprehensions.  For an extra challenge, see if you can figure out how to remove the duplicates.</p> <pre><code># the answer is: ['c', 'a', 't', 'd', 'o', 'g', 'r', 'a', 'b', 'b', 'i', 't']\n</code></pre> <p></p>"},{"location":"c1/s11/","title":"1.11. \u5f02\u5e38\u5904\u7406","text":"<p>1.11. Exception Handling</p> \u4e2d\u6587\u82f1\u6587 <p>\u7f16\u5199\u7a0b\u5e8f\u65f6\u901a\u5e38\u4f1a\u51fa\u73b0\u4e24\u79cd\u7c7b\u578b\u7684\u9519\u8bef\u3002 \u7b2c\u4e00\u4e2a\u88ab\u79f0\u4e3a \u8bed\u6cd5\u9519\u8bef(syntax error) \uff0c\u4ec5\u4ec5\u610f\u5473\u7740\u7a0b\u5e8f\u5458\u5728\u8bed\u53e5\u6216\u8868\u8fbe\u5f0f\u7684\u7ed3\u6784\u4e2d\u72af\u4e86\u9519\u8bef\u3002 \u4f8b\u5982\uff0c\u7f16\u5199 for \u8bed\u53e5\u800c\u5fd8\u8bb0\u5192\u53f7\u662f\u4e0d\u6b63\u786e\u7684\u3002</p> <pre><code>&gt;&gt;&gt; for i in range(10)\nFile \"&lt;stdin&gt;\", line 1\n    for i in range(10)\n                    ^\nSyntaxError: invalid syntax\n</code></pre> <p>\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cPython\u89e3\u91ca\u5668\u53d1\u73b0\u5b83\u65e0\u6cd5\u5b8c\u6210\u8fd9\u6761\u6307\u4ee4\u7684\u5904\u7406\uff0c\u56e0\u4e3a\u5b83\u4e0d\u7b26\u5408\u8bed\u8a00\u7684\u89c4\u5219\u3002 \u5f53\u60a8\u7b2c\u4e00\u6b21\u5b66\u4e60\u8bed\u8a00\u65f6\uff0c\u8bed\u6cd5\u9519\u8bef\u901a\u5e38\u4f1a\u66f4\u9891\u7e41\u3002</p> <p>\u53e6\u4e00\u79cd\u7c7b\u578b\u7684\u9519\u8bef\u79f0\u4e3a\u903b\u8f91\u9519\u8bef(logic error)\uff0c\u8868\u793a\u7a0b\u5e8f\u6267\u884c\u4f46\u7ed9\u51fa\u9519\u8bef\u7ed3\u679c\u7684\u60c5\u51b5\u3002 \u8fd9\u53ef\u80fd\u662f\u7531\u4e8e\u5e95\u5c42\u7b97\u6cd5\u4e2d\u7684\u9519\u8bef\u6216\u8be5\u7b97\u6cd5\u7684\u7ffb\u8bd1\u4e2d\u7684\u9519\u8bef\u9020\u6210\u7684\u3002 \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u903b\u8f91\u9519\u8bef\u4f1a\u5bfc\u81f4\u975e\u5e38\u7cdf\u7cd5\u7684\u60c5\u51b5\uff0c\u4f8b\u5982\u5c1d\u8bd5\u9664\u4ee5\u96f6\u6216\u5c1d\u8bd5\u8bbf\u95ee\u5217\u8868\u4e2d\u7684\u9879\u76ee\uff0c\u4f46\u8be5\u9879\u76ee\u7684\u7d22\u5f15\u8d85\u51fa\u4e86\u5217\u8868\u7684\u8fb9\u754c\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u903b\u8f91\u9519\u8bef\u4f1a\u5bfc\u81f4\u8fd0\u884c\u65f6\u9519\u8bef\uff0c\u4ece\u800c\u5bfc\u81f4\u7a0b\u5e8f\u7ec8\u6b62\u3002 \u8fd9\u4e9b\u7c7b\u578b\u7684\u8fd0\u884c\u65f6\u9519\u8bef\u901a\u5e38\u79f0\u4e3a\u5f02\u5e38\u3002</p> <p>\u5927\u591a\u6570\u65f6\u5019\uff0c\u521d\u7ea7\u7a0b\u5e8f\u5458\u53ea\u662f\u5c06\u5f02\u5e38\u89c6\u4e3a\u5bfc\u81f4\u6267\u884c\u7ed3\u675f\u7684\u81f4\u547d\u8fd0\u884c\u65f6\u9519\u8bef\u3002 \u7136\u800c\uff0c\u5927\u591a\u6570\u7f16\u7a0b\u8bed\u8a00\u90fd\u63d0\u4f9b\u4e86\u4e00\u79cd\u5904\u7406\u8fd9\u4e9b\u9519\u8bef\u7684\u65b9\u6cd5\uff0c\u5141\u8bb8\u7a0b\u5e8f\u5458\u8fdb\u884c\u67d0\u79cd\u7c7b\u578b\u7684\u5e72\u9884\uff08\u5982\u679c\u4ed6\u4eec\u613f\u610f\u7684\u8bdd\uff09\u3002 \u6b64\u5916\uff0c\u5982\u679c\u7a0b\u5e8f\u5458\u5728\u7a0b\u5e8f\u6267\u884c\u4e2d\u68c0\u6d4b\u5230\u6709\u5fc5\u8981\u7684\u60c5\u51b5\uff0c\u5219\u53ef\u4ee5\u521b\u5efa\u81ea\u5df1\u7684\u5f02\u5e38\u3002</p> <p>\u5f53\u5f02\u5e38\u53d1\u751f\u65f6\uff0c\u6211\u4eec\u8bf4\u5b83\u5df2\u88ab\u5f15\u53d1(raised)\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528<code>try</code>\u8bed\u53e5\u5904\u7406(handle)\u5f15\u53d1\u7684\u5f02\u5e38\u3002 \u4f8b\u5982\uff0c\u8003\u8651\u4ee5\u4e0b\u4f1a\u8bdd\uff0c\u8be5\u4f1a\u8bdd\u8981\u6c42\u7528\u6237\u63d0\u4f9b\u4e00\u4e2a\u6574\u6570\uff0c\u7136\u540e\u8c03\u7528\u6570\u5b66\u5e93\u4e2d\u7684\u5e73\u65b9\u6839\u51fd\u6570\u3002 \u5982\u679c\u7528\u6237\u8f93\u5165\u5927\u4e8e\u6216\u7b49\u4e8e0\u7684\u503c\uff0c\u5219\u6253\u5370\u5c06\u663e\u793a\u5e73\u65b9\u6839\u3002 \u4f46\u662f\uff0c\u5982\u679c\u7528\u6237\u8f93\u5165\u8d1f\u503c\uff0c\u5e73\u65b9\u6839\u51fd\u6570\u5c06\u62a5\u544a<code>ValueError</code>\u5f02\u5e38\u3002</p> <pre><code>&gt;&gt;&gt; import math\n&gt;&gt;&gt; a_number = int(input(\"Please enter an integer \"))\nPlease enter an integer -23\n&gt;&gt;&gt; print(math.sqrt(a_number))\nTraceback (most recent call last):\n    File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nValueError: math domain error\n</code></pre> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4ece<code>try</code>\u5757\u4e2d\u8c03\u7528<code>print</code>\u51fd\u6570\u6765\u5904\u7406\u6b64\u5f02\u5e38\u3002 \u76f8\u5e94\u7684<code>except</code>\u5757 \u6355\u83b7(catches) \u5f02\u5e38\uff0c\u5e76\u5728\u53d1\u751f\u5f02\u5e38\u65f6\u5411\u7528\u6237\u6253\u5370\u4e00\u6761\u6d88\u606f\u3002 \u4f8b\u5982\uff1a</p> <pre><code>&gt;&gt;&gt; try:\n...   print(math.sqrt(a_number))\n... except:\n...   print(\"Bad value for the square root function\")\n...   print(\"Using the absolute value instead\")\n...   print(math.sqrt(abs(a_number)))\n... \nBad value for the square root function\nUsing the absolute value instead\n4.795831523312719\n</code></pre> <p>\u5c06\u6355\u83b7<code>sqrt</code>\u5f15\u53d1\u5f02\u5e38\u7684\u4e8b\u5b9e\uff0c\u5e76\u5c06\u6d88\u606f\u6253\u5370\u56de\u7528\u6237\u5e76\u4f7f\u7528\u7edd\u5bf9\u503c\u6765\u786e\u4fdd\u6211\u4eec\u6b63\u5728\u53d6\u975e\u8d1f\u6570\u7684\u5e73\u65b9\u6839\u3002 \u8fd9\u610f\u5473\u7740\u7a0b\u5e8f\u4e0d\u4f1a\u7ec8\u6b62\uff0c\u800c\u662f\u7ee7\u7eed\u6267\u884c\u4e0b\u4e00\u6761\u8bed\u53e5\u3002</p> <p>\u7a0b\u5e8f\u5458\u4e5f\u6709\u53ef\u80fd\u901a\u8fc7\u4f7f\u7528<code>raise</code>\u8bed\u53e5\u5f15\u8d77\u8fd0\u884c\u65f6\u5f02\u5e38\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u68c0\u67e5\u8be5\u503c\uff0c\u7136\u540e\u5f15\u53d1\u81ea\u5df1\u7684\u5f02\u5e38\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u8d1f\u6570\u8c03\u7528\u5e73\u65b9\u6839\u51fd\u6570\u3002 \u4e0b\u9762\u7684\u4ee3\u7801\u7247\u6bb5\u663e\u793a\u4e86\u521b\u5efa\u65b0\u7684<code>RuntimeError</code>\u5f02\u5e38\u7684\u7ed3\u679c\u3002 \u8bf7\u6ce8\u610f\uff0c\u7a0b\u5e8f\u4ecd\u7136\u4f1a\u7ec8\u6b62\uff0c\u4f46\u73b0\u5728\u5bfc\u81f4\u7ec8\u6b62\u7684\u5f02\u5e38\u662f\u7531\u7a0b\u5e8f\u5458\u663e\u5f0f\u521b\u5efa\u7684\u3002</p> <pre><code>&gt;&gt;&gt; if a_number &lt; 0:\n...   raise RuntimeError(\"You can't use a negative number\")\n... else:\n...   print(math.sqrt(a_number))\n... \nTraceback (most recent call last):\n    File \"&lt;stdin&gt;\", line 2, in &lt;module&gt;\nRuntimeError: You can't use a negative number\n</code></pre> <p>\u9664\u4e86\u4e0a\u9762\u663e\u793a\u7684<code>RuntimeError</code>\u4e4b\u5916\uff0c\u8fd8\u53ef\u4ee5\u5f15\u53d1\u591a\u79cd\u5f02\u5e38\u3002 \u6709\u5173\u6240\u6709\u53ef\u7528\u5f02\u5e38\u7c7b\u578b\u7684\u5217\u8868\u4ee5\u53ca\u5982\u4f55\u521b\u5efa\u81ea\u5df1\u7684\u5f02\u5e38\u7c7b\u578b\uff0c\u8bf7\u53c2\u9605 Python \u53c2\u8003\u624b\u518c\u3002</p> <p>There are two types of errors that typically occur when writing programs. The first, known as a syntax error, simply means that the programmer has made a mistake in the structure of a statement or expression. For example, it is incorrect to write a for statement and forget the colon.</p> <pre><code>&gt;&gt;&gt; for i in range(10)\nFile \"&lt;stdin&gt;\", line 1\n    for i in range(10)\n                    ^\nSyntaxError: invalid syntax\n</code></pre> <p>In this case, the Python interpreter has found that it cannot complete the processing of this instruction since it does not conform to the rules of the language. Syntax errors are usually more frequent when you are first learning a language.</p> <p>The other type of error, known as a logic error, denotes a situation where the program executes but gives the wrong result. This can be due to an error in the underlying algorithm or an error in your translation of that algorithm. In some cases, logic errors lead to very bad situations such as trying to divide by zero or trying to access an item in a list where the index of the item is outside the bounds of the list. In this case, the logic error leads to a runtime error that causes the program to terminate. These types of runtime errors are typically called exceptions.</p> <p>Most of the time, beginning programmers simply think of exceptions as fatal runtime errors that cause the end of execution. However, most programming languages provide a way to deal with these errors that will allow the programmer to have some type of intervention if they so choose. In addition, programmers can create their own exceptions if they detect a situation in the program execution that warrants it.</p> <p>When an exception occurs, we say that it has been raised. You can handle the exception that has been raised by using a <code>try</code> statement. For example, consider the following session that asks the user for an integer and then calls the square root function from the math library. If the user enters a value that is greater than or equal to 0, the print will show the square root. However, if the user enters a negative value, the square root function will report a <code>ValueError</code> exception.</p> <pre><code>&gt;&gt;&gt; import math\n&gt;&gt;&gt; a_number = int(input(\"Please enter an integer \"))\nPlease enter an integer -23\n&gt;&gt;&gt; print(math.sqrt(a_number))\nTraceback (most recent call last):\n    File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nValueError: math domain error\n</code></pre> <p>We can handle this exception by calling the <code>print</code> function from within a <code>try</code> block. A corresponding <code>except</code> block \u201ccatches\u201d the exception and prints a message back to the user in the event that an exception occurs. For example:</p> <pre><code>&gt;&gt;&gt; try:\n...   print(math.sqrt(a_number))\n... except:\n...   print(\"Bad value for the square root function\")\n...   print(\"Using the absolute value instead\")\n...   print(math.sqrt(abs(a_number)))\n... \nBad value for the square root function\nUsing the absolute value instead\n4.795831523312719\n</code></pre> <p>will catch the fact that an exception is raised by <code>sqrt</code> and will instead print the messages back to the user and use the absolute value to be sure that we are taking the square root of a non-negative number. This means that the program will not terminate but instead will continue on to the next statements.</p> <p>It is also possible for a programmer to cause a runtime exception by using the <code>raise</code> statement. For example, instead of calling the square root function with a negative number, we could have checked the value first and then raised our own exception. The code fragment below shows the result of creating a new <code>RuntimeError</code> exception. Note that the program would still terminate, but now the exception that caused the termination is something explicitly created by the programmer.</p> <pre><code>&gt;&gt;&gt; if a_number &lt; 0:\n...   raise RuntimeError(\"You can't use a negative number\")\n... else:\n...   print(math.sqrt(a_number))\n... \nTraceback (most recent call last):\n    File \"&lt;stdin&gt;\", line 2, in &lt;module&gt;\nRuntimeError: You can't use a negative number\n</code></pre> <p>There are many kinds of exceptions that can be raised in addition to the <code>RuntimeError</code> shown above. See the Python reference manual for a list of all the available exception types and for how to create your own.</p>"},{"location":"c1/s12/","title":"1.12. \u5b9a\u4e49\u51fd\u6570","text":"<p>1.12. Defining Functions</p> \u4e2d\u6587\u82f1\u6587 <p>\u524d\u9762\u7684\u8fc7\u7a0b\u62bd\u8c61\u793a\u4f8b\u8c03\u7528\u6570\u5b66\u6a21\u5757\u4e2d\u540d\u4e3a<code>sqrt</code>\u7684 Python \u51fd\u6570\u6765\u8ba1\u7b97\u5e73\u65b9\u6839\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5b9a\u4e49\u51fd\u6570\u6765\u9690\u85cf\u4efb\u4f55\u8ba1\u7b97\u7684\u7ec6\u8282\u3002 \u51fd\u6570\u5b9a\u4e49\u9700\u8981\u4e00\u4e2a\u540d\u79f0\u3001\u4e00\u7ec4\u53c2\u6570\u548c\u4e00\u4e2a\u51fd\u6570\u4f53\u3002 \u5b83\u8fd8\u53ef\u4ee5\u663e\u5f0f\u8fd4\u56de\u4e00\u4e2a\u503c\u3002 \u4f8b\u5982\uff0c\u4e0b\u9762\u5b9a\u4e49\u7684\u7b80\u5355\u51fd\u6570\u8fd4\u56de\u4f20\u9012\u7ed9\u5b83\u7684\u503c\u7684\u5e73\u65b9\u3002</p> <pre><code>&gt;&gt;&gt; def square(n):\n...    return n ** 2\n...\n&gt;&gt;&gt; square(3)\n9\n&gt;&gt;&gt; square(square(3))\n81\n</code></pre> <p>\u8be5\u51fd\u6570\u5b9a\u4e49\u7684\u8bed\u6cd5\u5305\u62ec\u540d\u79f0<code>square</code>\u548c\u5e26\u62ec\u53f7\u7684\u5f62\u5f0f\u53c2\u6570\u5217\u8868\u3002 \u5bf9\u4e8e\u8fd9\u4e2a\u51fd\u6570\uff0c<code>n</code>\u662f\u552f\u4e00\u7684\u5f62\u5f0f\u53c2\u6570\uff0c\u8fd9\u8868\u660e<code>square</code>\u53ea\u9700\u8981\u4e00\u4e2a\u6570\u636e\u6765\u5b8c\u6210\u5b83\u7684\u5de5\u4f5c\u3002 \u9690\u85cf\u5728\u201c\u76d2\u5b50\u5185(inside the box)\u201d\u7684\u7ec6\u8282\u53ea\u662f\u7b80\u5355\u5730\u8ba1\u7b97<code>n**2</code>\u7684\u7ed3\u679c\u5e76\u8fd4\u56de\u5b83\u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8981\u6c42 Python \u73af\u5883\u8bc4\u4f30\u5b83\u5e76\u4f20\u9012\u5b9e\u9645\u53c2\u6570\u503c\uff08\u5728\u672c\u4f8b\u4e2d\u4e3a<code>3</code>\uff09\u6765\u8c03\u7528<code>square</code>\u51fd\u6570\u3002 \u8bf7\u6ce8\u610f\uff0c\u5bf9<code>square</code>\u7684\u8c03\u7528\u8fd4\u56de\u4e00\u4e2a\u6574\u6570\uff0c\u8be5\u6574\u6570\u53ef\u4ee5\u4f20\u9012\u7ed9\u53e6\u4e00\u4e2a\u8c03\u7528\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u4e00\u79cd\u540d\u4e3a\u725b\u987f\u6cd5\u6216\u725b\u987f-\u62c9\u592b\u68ee\u6cd5\uff08\u4ee5\u827e\u8428\u514b\u00b7\u725b\u987f\u548c\u7ea6\u745f\u592b\u00b7\u62c9\u592b\u68ee\u547d\u540d\uff09\u7684\u4f17\u6240\u5468\u77e5\u7684\u6280\u672f\u6765\u5b9e\u73b0\u6211\u4eec\u81ea\u5df1\u7684\u5e73\u65b9\u6839\u51fd\u6570\u3002 \u7528\u4e8e\u8fd1\u4f3c\u5e73\u65b9\u6839\u7684\u725b\u987f-\u62c9\u592b\u68ee\u65b9\u6cd5\u6267\u884c\u8fed\u4ee3\u8ba1\u7b97\uff0c\u6536\u655b\u4e8e\u6b63\u786e\u503c\u3002 \u65b9\u7a0b \\(newguess = \\frac {1}{2} * (oldguess + \\frac {n}{oldguess})\\) \u53d6\u503c \\(n\\) \u5e76\u901a\u8fc7\u5c06\u6bcf\u4e2a \\(newguess\\) \u8bbe\u4e3a \\(oldguess\\) \u6765\u91cd\u590d\u731c\u6d4b\u5e73\u65b9\u6839 \u968f\u540e\u7684\u8fed\u4ee3\u3002 \u8fd9\u91cc\u4f7f\u7528\u7684\u521d\u59cb\u731c\u6d4b\u662f\\(\\frac {n}{2}\\)\u3002 \u201cListing 1\u201d\u663e\u793a\u4e86\u4e00\u4e2a\u51fd\u6570\u5b9a\u4e49\uff0c\u5b83\u63a5\u53d7\u503c \\(n\\) \u5e76\u5728\u8fdb\u884c 20 \u6b21\u731c\u6d4b\u540e\u8fd4\u56de \\(n\\) \u7684\u5e73\u65b9\u6839\u3002 \u540c\u6837\uff0c\u725b\u987f-\u62c9\u592b\u68ee\u65b9\u6cd5\u7684\u7ec6\u8282\u9690\u85cf\u5728\u51fd\u6570\u5b9a\u4e49\u4e2d\uff0c\u7528\u6237\u65e0\u9700\u4e86\u89e3\u6709\u5173\u5b9e\u73b0\u7684\u4efb\u4f55\u4fe1\u606f\u5373\u53ef\u4f7f\u7528\u8be5\u51fd\u6570\u8fbe\u5230\u5176\u9884\u671f\u76ee\u7684\u3002 \u201cListing 1\u201d\u8fd8\u663e\u793a\u4e86\u4f7f\u7528<code>#</code>\u5b57\u7b26\u4f5c\u4e3a\u6ce8\u91ca\u6807\u8bb0\u3002 \u4e00\u884c\u4e2d<code>#</code>\u540e\u9762\u7684\u4efb\u4f55\u5b57\u7b26\u90fd\u5c06\u88ab\u5ffd\u7565\u3002</p> <p>Listing 1</p> <pre><code>def square_root(n):\n    root = n / 2  # initial guess will be 1/2 of n\n    for k in range(20):\n        root = (1 / 2) * (root + (n / root))\n\n    return root\n</code></pre> <pre><code>&gt;&gt;&gt; square_root(9)\n3.0\n&gt;&gt;&gt; square_root(4563)\n67.54998149518622\n</code></pre> <p>\u81ea\u68c0</p> <p>\u8fd9\u662f\u4e00\u4e2a\u81ea\u6211\u68c0\u67e5\uff0c\u771f\u6b63\u6db5\u76d6\u4e86\u8fc4\u4eca\u4e3a\u6b62\u7684\u6240\u6709\u5185\u5bb9\u3002 \u4f60\u53ef\u80fd\u542c\u8bf4\u8fc7\u65e0\u9650\u7334\u5b50\u5b9a\u7406\uff1f \u8be5\u5b9a\u7406\u6307\u51fa\uff0c\u4e00\u53ea\u7334\u5b50\u5728\u6253\u5b57\u673a\u952e\u76d8\u4e0a\u968f\u673a\u6572\u51fb\u6309\u952e\u65e0\u9650\u957f\u7684\u65f6\u95f4\uff0c\u51e0\u4e4e\u80af\u5b9a\u4f1a\u952e\u5165\u7ed9\u5b9a\u7684\u6587\u672c\uff0c\u4f8b\u5982\u5a01\u5ec9\u00b7\u838e\u58eb\u6bd4\u4e9a\u7684\u5168\u96c6\u3002 \u597d\u5427\uff0c\u5047\u8bbe\u6211\u4eec\u7528 Python \u51fd\u6570\u66ff\u6362\u7334\u5b50\u3002 \u4f60\u8ba4\u4e3a\u4e00\u4e2a Python \u51fd\u6570\u751f\u6210\u838e\u58eb\u6bd4\u4e9a\u7684\u4e00\u53e5\u8bdd\u9700\u8981\u591a\u957f\u65f6\u95f4\uff1f \u6211\u4eec\u8981\u547d\u4e2d\u7684\u53e5\u5b50\u662f\uff1a\u201c\u6211\u8ba4\u4e3a\u5b83\u5c31\u50cf\u4e00\u53ea\u9ec4\u9f20\u72fc(methinks it is like a weasel)\u201d</p> <p>\u60a8\u4e0d\u4f1a\u60f3\u5728\u6d4f\u89c8\u5668\u4e2d\u8fd0\u884c\u8fd9\u4e2a\uff0c\u6240\u4ee5\u542f\u52a8\u60a8\u6700\u559c\u6b22\u7684 Python IDE\u3002 \u6211\u4eec\u6a21\u62df\u8fd9\u4e2a\u7684\u65b9\u6cd5\u662f\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u901a\u8fc7\u4ece\u5b57\u6bcd\u8868\u4e2d\u7684 26 \u4e2a\u5b57\u6bcd\u52a0\u4e0a\u7a7a\u683c\u4e2d\u9009\u62e9\u968f\u673a\u5b57\u6bcd\u6765\u751f\u6210 28 \u4e2a\u5b57\u7b26\u957f\u7684\u5b57\u7b26\u4e32\u3002 \u6211\u4eec\u5c06\u7f16\u5199\u53e6\u4e00\u4e2a\u51fd\u6570\uff0c\u901a\u8fc7\u5c06\u968f\u673a\u751f\u6210\u7684\u5b57\u7b26\u4e32\u4e0e\u76ee\u6807\u8fdb\u884c\u6bd4\u8f83\u6765\u5bf9\u6bcf\u4e2a\u751f\u6210\u7684\u5b57\u7b26\u4e32\u8fdb\u884c\u8bc4\u5206\u3002</p> <p>\u7b2c\u4e09\u4e2a\u51fd\u6570\u5c06\u91cd\u590d\u8c03\u7528\u751f\u6210\u548c\u8bc4\u5206\uff0c\u7136\u540e\u5982\u679c 100% \u7684\u5b57\u6bcd\u6b63\u786e\uff0c\u6211\u4eec\u5c31\u5b8c\u6210\u4e86\u3002 \u5982\u679c\u5b57\u6bcd\u4e0d\u6b63\u786e\uff0c\u90a3\u4e48\u6211\u4eec\u5c06\u751f\u6210\u4e00\u4e2a\u5168\u65b0\u7684\u5b57\u7b26\u4e32\u3002\u4e3a\u4e86\u66f4\u5bb9\u6613\u5730\u8ddf\u8e2a\u7a0b\u5e8f\u7684\u8fdb\u5ea6\uff0c\u7b2c\u4e09\u4e2a\u51fd\u6570\u5e94\u8be5\u6253\u5370\u51fa\u8fc4\u4eca\u4e3a\u6b62\u751f\u6210\u7684\u6700\u4f73\u5b57\u7b26\u4e32\u53ca\u5176\u6bcf 1000 \u6b21\u5c1d\u8bd5\u7684\u5206\u6570\u3002</p> <p>\u81ea\u68c0\u6311\u6218</p> <p>\u770b\u770b\u662f\u5426\u53ef\u4ee5\u901a\u8fc7\u4fdd\u7559\u6b63\u786e\u7684\u5b57\u6bcd\u5e76\u4ec5\u4fee\u6539\u8fc4\u4eca\u4e3a\u6b62\u6700\u4f73\u5b57\u7b26\u4e32\u4e2d\u7684\u4e00\u4e2a\u5b57\u7b26\u6765\u6539\u8fdb\u81ea\u68c0\u4e2d\u7684\u7a0b\u5e8f\u3002 \u8fd9\u662f\u201c\u722c\u5c71(hill climbing)\u201d\u7b97\u6cd5\u4e2d\u7684\u4e00\u79cd\u7b97\u6cd5\uff0c\u5373\u6211\u4eec\u4ec5\u4fdd\u7559\u6bd4\u524d\u4e00\u4e2a\u66f4\u597d\u7684\u7ed3\u679c\u3002</p> <p></p> <p>The earlier example of procedural abstraction called upon a Python function called <code>sqrt</code> from the math module to compute the square root. In general, we can hide the details of any computation by defining a function. A function definition requires a name, a group of parameters, and a body. It may also explicitly return a value. For example, the simple function defined below returns the square of the value you pass into it.</p> <pre><code>&gt;&gt;&gt; def square(n):\n...    return n ** 2\n...\n&gt;&gt;&gt; square(3)\n9\n&gt;&gt;&gt; square(square(3))\n81\n</code></pre> <p>The syntax for this function definition includes the name, <code>square</code>, and a parenthesized list of formal parameters. For this function, <code>n</code> is the only formal parameter, which suggests that <code>square</code> needs only one piece of data to do its work. The details, hidden \u201cinside the box,\u201d simply compute the result of <code>n**2</code> and return it. We can invoke or call the <code>square</code> function by asking the Python environment to evaluate it, passing an actual parameter value, in this case, <code>3</code>. Note that the call to <code>square</code> returns an integer that can in turn be passed to another invocation.</p> <p>We could implement our own square root function by using a well-known technique called Newton's method or the Newton\u2013Raphson method, named after Isaac Newton and Joseph Raphson. The Newton\u2013Raphson method for approximating square roots performs an iterative computation that converges on the correct value. The equation \\(newguess = \\frac {1}{2} * (oldguess + \\frac {n}{oldguess})\\) takes a value \\(n\\) and repeatedly guesses the square root by making each \\(newguess\\) the \\(oldguess\\) in the subsequent iteration. The initial guess used here is \\(\\frac {n}{2}\\). <code>Listing 1</code> shows a function definition that accepts a value \\(n\\) and returns the square root of \\(n\\) after making 20 guesses. Again, the details of the Newton\u2013Raphson method are hidden inside the function definition and the user does not have to know anything about the implementation to use the function for its intended purpose. <code>Listing 1</code> also shows the use of the <code>#</code> character as a comment marker. Any characters that follow the <code>#</code> on a line are ignored.</p> <p>Listing 1</p> <pre><code>def square_root(n):\n    root = n / 2  # initial guess will be 1/2 of n\n    for k in range(20):\n        root = (1 / 2) * (root + (n / root))\n\n    return root\n</code></pre> <pre><code>&gt;&gt;&gt; square_root(9)\n3.0\n&gt;&gt;&gt; square_root(4563)\n67.54998149518622\n</code></pre> <p>Self Check</p> <p>Here's a self check that really covers everything so far.  You may have heard of the infinite monkey theorem?  The theorem states that a monkey hitting keys at random on a typewriter keyboard for an infinite amount of time will almost surely type a given text, such as the complete works of William Shakespeare.  Well, suppose we replace a monkey with a Python function.  How long do you think it would take for a Python function to generate just one sentence of Shakespeare?  The sentence we'll shoot for is:  \"methinks it is like a weasel\"</p> <p>You're not going to want to run this one in the browser, so fire up your favorite Python IDE.  The way we'll simulate this is to write a function that generates a string that is 28 characters long by choosing random letters from the 26 letters in the alphabet plus the space.  We'll write another function that will score each generated string by comparing the randomly generated string to the goal.</p> <p>A third function will repeatedly call generate and score, then if 100% of the letters are correct we are done.  If the letters are not correct then we will generate a whole new string.To make it easier to follow your program's progress this third function should print out the best string generated so far and its score every 1000 tries.</p> <p>Self Check Challenge</p> <p>See if you can improve upon the program in the self check by keeping letters that are correct and only modifying one character in the best string so far.  This is a type of algorithm in the class of 'hill climbing' algorithms, that is we only keep the result if it is better than the previous one.</p> <p></p>"},{"location":"c1/s13/","title":"1.13. Python\u4e2d\u7684\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\uff1a\u5b9a\u4e49\u7c7b","text":"<p>1.13. Object-Oriented Programming in Python: Defining Classes</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u4e4b\u524d\u8bf4\u8fc7Python\u662f\u4e00\u79cd\u9762\u5411\u5bf9\u8c61\u7684\u7f16\u7a0b\u8bed\u8a00\u3002 \u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u4f7f\u7528\u4e86\u8bb8\u591a\u5185\u7f6e\u7c7b\u6765\u5c55\u793a\u6570\u636e\u548c\u63a7\u5236\u7ed3\u6784\u7684\u793a\u4f8b\u3002 \u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u8bed\u8a00\u4e2d\u6700\u5f3a\u5927\u7684\u529f\u80fd\u4e4b\u4e00\u662f\u80fd\u591f\u5141\u8bb8\u7a0b\u5e8f\u5458\uff08\u95ee\u9898\u89e3\u51b3\u8005\uff09\u521b\u5efa\u65b0\u7c7b\u6765\u5bf9\u89e3\u51b3\u95ee\u9898\u6240\u9700\u7684\u6570\u636e\u8fdb\u884c\u5efa\u6a21\u3002</p> <p>\u8bf7\u8bb0\u4f4f\uff0c\u6211\u4eec\u4f7f\u7528\u62bd\u8c61\u6570\u636e\u7c7b\u578b\u6765\u63d0\u4f9b\u6570\u636e\u5bf9\u8c61\u7684\u5916\u89c2\uff08\u5176\u72b6\u6001\uff09\u53ca\u5176\u529f\u80fd\uff08\u5176\u65b9\u6cd5\uff09\u7684\u903b\u8f91\u63cf\u8ff0\u3002 \u901a\u8fc7\u6784\u5efa\u5b9e\u73b0\u62bd\u8c61\u6570\u636e\u7c7b\u578b\u7684\u7c7b\uff0c\u7a0b\u5e8f\u5458\u53ef\u4ee5\u5229\u7528\u62bd\u8c61\u8fc7\u7a0b\uff0c\u540c\u65f6\u63d0\u4f9b\u5728\u7a0b\u5e8f\u4e2d\u5b9e\u9645\u4f7f\u7528\u62bd\u8c61\u6240\u9700\u7684\u8be6\u7ec6\u4fe1\u606f\u3002 \u6bcf\u5f53\u6211\u4eec\u60f3\u8981\u5b9e\u73b0\u62bd\u8c61\u6570\u636e\u7c7b\u578b\u65f6\uff0c\u6211\u4eec\u90fd\u4f1a\u4f7f\u7528\u4e00\u4e2a\u65b0\u7c7b\u6765\u5b9e\u73b0\u3002</p> <p>We stated earlier that Python is an object-oriented programming language. So far, we have used a number of built-in classes to show examples of data and control structures. One of the most powerful features in an object-oriented programming language is the ability to allow a programmer (problem solver) to create new classes that model data that is needed to solve the problem.</p> <p>Remember that we use abstract data types to provide the logical description of what a data object looks like (its state) and what it can do (its methods). By building a class that implements an abstract data type, a programmer can take advantage of the abstraction process and at the same time provide the details necessary to actually use the abstraction in a program. Whenever we want to implement an abstract data type, we will do so with a new class.</p>"},{"location":"c1/s13/#1131-\u4e00\u4e2a\u5206\u6570\u7c7b","title":"1.13.1. \u4e00\u4e2a\u5206\u6570\u7c7b","text":"<p>1.13.1. A Fraction Class</p> \u4e2d\u6587\u82f1\u6587 <p>\u663e\u793a\u5b9e\u73b0\u7528\u6237\u5b9a\u4e49\u7c7b\u7684\u7ec6\u8282\u7684\u4e00\u4e2a\u975e\u5e38\u5e38\u89c1\u7684\u793a\u4f8b\u662f\u6784\u9020\u4e00\u4e2a\u7c7b\u6765\u5b9e\u73b0\u62bd\u8c61\u6570\u636e\u7c7b\u578b\u201cFraction\u201d\u3002 \u6211\u4eec\u5df2\u7ecf\u770b\u5230Python\u63d0\u4f9b\u4e86\u8bb8\u591a\u6570\u5b57\u7c7b\u4f9b\u6211\u4eec\u4f7f\u7528\u3002 \u7136\u800c\uff0c\u6709\u65f6\u6700\u5408\u9002\u7684\u505a\u6cd5\u662f\u80fd\u591f\u521b\u5efa\u5bf9\u7528\u6237\u6765\u8bf4\u770b\u8d77\u6765\u50cf\u5206\u6570\u7684\u6570\u636e\u5bf9\u8c61\u3002</p> <p>\u8bf8\u5982 \\(\\frac {3}{5}\\) \u4e4b\u7c7b\u7684\u5206\u6570\u7531\u4e24\u90e8\u5206\u7ec4\u6210\u3002 \u6700\u4e0a\u9762\u7684\u503c\u79f0\u4e3a\u5206\u5b50\uff0c\u53ef\u4ee5\u662f\u4efb\u4f55\u6574\u6570\u3002 \u5e95\u90e8\u7684\u503c\u79f0\u4e3a\u5206\u6bcd\uff0c\u53ef\u4ee5\u662f\u4efb\u4f55\u5927\u4e8e 0 \u7684\u6574\u6570\uff08\u8d1f\u5206\u6570\u7684\u5206\u5b50\u4e3a\u8d1f\uff09\u3002 \u5c3d\u7ba1\u53ef\u4ee5\u4e3a\u4efb\u4f55\u5206\u6570\u521b\u5efa\u6d6e\u70b9\u8fd1\u4f3c\u503c\uff0c\u4f46\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5e0c\u671b\u5c06\u5206\u6570\u8868\u793a\u4e3a\u7cbe\u786e\u503c\u3002</p> <p>\u201cFraction\u201d \u7c7b\u578b\u7684\u64cd\u4f5c\u5c06\u5141\u8bb8\u201cFraction\u201d \u6570\u636e\u5bf9\u8c61\u7684\u884c\u4e3a\u4e0e\u4efb\u4f55\u5176\u4ed6\u6570\u503c\u76f8\u540c\u3002 \u6211\u4eec\u9700\u8981\u80fd\u591f\u8fdb\u884c\u5206\u6570\u7684\u52a0\u3001\u51cf\u3001\u4e58\u3001\u9664\u8fd0\u7b97\u3002 \u6211\u4eec\u8fd8\u5e0c\u671b\u80fd\u591f\u4f7f\u7528\u6807\u51c6\u7684\u201c\u659c\u6760\u201d\u5f62\u5f0f\u663e\u793a\u5206\u6570\uff0c\u4f8b\u5982 \u2157\u3002 \u6b64\u5916\uff0c\u6240\u6709\u5206\u6570\u65b9\u6cd5\u90fd\u5e94\u4ee5\u6700\u4f4e\u9879\u8fd4\u56de\u7ed3\u679c\uff0c\u4ee5\u4fbf\u65e0\u8bba\u6267\u884c\u4ec0\u4e48\u8ba1\u7b97\uff0c\u6211\u4eec\u603b\u662f\u4f1a\u5f97\u5230\u6700\u5e38\u89c1\u7684\u5f62\u5f0f\u3002</p> <p>\u5728Python\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7\u63d0\u4f9b\u4e00\u4e2a\u540d\u79f0\u548c\u4e00\u7ec4\u8bed\u6cd5\u4e0a\u4e0e\u51fd\u6570\u5b9a\u4e49\u7c7b\u4f3c\u7684\u65b9\u6cd5\u5b9a\u4e49\u6765\u5b9a\u4e49\u4e00\u4e2a\u65b0\u7c7b\u3002 \u5bf9\u4e8e\u8fd9\u4e2a\u4f8b\u5b50\uff0c</p> <pre><code>class Fraction:\n    # the methods go here\n</code></pre> <p>\u4e3a\u6211\u4eec\u5b9a\u4e49\u65b9\u6cd5\u63d0\u4f9b\u4e86\u6846\u67b6\u3002 \u6240\u6709\u7c7b\u90fd\u5e94\u8be5\u63d0\u4f9b\u7684\u7b2c\u4e00\u4e2a\u65b9\u6cd5\u662f\u6784\u9020\u51fd\u6570\u3002 \u6784\u9020\u51fd\u6570\u5b9a\u4e49\u4e86\u521b\u5efa\u6570\u636e\u5bf9\u8c61\u7684\u65b9\u5f0f\u3002 \u8981\u521b\u5efa\u201cFraction\u201d\u5bf9\u8c61\uff0c\u6211\u4eec\u9700\u8981\u63d0\u4f9b\u4e24\u4e2a\u6570\u636e\uff0c\u5206\u5b50\u548c\u5206\u6bcd\u3002 \u5728 Python \u4e2d\uff0c\u6784\u9020\u51fd\u6570\u65b9\u6cd5\u59cb\u7ec8\u79f0\u4e3a<code>__init__</code>\uff08\u201cinit\u201d\u524d\u540e\u5404\u6709\u4e24\u4e2a\u4e0b\u5212\u7ebf\uff09\uff0c\u5982\u201c\u6e05\u5355 2\u201d\u6240\u793a\u3002</p> <p>\u6e05\u5355 2</p> <pre><code>class Fraction:\n    \"\"\"Class Fraction\"\"\"\n    def __init__(self, top, bottom):\n        \"\"\"Constructor definition\"\"\"\n        self.num = top\n        self.den = bottom\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u5f62\u5f0f\u53c2\u6570\u5217\u8868\u5305\u542b\u4e09\u4e2a\u9879\u76ee\uff08\u201cself\u201d\u3001\u201ctop\u201d\u3001\u201cbottom\u201d\uff09\u3002 \u201cself\u201d \u662f\u4e00\u4e2a\u7279\u6b8a\u53c2\u6570\uff0c\u59cb\u7ec8\u7528\u4f5c\u5bf9\u8c61\u672c\u8eab\u7684\u5f15\u7528\u3002 \u5b83\u5fc5\u987b\u59cb\u7ec8\u662f\u7b2c\u4e00\u4e2a\u5f62\u5f0f\u53c2\u6570\uff1b \u7136\u800c\uff0c\u5728\u8c03\u7528\u65f6\u6c38\u8fdc\u4e0d\u4f1a\u7ed9\u5b83\u4e00\u4e2a\u5b9e\u9645\u7684\u53c2\u6570\u503c\u3002 \u5982\u524d\u6240\u8ff0\uff0c\u5206\u6570\u9700\u8981\u4e24\u4e2a\u72b6\u6001\u6570\u636e\uff1a\u5206\u5b50\u548c\u5206\u6bcd\u3002 \u6784\u9020\u51fd\u6570\u4e2d\u7684\u7b26\u53f7\u201cself.num\u201d\u5c06\u201cFraction\u201d\u5bf9\u8c61\u5b9a\u4e49\u4e3a\u5177\u6709\u4e00\u4e2a\u540d\u4e3a\u201cnum\u201d\u7684\u5185\u90e8\u6570\u636e\u5bf9\u8c61\u4f5c\u4e3a\u5176\u72b6\u6001\u7684\u4e00\u90e8\u5206\u3002 \u540c\u6837\uff0c\u201cself.den\u201d\u521b\u5efa\u5206\u6bcd\u3002 \u4e24\u4e2a\u5f62\u5f0f\u53c2\u6570\u7684\u503c\u6700\u521d\u5206\u914d\u7ed9\u72b6\u6001\uff0c\u5141\u8bb8\u65b0\u7684\u201cFraction\u201d\u5bf9\u8c61\u77e5\u9053\u5176\u8d77\u59cb\u503c\u3002</p> <p>\u8981\u521b\u5efa\u201cFraction\u201d\u7c7b\u7684\u5b9e\u4f8b\uff0c\u6211\u4eec\u5fc5\u987b\u8c03\u7528\u6784\u9020\u51fd\u6570\u3002 \u8fd9\u662f\u901a\u8fc7\u4f7f\u7528\u7c7b\u7684\u540d\u79f0\u5e76\u4f20\u9012\u5fc5\u8981\u72b6\u6001\u7684\u5b9e\u9645\u503c\u6765\u5b9e\u73b0\u7684\uff08\u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u4ece\u4e0d\u76f4\u63a5\u201c\u8c03\u7528(invoke) <code>__init__</code> \u201d\uff09\u3002 \u4f8b\u5982\uff0c</p> <pre><code>    my_fraction = Fraction(3, 5)\n</code></pre> <p>\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a <code>my_fraction</code> \u7684\u5bf9\u8c61\uff0c\u8868\u793a\u5206\u6570 \\(`\\frac {3}{5}\\) \uff08\u4e94\u5206\u4e4b\u4e09\uff09\u3002 \u201c\u56fe 5\u201d\u663e\u793a\u4e86\u8be5\u5bf9\u8c61\u73b0\u5728\u7684\u5b9e\u73b0\u60c5\u51b5\u3002</p> <p> \u56fe 5\uff1a\u201cFraction\u201d\u7c7b\u7684\u5b9e\u4f8b </p> <p>\u63a5\u4e0b\u6765\u6211\u4eec\u9700\u8981\u505a\u7684\u662f\u5b9e\u73b0\u62bd\u8c61\u6570\u636e\u7c7b\u578b\u6240\u9700\u7684\u884c\u4e3a\u3002 \u9996\u5148\uff0c\u8003\u8651\u4e00\u4e0b\u5f53\u6211\u4eec\u5c1d\u8bd5\u6253\u5370\u201cFraction\u201d\u5bf9\u8c61\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002</p> <pre><code>&gt;&gt;&gt; my_fraction = Fraction(3, 5)\n&gt;&gt;&gt; print(my_fraction)\n&lt;__main__.Fraction object at 0x103203eb8&gt;\n</code></pre> <p>\u201cFraction\u201d \u5bf9\u8c61\u201cmy_fraction\u201d \u4e0d\u77e5\u9053\u5982\u4f55\u54cd\u5e94\u6b64\u6253\u5370\u8bf7\u6c42\u3002 \u201cprint\u201d\u51fd\u6570\u8981\u6c42\u5bf9\u8c61\u5c06\u81ea\u8eab\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\uff0c\u4ee5\u4fbf\u53ef\u4ee5\u5c06\u8be5\u5b57\u7b26\u4e32\u5199\u5165\u8f93\u51fa\u3002 my_fraction \u552f\u4e00\u7684\u9009\u62e9\u662f\u663e\u793a\u5b58\u50a8\u5728\u53d8\u91cf\u4e2d\u7684\u5b9e\u9645\u5f15\u7528\uff08\u5730\u5740\u672c\u8eab\uff09\u3002 \u8fd9\u4e0d\u662f\u6211\u4eec\u60f3\u8981\u7684\u3002</p> <p>\u6211\u4eec\u6709\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 \u4e00\u79cd\u662f\u5b9a\u4e49\u4e00\u4e2a\u540d\u4e3a\u201cshow\u201d\u7684\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u5141\u8bb8\u201cFraction\u201d\u5bf9\u8c61\u5c06\u5176\u81ea\u8eab\u6253\u5370\u4e3a\u5b57\u7b26\u4e32\u3002 \u6211\u4eec\u53ef\u4ee5\u5b9e\u73b0\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u5982\u201c\u6e05\u5355 3\u201d\u6240\u793a\u3002 \u5982\u679c\u6211\u4eec\u50cf\u4ee5\u524d\u4e00\u6837\u521b\u5efa\u4e00\u4e2a\u201cFraction\u201d\u5bf9\u8c61\uff0c\u6211\u4eec\u53ef\u4ee5\u8981\u6c42\u5b83\u663e\u793a\u81ea\u5df1\uff08\u6362\u53e5\u8bdd\u8bf4\uff0c\u4ee5\u6b63\u786e\u7684\u683c\u5f0f\u6253\u5370\u81ea\u5df1\uff09\u3002 \u4e0d\u5e78\u7684\u662f\uff0c\u8fd9\u901a\u5e38\u4e0d\u8d77\u4f5c\u7528\u3002 \u4e3a\u4e86\u4f7f\u6253\u5370\u6b63\u5e38\u5de5\u4f5c\uff0c\u6211\u4eec\u9700\u8981\u544a\u8bc9\u201cFraction\u201d\u7c7b\u5982\u4f55\u5c06\u5176\u81ea\u8eab\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u3002 \u8fd9\u5c31\u662f\u201cprint\u201d\u51fd\u6570\u5b8c\u6210\u5176\u5de5\u4f5c\u6240\u9700\u8981\u7684\u3002</p> <p>\u6e05\u5355 3</p> <pre><code>def show(self):\n    print(f\"{self.num}/{self.den}\")\n</code></pre> <pre><code>&gt;&gt;&gt; my_fraction = Fraction(3, 5)\n&gt;&gt;&gt; my_fraction.show()\n3/5\n&gt;&gt;&gt; print(my_fraction)\n&lt;__main__.Fraction object at 0x40bce9ac&gt;\n</code></pre> <p>\u5728Python\u4e2d\uff0c\u6240\u6709\u7c7b\u90fd\u63d0\u4f9b\u4e86\u4e00\u7ec4\u6807\u51c6\u65b9\u6cd5\uff0c\u4f46\u8fd9\u4e9b\u65b9\u6cd5\u53ef\u80fd\u65e0\u6cd5\u6b63\u5e38\u5de5\u4f5c\u3002 \u5176\u4e2d\u4e4b\u4e00<code>__str__</code>\u662f\u5c06\u5bf9\u8c61\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u7684\u65b9\u6cd5\u3002 \u6b63\u5982\u6211\u4eec\u5df2\u7ecf\u770b\u5230\u7684\uff0c\u6b64\u65b9\u6cd5\u7684\u9ed8\u8ba4\u5b9e\u73b0\u662f\u8fd4\u56de\u5b9e\u4f8b\u5730\u5740\u5b57\u7b26\u4e32\u3002 \u6211\u4eec\u9700\u8981\u505a\u7684\u662f\u4e3a\u8fd9\u4e2a\u65b9\u6cd5\u63d0\u4f9b\u4e00\u4e2a\u66f4\u597d\u7684\u5b9e\u73b0\u3002 \u6211\u4eec\u4f1a\u8bf4\u8fd9\u4e2a\u5b9e\u73b0\u8986\u76d6(overrides)\u524d\u4e00\u4e2a\u5b9e\u73b0\uff0c\u6216\u8005\u5b83\u91cd\u65b0\u5b9a\u4e49\u4e86\u65b9\u6cd5\u7684\u884c\u4e3a\u3002</p> <p>\u4e3a\u6b64\uff0c\u6211\u4eec\u53ea\u9700\u5b9a\u4e49\u4e00\u4e2a\u540d\u4e3a<code>__str__</code>\u7684\u65b9\u6cd5\uff0c\u5e76\u4e3a\u5176\u63d0\u4f9b\u4e00\u4e2a\u65b0\u7684\u5b9e\u73b0\uff0c\u5982\u201c\u6e05\u5355 4\u201d\u6240\u793a\u3002 \u9664\u4e86\u7279\u6b8a\u53c2\u6570\u201cself\u201d\u4e4b\u5916\uff0c\u8fd9\u4e2a\u5b9a\u4e49\u4e0d\u9700\u8981\u4efb\u4f55\u5176\u4ed6\u4fe1\u606f\u3002 \u53cd\u8fc7\u6765\uff0c\u8be5\u65b9\u6cd5\u5c06\u901a\u8fc7\u5c06\u6bcf\u6bb5\u5185\u90e8\u72b6\u6001\u6570\u636e\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u4f7f\u7528\u5b57\u7b26\u4e32\u8fde\u63a5\u5728\u5b57\u7b26\u4e32\u4e4b\u95f4\u653e\u7f6e\u201c/\u201d\u5b57\u7b26\u6765\u6784\u5efa\u5b57\u7b26\u4e32\u8868\u793a\u5f62\u5f0f\u3002 \u6bcf\u5f53\u8981\u6c42\u201cFraction\u201d\u5bf9\u8c61\u5c06\u5176\u81ea\u8eab\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u65f6\uff0c\u90fd\u4f1a\u8fd4\u56de\u7ed3\u679c\u5b57\u7b26\u4e32\u3002 \u8bf7\u6ce8\u610f\u8be5\u51fd\u6570\u7684\u5404\u79cd\u4f7f\u7528\u65b9\u5f0f\u3002</p> <p>\u6e05\u5355 4</p> <pre><code>def __str__(self):\n    return f\"{self.num}/{self.den}\"\n</code></pre> <pre><code>&gt;&gt;&gt; my_fraction = Fraction(3, 5)\n&gt;&gt;&gt; print(my_fraction)\n3/5\n&gt;&gt;&gt; print(f\"I ate {my_fraction} of pizza\")\nI ate 3/5 of pizza\n&gt;&gt;&gt; my_fraction.__str__()\n'3/5'\n&gt;&gt;&gt; str(my_fraction)\n'3/5'\n</code></pre> <p>\u6211\u4eec\u53ef\u4ee5\u4e3a\u65b0\u7684\u201cFraction\u201d\u7c7b\u91cd\u5199\u8bb8\u591a\u5176\u4ed6\u65b9\u6cd5\u3002 \u5176\u4e2d\u6700\u91cd\u8981\u7684\u4e00\u4e9b\u662f\u57fa\u672c\u7b97\u672f\u8fd0\u7b97\u3002 \u6211\u4eec\u5e0c\u671b\u80fd\u591f\u521b\u5efa\u4e24\u4e2a\u201cFraction\u201d\u5bf9\u8c61\uff0c\u7136\u540e\u4f7f\u7528\u6807\u51c6\u201c+\u201d\u7b26\u53f7\u5c06\u5b83\u4eec\u52a0\u5728\u4e00\u8d77\u3002 \u6b64\u65f6\uff0c\u5982\u679c\u6211\u4eec\u5c1d\u8bd5\u5c06\u4e24\u4e2a\u5206\u6570\u76f8\u52a0\uff0c\u6211\u4eec\u4f1a\u5f97\u5230\u4ee5\u4e0b\u7ed3\u679c\uff1a</p> <pre><code>&gt;&gt;&gt; f1 = Fraction(1, 4)\n&gt;&gt;&gt; f2 = Fraction(1, 2)\n&gt;&gt;&gt; f1 + f2\nTraceback (most recent call last):\nFile \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: unsupported operand type(s) for +: 'Fraction' and 'Fraction'\n</code></pre> <p>\u5982\u679c\u4ed4\u7ec6\u89c2\u5bdf\u8be5\u9519\u8bef\uff0c\u60a8\u4f1a\u53d1\u73b0\u95ee\u9898\u5728\u4e8e\u201c+\u201d\u8fd0\u7b97\u7b26\u4e0d\u7406\u89e3\u201cFraction\u201d\u64cd\u4f5c\u6570\u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e3a\u201cFraction\u201d\u7c7b\u63d0\u4f9b\u4e00\u4e2a\u8986\u76d6\u52a0\u6cd5\u65b9\u6cd5\u7684\u65b9\u6cd5\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 \u5728Python\u4e2d\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u88ab\u79f0\u4e3a<code>__add__</code>\uff0c\u5b83\u9700\u8981\u4e24\u4e2a\u53c2\u6570\u3002 \u7b2c\u4e00\u4e2a\u201cself\u201d\u59cb\u7ec8\u662f\u5fc5\u9700\u7684\uff0c\u7b2c\u4e8c\u4e2a\u8868\u793a\u8868\u8fbe\u5f0f\u4e2d\u7684\u53e6\u4e00\u4e2a\u64cd\u4f5c\u6570\u3002 \u4f8b\u5982\uff0c</p> <pre><code>f1.__add__(f2)\n</code></pre> <p>\u4f1a\u8981\u6c42 <code>Fraction</code> \u5bf9\u8c61 <code>f1</code> \u5c06 <code>Fraction</code> \u5bf9\u8c61 <code>f2</code> \u6dfb\u52a0\u5230\u81ea\u8eab\u3002 \u8fd9\u53ef\u4ee5\u7528\u6807\u51c6\u7b26\u53f7<code>f1 + f2</code>\u6765\u5199\u3002</p> <p>\u4e24\u4e2a\u5206\u6570\u5fc5\u987b\u5177\u6709\u76f8\u540c\u7684\u5206\u6bcd\u624d\u80fd\u76f8\u52a0\u3002 \u786e\u4fdd\u5b83\u4eec\u5177\u6709\u76f8\u540c\u5206\u6bcd\u7684\u6700\u7b80\u5355\u65b9\u6cd5\u662f\u7b80\u5355\u5730\u4f7f\u7528\u4e24\u4e2a\u5206\u6bcd\u7684\u4e58\u79ef\u4f5c\u4e3a\u516c\u5206\u6bcd\uff0c\u4ee5\u4fbf \\(\\frac {a}{b} + \\frac {c}{d} = \\frac {ad}{bd} + \\frac {cb}{bd} = \\frac{ad+cb}{bd}\\)\u3002 \u5176\u5b9e\u73b0\u5982\u201c\u6e05\u5355 5\u201d\u6240\u793a\u3002 \u52a0\u6cd5\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u201cFraction\u201d\u5bf9\u8c61\uff0c\u5176\u4e2d\u5305\u542b\u603b\u548c\u7684\u5206\u5b50\u548c\u5206\u6bcd\u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7f16\u5199\u5305\u542b\u5206\u6570\u7684\u6807\u51c6\u7b97\u672f\u8868\u8fbe\u5f0f\uff0c\u5206\u914d\u52a0\u6cd5\u7ed3\u679c\uff0c\u7136\u540e\u6253\u5370\u7ed3\u679c\u6765\u4f7f\u7528\u6b64\u65b9\u6cd5\u3002</p> <p>\u6e05\u5355 5</p> <pre><code>def __add__(self, other_fraction):\n    new_num = self.num *other_fraction.den + \\\n                self.den* other_fraction.num\n    new_den = self.den * other_fraction.den\n\n    return Fraction(new_num, new_den)\n</code></pre> <pre><code>&gt;&gt;&gt; f1 = Fraction(1, 4)\n&gt;&gt;&gt; f2 = Fraction(1, 2)\n&gt;&gt;&gt; print(f1 + f2)\n6/8\n</code></pre> <p>\u52a0\u6cd5\u65b9\u6cd5\u5982\u6211\u4eec\u6240\u613f\uff0c\u4f46\u6709\u4e00\u70b9\u53ef\u4ee5\u505a\u5f97\u66f4\u597d\u3002 \u8bf7\u6ce8\u610f\uff0c\\(6/8\\) \u662f\u6b63\u786e\u7684\u7ed3\u679c (\\(\\frac {1}{4} + \\frac {1}{2}\\))\uff0c\u4f46\u5b83\u4e0d\u662f\u201c\u6700\u4f4e\u9879\u201d\u8868\u793a\u5f62\u5f0f\u3002 \u6700\u597d\u7684\u4ee3\u8868\u662f \\(3/4\\)\u3002 \u4e3a\u4e86\u786e\u4fdd\u6211\u4eec\u7684\u7ed3\u679c\u59cb\u7ec8\u662f\u6700\u4f4e\u7684\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u77e5\u9053\u5982\u4f55\u51cf\u5c11\u5206\u6570\u7684\u8f85\u52a9\u51fd\u6570\u3002 \u8be5\u51fd\u6570\u9700\u8981\u5bfb\u627e\u6700\u5927\u516c\u7ea6\u6570\uff08GCD\uff09\u3002 \u7136\u540e\u6211\u4eec\u53ef\u4ee5\u5c06\u5206\u5b50\u548c\u5206\u6bcd\u9664\u4ee5 GCD\uff0c\u7ed3\u679c\u5c06\u7b80\u5316\u4e3a\u6700\u4f4e\u9879\u3002</p> <p>\u5bfb\u627e\u6700\u5927\u516c\u7ea6\u6570\u7684\u6700\u8457\u540d\u7b97\u6cd5\u662f\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\uff0c\u8be5\u7b97\u6cd5\u5c06\u5728\u7b2c 8 \u7ae0\u4e2d\u8be6\u7ec6\u8ba8\u8bba\u3002\u5b83\u6307\u51fa\u4e24\u4e2a\u6574\u6570 \\(m\\) \u548c \\(n\\) \u7684\u6700\u5927\u516c\u7ea6\u6570\u662f \\(n\\)\uff0c\u5982\u679c \\(n\\) \u5e73\u5206\\(m\\)\u3002 \u4f46\u662f\uff0c\u5982\u679c \\(n\\) \u4e0d\u80fd\u6574\u9664 \\(m\\)\uff0c\u5219\u7b54\u6848\u662f \\(n\\) \u7684\u6700\u5927\u516c\u7ea6\u6570\u548c \\(m\\) \u9664\u4ee5 \\(n\\) \u7684\u4f59\u6570\u3002 \u6211\u4eec\u5c06\u5728\u8fd9\u91cc\u7b80\u5355\u5730\u63d0\u4f9b\u4e00\u4e2a\u8fed\u4ee3\u5b9e\u73b0\uff08\u53c2\u89c1\u201cActiveCode 1\u201d\uff09\u3002 \u8bf7\u6ce8\u610f\uff0cGCD \u7b97\u6cd5\u7684\u8fd9\u79cd\u5b9e\u73b0\u4ec5\u5728\u5206\u6bcd\u4e3a\u6b63\u65f6\u624d\u6709\u6548\u3002 \u8fd9\u5bf9\u4e8e\u6211\u4eec\u7684\u5206\u6570\u7c7b\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u5df2\u7ecf\u8bf4\u8fc7\u8d1f\u5206\u6570\u5c06\u7531\u8d1f\u5206\u5b50\u8868\u793a\u3002</p> \u6700\u5927\u516c\u7ea6\u6570\u51fd\u6570<pre><code>def gcd(m, n):\n    while m % n != 0:\n        m, n = n, m % n\n    return n\n\nprint(gcd(20, 10))\n</code></pre> <p>\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u51fd\u6570\u6765\u5e2e\u52a9\u51cf\u5c11\u4efb\u4f55\u5206\u6570\u3002 \u4e3a\u4e86\u5c06\u5206\u6570\u8f6c\u5316\u4e3a\u6700\u7b80\u5f62\u5f0f\uff0c\u6211\u4eec\u5c06\u5206\u5b50\u548c\u5206\u6bcd\u9664\u4ee5\u5b83\u4eec\u7684\u6700\u5927\u516c\u7ea6\u6570\u3002 \u56e0\u6b64\uff0c\u5bf9\u4e8e\u5206\u6570 \\(6/8\\)\uff0c\u6700\u5927\u516c\u7ea6\u6570\u662f 2\u3002\u5c06\u9876\u90e8\u548c\u5e95\u90e8\u9664\u4ee5 2 \u521b\u5efa\u4e00\u4e2a\u65b0\u5206\u6570 \\(3/4\\)\uff08\u53c2\u89c1\u201c\u6e05\u5355 6\u201d\uff09\u3002</p> <p>\u6e05\u5355 6</p> <pre><code>def __add__(self, other_fraction):\n    new_num = self.num * other_fraction.den + \\\n                    self.den * other_fraction.num\n    new_den = self.den * other_fraction.den\n    common = gcd(new_num, new_den)\n    return Fraction(new_num // common, new_den // common)\n</code></pre> <p>\u6211\u4eec\u7684\u201cFraction\u201d\u5bf9\u8c61\u73b0\u5728\u6709\u4e24\u4e2a\u975e\u5e38\u6709\u7528\u7684\u65b9\u6cd5\uff0c\u5982\u201c\u56fe 6\u201d\u6240\u793a\u3002</p> <p> \u56fe 6\uff1a\u5177\u6709\u4e24\u4e2a\u65b9\u6cd5\u7684\u201cFraction\u201d\u7c7b\u7684\u5b9e\u4f8b </p> <pre><code>&gt;&gt;&gt; f1 = Fraction(1, 4)\n&gt;&gt;&gt; f2 = Fraction(1, 2)\n&gt;&gt;&gt; print(f1 + f2)\n3/4\n</code></pre> <p>\u6211\u4eec\u9700\u8981\u5728\u793a\u4f8b\u201cFraction\u201d\u7c7b\u4e2d\u5305\u542b\u7684\u53e6\u4e00\u7ec4\u65b9\u6cd5\u5c06\u5141\u8bb8\u4e24\u4e2a\u5206\u6570\u76f8\u4e92\u6bd4\u8f83\u3002 \u5047\u8bbe\u6211\u4eec\u6709\u4e24\u4e2a\u201cFraction\u201d\u5bf9\u8c61\uff0c\u201cf1\u201d\u548c\u201cf2\u201d\u3002 \u4ec5\u5f53\u5b83\u4eec\u662f\u5bf9\u540c\u4e00\u5bf9\u8c61\u7684\u5f15\u7528\u65f6\uff0c\u201cf1==f2\u201d\u624d\u4f1a\u4e3a\u201cTrue\u201d\u3002 \u5728\u6b64\u5b9e\u73b0\u4e0b\uff0c\u5177\u6709\u76f8\u540c\u5206\u5b50\u548c\u5206\u6bcd\u7684\u4e24\u4e2a\u4e0d\u540c\u5bf9\u8c61\u5c06\u4e0d\u76f8\u7b49\u3002 \u8fd9\u79f0\u4e3a\u6d45\u5e73\u7b49\uff08\u53c2\u89c1\u201c\u56fe 7\u201d\uff09\u3002</p> <p> \u56fe 7\uff1a\u6d45\u5c42\u5e73\u7b49\u4e0e\u6df1\u5ea6\u5e73\u7b49 </p> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u91cd\u5199<code>__eq__</code>\u65b9\u6cd5\u6765\u521b\u5efa\u6df1\u5ea6\u76f8\u7b49(deep equality)\u2014\u2014\u901a\u8fc7\u76f8\u540c\u7684\u503c\u800c\u4e0d\u662f\u76f8\u540c\u7684\u5f15\u7528\u6765\u76f8\u7b49\uff08\u53c2\u89c1\u201c\u56fe7\u201d\uff09\u3002 <code>__eq__</code> \u65b9\u6cd5\u662f\u4efb\u4f55\u7c7b\u4e2d\u53ef\u7528\u7684\u53e6\u4e00\u4e2a\u6807\u51c6\u65b9\u6cd5\u3002 <code>__eq__</code> \u65b9\u6cd5\u6bd4\u8f83\u4e24\u4e2a\u5bf9\u8c61\uff0c\u5982\u679c\u5b83\u4eec\u7684\u503c\u76f8\u540c\u5219\u8fd4\u56de\u201cTrue\u201d\uff0c\u5426\u5219\u8fd4\u56de\u201cFalse\u201d\u3002</p> <p>\u5728\u201cFraction\u201d\u7c7b\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u518d\u6b21\u5c06\u4e24\u4e2a\u5206\u6570\u653e\u5165\u5e38\u7528\u9879\u4e2d\uff0c\u7136\u540e\u6bd4\u8f83\u5206\u5b50\u6765\u5b9e\u73b0<code>__eq__</code>\u65b9\u6cd5\uff08\u53c2\u89c1\u201c\u6e05\u5355 7\u201d\uff09\u3002 \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u8fd8\u6709\u5176\u4ed6\u53ef\u4ee5\u88ab\u8986\u76d6\u7684\u5173\u7cfb\u8fd0\u7b97\u7b26\u3002 \u4f8b\u5982\uff0c<code>__le__</code> \u65b9\u6cd5\u63d0\u4f9b\u5c0f\u4e8e\u6216\u7b49\u4e8e\u529f\u80fd\u3002</p> <p>\u6e05\u5355 7</p> <pre><code>def __eq__(self, other_fraction):\n    first_num = self.num * other_fraction.den\n    second_num = other_fraction.num * self.den\n\n    return first_num == second_num\n</code></pre> <p>\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u5b8c\u6574\u7684\u201cFraction\u201d\u7c7b\u663e\u793a\u5728\u201cActiveCode 2\u201d\u4e2d\u3002 \u6211\u4eec\u5c06\u5269\u4e0b\u7684\u7b97\u672f\u548c\u5173\u7cfb\u65b9\u6cd5\u7559\u4f5c\u7ec3\u4e60\u3002</p> \u5206\u6570\u7c7b<pre><code>def gcd(m, n):\n    while m % n != 0:\n        m, n = n, m % n\n    return n\n\nclass Fraction:\n    def __init__(self, top, bottom):\n        self.num = top\n        self.den = bottom\n\n    def __str__(self):\n        return \"{:d}/{:d}\".format(self.num, self.den)\n\n    def __eq__(self, other_fraction):\n        first_num = self.num * other_fraction.den\n        second_num = other_fraction.num * self.den\n\n        return first_num == second_num\n\n    def __add__(self, other_fraction):\n        new_num = self.num * other_fraction.den \\\n        + self.den * other_fraction.num\n        new_den = self.den * other_fraction.den\n        cmmn = gcd(new_num, new_den)\n        return Fraction(new_num // cmmn, new_den // cmmn)\n\n    def show(self):\n        print(\"{:d}/{:d}\".format(self.num, self.den))\n\nx = Fraction(1, 2)\nx.show()\ny = Fraction(2, 3)\nprint(y)\nprint(x + y)\nprint(x == y)\n</code></pre> <p>\u81ea\u68c0</p> <p>\u4e3a\u4e86\u786e\u4fdd\u60a8\u4e86\u89e3\u5982\u4f55\u5728 Python \u7c7b\u4e2d\u5b9e\u73b0\u8fd0\u7b97\u7b26\u4ee5\u53ca\u5982\u4f55\u6b63\u786e\u7f16\u5199\u65b9\u6cd5\uff0c\u8bf7\u7f16\u5199\u4e00\u4e9b\u65b9\u6cd5\u6765\u5b9e\u73b0 <code>*, /,</code> \u548c <code>-</code> \u3002 \u8fd8\u5b9e\u73b0\u6bd4\u8f83\u8fd0\u7b97\u7b26 <code>&gt;</code> \u548c <code>&lt;</code></p> <p></p> <p>A very common example to show the details of implementing a user-defined class is to construct a class to implement the abstract data type <code>Fraction</code>. We have already seen that Python provides a number of numeric classes for our use. There are times, however, that it would be most appropriate to be able to create data objects that look like fractions to the user.</p> <p>A fraction such as \\(\\frac {3}{5}\\) consists of two parts. The top value, known as the numerator, can be any integer. The bottom value, called the denominator, can be any integer greater than 0 (negative fractions have a negative numerator). Although it is possible to create a floating point approximation for any fraction, in this case we would like to represent the fraction as an exact value.</p> <p>The operations for the <code>Fraction</code> type will allow a <code>Fraction</code> data object to behave like any other numeric value. We need to be able to add, subtract, multiply, and divide fractions. We also want to be able to show fractions using the standard \u201cslash\u201d form, for example \u2157. In addition, all fraction methods should return results in their lowest terms so that no matter what computation is performed, we always end up with the most common form.</p> <p>In Python, we define a new class by providing a name and a set of method definitions that are syntactically similar to function definitions. For this example,</p> <pre><code>    class Fraction:\n    # the methods go here\n</code></pre> <p>provides the framework for us to define the methods. The first method that all classes should provide is the constructor. The constructor defines the way in which data objects are created. To create a <code>Fraction</code> object, we will need to provide two pieces of data, the numerator and the denominator. In Python, the constructor method is always called init (two underscores before and after <code>init</code>), as shown in <code>Listing 2</code>.</p> <p>.. _lst_pyconstructor:</p> <p>Listing 2</p> <pre><code>    class Fraction:\n        \"\"\"Class Fraction\"\"\"\n        def __init__(self, top, bottom):\n            \"\"\"Constructor definition\"\"\"\n            self.num = top\n            self.den = bottom\n</code></pre> <p>Notice that the formal parameter list contains three items (<code>self</code>, <code>top</code>, <code>bottom</code>). <code>self</code> is a special parameter that will always be used as a reference back to the object itself. It must always be the first formal parameter; however, it will never be given an actual parameter value upon invocation. As described earlier, fractions require two pieces of state data, the numerator and the denominator. The notation <code>self.num</code> in the constructor defines the <code>Fraction</code> object to have an internal data object called <code>num</code> as part of its state. Likewise, <code>self.den</code> creates the denominator. The values of the two formal parameters are initially assigned to the state, allowing the new <code>Fraction</code> object to know its starting value.</p> <p>To create an instance of the <code>Fraction</code> class, we must invoke the constructor. This happens by using the name of the class and passing actual values for the necessary state (note that we never directly <code>invoke __init__</code>). For example,</p> <pre><code>    my_fraction = Fraction(3, 5)\n</code></pre> <p>creates an object called <code>my_fraction</code> representing the fraction $<code>\\frac {3}{5}$ (three-fifths).</code>Figure 5` shows this object as it is now implemented.</p> <p> Figure 5: An Instance of the <code>Fraction</code> Class </p> <p>The next thing we need to do is implement the behavior that the abstract data type requires. To begin, consider what happens when we try to print a <code>Fraction</code> object.</p> <pre><code>&gt;&gt;&gt; my_fraction = Fraction(3, 5)\n&gt;&gt;&gt; print(my_fraction)\n&lt;__main__.Fraction object at 0x103203eb8&gt;\n</code></pre> <p>The <code>Fraction</code> object, <code>my_fraction</code>, does not know how to respond to this request to print. The <code>print</code> function requires that the object convert itself into a string so that the string can be written to the output. The only choice <code>my_fraction</code> has is to show the actual reference that is stored in the variable (the address itself). This is not what we want.</p> <p>There are two ways we can solve this problem. One is to define a method called <code>show</code> that will allow the <code>Fraction</code> object to print itself as a string. We can implement this method as shown in <code>Listing 3</code>. If we create a <code>Fraction</code> object as before we can ask it to show itself (in other words, print itself  in the proper format). Unfortunately, this does not work in general. In order to make printing work properly, we need to tell the <code>Fraction</code> class how to convert itself into a string. This is what the <code>print</code> function needs in order to do its job.</p> <p>Listing 3</p> <pre><code>    def show(self):\n            print(f\"{self.num}/{self.den}\")\n</code></pre> <pre><code>    &gt;&gt;&gt; my_fraction = Fraction(3, 5)\n    &gt;&gt;&gt; my_fraction.show()\n    3/5\n    &gt;&gt;&gt; print(my_fraction)\n    &lt;__main__.Fraction object at 0x40bce9ac&gt;\n</code></pre> <p>In Python, all classes have a set of standard methods that are provided but may not work properly. One of these, <code>__str__</code>, is the method to convert an object into a string. The default implementation for this method is to return the instance address string as we have already seen. What we need to do is provide a better implementation for this method. We will say that this implementation overrides the previous one, or that it redefines the method\u2019s behavior.</p> <p>To do this, we simply define a method with the name <code>__str__</code> and give it a new implementation as shown in <code>Listing 4</code>. This definition does not need any other information except the special parameter <code>self</code>. In turn, the method will build a string representation by converting each piece of internal state data to a string and then placing a <code>/</code> character in between the strings using string concatenation. The resulting string will be returned any time a <code>Fraction</code> object is asked to convert itself to a string. Notice the various ways that this function is used.</p> <p>Listing 4</p> <pre><code>    def __str__(self):\n        return f\"{self.num}/{self.den}\"\n</code></pre> <pre><code>&gt;&gt;&gt; my_fraction = Fraction(3, 5)\n&gt;&gt;&gt; print(my_fraction)\n3/5\n&gt;&gt;&gt; print(f\"I ate {my_fraction} of pizza\")\nI ate 3/5 of pizza\n&gt;&gt;&gt; my_fraction.__str__()\n'3/5'\n&gt;&gt;&gt; str(my_fraction)\n'3/5'\n</code></pre> <p>We can override many other methods for our new <code>Fraction</code> class. Some of the most important of these are the basic arithmetic operations. We would like to be able to create two <code>Fraction</code> objects and then add them together using the standard <code>+</code> notation. At this point, if we try to add two fractions, we get the following:</p> <pre><code>    &gt;&gt;&gt; f1 = Fraction(1, 4)\n    &gt;&gt;&gt; f2 = Fraction(1, 2)\n    &gt;&gt;&gt; f1 + f2\n    Traceback (most recent call last):\n    File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n    TypeError: unsupported operand type(s) for +: 'Fraction' and 'Fraction'\n</code></pre> <p>If you look closely at the error, you see that the problem is that the <code>+</code> operator does not understand the <code>Fraction</code> operands. We can fix this by providing the <code>Fraction</code> class with a method that overrides the addition method. In Python, this method is called <code>__add__</code> and it requires two parameters. The first, <code>self</code>, is always needed, and the second represents the other operand in the expression. For example,</p> <pre><code>    f1.__add__(f2)\n</code></pre> <p>would ask the <code>Fraction</code> object <code>f1</code> to add the <code>Fraction</code> object <code>f2</code> to itself. This can be written in the standard notation, <code>f1 + f2</code>.</p> <p>Two fractions must have the same denominator to be added. The easiest way to make sure they have the same denominator is to simply use the product of the two denominators as a common denominator so that \\(\\frac {a}{b} + \\frac {c}{d} = \\frac {ad}{bd} + \\frac {cb}{bd} = \\frac{ad+cb}{bd}\\). The implementation is shown in <code>Listing 5</code>. The addition function returns a new <code>Fraction</code> object with the numerator and denominator of the sum. We can use this method by writing a standard arithmetic expression involving fractions, assigning the result of the addition, and then printing our result.</p> <p>.. _lst_addmethod:</p> <p>Listing 5</p> <pre><code>def __add__(self, other_fraction):\n    new_num = self.num *other_fraction.den + \\\n                self.den* other_fraction.num\n    new_den = self.den * other_fraction.den\n\n    return Fraction(new_num, new_den)\n</code></pre> <pre><code>    &gt;&gt;&gt; f1 = Fraction(1, 4)\n    &gt;&gt;&gt; f2 = Fraction(1, 2)\n    &gt;&gt;&gt; print(f1 + f2)\n    6/8\n</code></pre> <p>The addition method works as we desire, but one thing could be better. Note that \\(6/8\\) is the correct result (\\(\\frac {1}{4} + \\frac {1}{2}\\)) but that it is not in the \u201clowest terms\u201d representation. The best representation would be \\(3/4\\). In order to be sure that our results are always in the lowest terms, we need a helper function that knows how to reduce fractions. This function will need to look for the greatest common divisor, or GCD. We can then divide the numerator and the denominator by the GCD and the result will be reduced to lowest terms.</p> <p>The best-known algorithm for finding the greatest common divisor is Euclid\u2019s algorithm, which will be discussed in detail in Chapter 8. It states that the greatest common divisor of two integers \\(m\\) and \\(n\\) is \\(n\\) if \\(n\\) divides \\(m\\) evenly. However, if \\(n\\) does not divide \\(m\\) evenly, then the answer is the greatest common divisor of \\(n\\) and the remainder of \\(m\\) divided by \\(n\\). We will simply provide an iterative implementation here (see <code>ActiveCode 1</code>). Note that this implementation of the GCD algorithm works only when the denominator is positive. This is acceptable for our fraction class because we have said that a negative fraction will be represented by a negative numerator.</p> The Greatest Common Divisor Function<pre><code>    def gcd(m, n):\n        while m % n != 0:\n            m, n = n, m % n\n        return n\n\n    print(gcd(20, 10))\n</code></pre> <p>Now we can use this function to help reduce any fraction. To put a fraction in lowest terms, we will divide the numerator and the denominator by their greatest common divisor. So, for the fraction \\(6/8\\), the greatest common divisor is 2. Dividing the top and the bottom by 2 creates a new fraction, \\(3/4\\) (see <code>Listing 6</code>).</p> <p>Listing 6</p> <pre><code>def __add__(self, other_fraction):\n    new_num = self.num * other_fraction.den + \\\n                    self.den * other_fraction.num\n    new_den = self.den * other_fraction.den\n    common = gcd(new_num, new_den)\n    return Fraction(new_num // common, new_den // common)\n</code></pre> <p>Our <code>Fraction</code> object now has two very useful methods as depicted in <code>Figure 6</code>.</p> <p> Figure 6: An Instance of the <code>Fraction</code> Class with Two Methods </p> <pre><code>&gt;&gt;&gt; f1 = Fraction(1, 4)\n&gt;&gt;&gt; f2 = Fraction(1, 2)\n&gt;&gt;&gt; print(f1 + f2)\n3/4\n</code></pre> <p>An additional group of methods that we need to include in our example <code>Fraction</code> class will allow two fractions to compare themselves to one another. Assume we have two <code>Fraction</code> objects, <code>f1</code> and <code>f2</code>. <code>f1==f2</code> will only be <code>True</code> if they are references to the same object. Two different objects with the same numerators and denominators would not be equal under this implementation. This is called shallow equality (see <code>Figure 7</code>).</p> <p> Figure 7: Shallow Equality Versus Deep Equality </p> <p>We can create deep equality\u2013equality by the same value, not the same reference\u2013by overriding the <code>__eq__</code> method (see <code>Figure 7</code>). The <code>__eq__</code> method is another standard method available in any class. The <code>__eq__</code> method compares two objects and returns <code>True</code> if their values are the same, <code>False</code> otherwise.</p> <p>In the <code>Fraction</code> class, we can implement the <code>__eq__</code> method by again putting the two fractions in common terms and then comparing the numerators (see <code>Listing 7</code>). It is important to note that there are other relational operators that can be overridden. For example, the <code>__le__</code> method provides the less than or equal functionality.</p> <p>Listing 7</p> <pre><code>def __eq__(self, other_fraction):\n    first_num = self.num * other_fraction.den\n    second_num = other_fraction.num * self.den\n\n    return first_num == second_num\n</code></pre> <p>The complete <code>Fraction</code> class, up to this point, is shown in <code>ActiveCode 2</code>. We leave the remaining arithmetic and relational methods as exercises.</p> The Fraction Class<pre><code>def gcd(m, n):\n    while m % n != 0:\n        m, n = n, m % n\n    return n\n\nclass Fraction:\n    def __init__(self, top, bottom):\n        self.num = top\n        self.den = bottom\n\n    def __str__(self):\n        return \"{:d}/{:d}\".format(self.num, self.den)\n\n    def __eq__(self, other_fraction):\n        first_num = self.num * other_fraction.den\n        second_num = other_fraction.num * self.den\n\n        return first_num == second_num\n\n    def __add__(self, other_fraction):\n        new_num = self.num * other_fraction.den \\\n        + self.den * other_fraction.num\n        new_den = self.den * other_fraction.den\n        cmmn = gcd(new_num, new_den)\n        return Fraction(new_num // cmmn, new_den // cmmn)\n\n    def show(self):\n        print(\"{:d}/{:d}\".format(self.num, self.den))\n\nx = Fraction(1, 2)\nx.show()\ny = Fraction(2, 3)\nprint(y)\nprint(x + y)\nprint(x == y)\n</code></pre> <p>Self  Check</p> <p>To make sure you understand how operators are implemented in Python classes, and how to properly write methods, write some methods to implement <code>*, /,</code> and <code>-</code> .  Also implement comparison operators &gt; and &lt;</p> <p></p>"},{"location":"c1/s13/#1132-\u7ee7\u627f\u903b\u8f91\u95e8\u548c\u7535\u8def","title":"1.13.2. \u7ee7\u627f\uff1a\u903b\u8f91\u95e8\u548c\u7535\u8def","text":"<p>1.13.2. Inheritance: Logic Gates and Circuits</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u7684\u6700\u540e\u4e00\u8282\u5c06\u4ecb\u7ecd\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u7684\u53e6\u4e00\u4e2a\u91cd\u8981\u65b9\u9762\u3002 \u7ee7\u627f\u662f\u4e00\u4e2a\u7c7b\u4e0e\u53e6\u4e00\u7c7b\u76f8\u5173\u7684\u80fd\u529b\uff0c\u5c31\u50cf\u4eba\u4eec\u5f7c\u6b64\u4e4b\u95f4\u7684\u5173\u7cfb\u4e00\u6837\u3002 \u5b69\u5b50\u7ee7\u627f\u4e86\u7236\u6bcd\u7684\u7279\u5f81\u3002 \u7c7b\u4f3c\u5730\uff0cPython \u5b50\u7c7b\u53ef\u4ee5\u4ece\u7236\u7c7b\u7ee7\u627f\u7279\u5f81\u6570\u636e\u548c\u884c\u4e3a\u3002 \u8fd9\u4e9b\u7c7b\u901a\u5e38\u79f0\u4e3a\u5b50\u7c7b\u548c\u8d85\u7c7b\u3002</p> <p>\u201c\u56fe 8\u201d\u663e\u793a\u4e86\u5185\u7f6e\u7684 Python \u96c6\u5408\u4ee5\u53ca\u5b83\u4eec\u4e4b\u95f4\u7684\u5173\u7cfb\u3002 \u6211\u4eec\u5c06\u8fd9\u6837\u7684\u5173\u7cfb\u7ed3\u6784\u79f0\u4e3a\u7ee7\u627f\u5c42\u6b21\u7ed3\u6784\u3002 \u4f8b\u5982\uff0c\u5217\u8868\u662f\u987a\u5e8f\u96c6\u5408\u7684\u5b50\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5c06\u5217\u8868\u79f0\u4e3a\u5b50\u7ea7\uff0c\u5c06\u5e8f\u5217\u79f0\u4e3a\u7236\u7ea7\uff08\u6216\u5b50\u7c7b\u5217\u8868\u548c\u8d85\u7c7b\u5e8f\u5217\uff09\u3002 \u8fd9\u901a\u5e38\u88ab\u79f0\u4e3a Is-a \u5173\u7cfb(Is-a realtionship)\uff08\u5217\u8868 Is-a \u987a\u5e8f\u96c6\u5408\uff09\u3002 \u8fd9\u610f\u5473\u7740\u5217\u8868\u7ee7\u627f\u4e86\u5e8f\u5217\u7684\u91cd\u8981\u7279\u5f81\uff0c\u5373\u57fa\u7840\u6570\u636e\u7684\u6392\u5e8f\u548c\u8fde\u63a5\u3001\u91cd\u590d\u548c\u7d22\u5f15\u7b49\u64cd\u4f5c\u3002</p> <p> \u56fe 8\uff1aPython \u96c6\u5408\u7684\u7ee7\u627f\u5c42\u6b21\u7ed3\u6784 </p> <p>\u5217\u8868\u3001\u5143\u7ec4\u548c\u5b57\u7b26\u4e32\u90fd\u662f\u987a\u5e8f\u96c6\u5408\u7684\u793a\u4f8b\u3002 \u5b83\u4eec\u90fd\u7ee7\u627f\u4e86\u901a\u7528\u7684\u6570\u636e\u7ec4\u7ec7\u548c\u64cd\u4f5c\u3002 \u7136\u800c\uff0c\u6839\u636e\u6570\u636e\u662f\u5426\u540c\u8d28\u4ee5\u53ca\u96c6\u5408\u662f\u5426\u4e0d\u53ef\u53d8\uff0c\u5b83\u4eec\u4e2d\u7684\u6bcf\u4e00\u4e2a\u90fd\u662f\u4e0d\u540c\u7684\u3002 \u5b69\u5b50\u4eec\u90fd\u4ece\u7236\u6bcd\u90a3\u91cc\u83b7\u76ca\uff0c\u4f46\u901a\u8fc7\u589e\u52a0\u989d\u5916\u7684\u7279\u5f81\u6765\u533a\u5206\u81ea\u5df1\u3002</p> <p>\u901a\u8fc7\u4ee5\u8fd9\u79cd\u5206\u5c42\u65b9\u5f0f\u7ec4\u7ec7\u7c7b\uff0c\u9762\u5411\u5bf9\u8c61\u7684\u7f16\u7a0b\u8bed\u8a00\u5141\u8bb8\u6269\u5c55\u4ee5\u524d\u7f16\u5199\u7684\u4ee3\u7801\u4ee5\u6ee1\u8db3\u65b0\u60c5\u51b5\u7684\u9700\u8981\u3002 \u6b64\u5916\uff0c\u901a\u8fc7\u4ee5\u8fd9\u79cd\u5206\u5c42\u65b9\u5f0f\u7ec4\u7ec7\u6570\u636e\uff0c\u6211\u4eec\u53ef\u4ee5\u66f4\u597d\u5730\u7406\u89e3\u5b58\u5728\u7684\u5173\u7cfb\u3002 \u6211\u4eec\u53ef\u4ee5\u66f4\u6709\u6548\u5730\u6784\u5efa\u62bd\u8c61\u8868\u793a\u3002</p> <p>\u4e3a\u4e86\u8fdb\u4e00\u6b65\u63a2\u7d22\u8fd9\u4e2a\u60f3\u6cd5\uff0c\u6211\u4eec\u5c06\u6784\u5efa\u4e00\u4e2a\u6a21\u62df\uff0c\u4e00\u4e2a\u6a21\u62df\u6570\u5b57\u7535\u8def\u7684\u5e94\u7528\u7a0b\u5e8f\u3002 \u8be5\u6a21\u62df\u7684\u57fa\u672c\u6784\u5efa\u6a21\u5757\u662f\u903b\u8f91\u95e8\u3002 \u8fd9\u4e9b\u7535\u5b50\u5f00\u5173\u4ee3\u8868\u5176\u8f93\u5165\u548c\u8f93\u51fa\u4e4b\u95f4\u7684\u5e03\u5c14\u4ee3\u6570\u5173\u7cfb\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u95e8\u6709\u4e00\u6761\u8f93\u51fa\u7ebf\u3002 \u8f93\u51fa\u503c\u53d6\u51b3\u4e8e\u8f93\u5165\u884c\u4e0a\u7ed9\u51fa\u7684\u503c\u3002</p> <p>AND \u95e8\u6709\u4e24\u6761\u8f93\u5165\u7ebf\uff0c\u6bcf\u6761\u8f93\u5165\u7ebf\u53ef\u4ee5\u662f 0 \u6216 1\uff08\u5206\u522b\u4ee3\u8868<code>False</code>\u6216<code>True</code>\uff09\u3002 \u5982\u679c\u4e24\u6761\u8f93\u5165\u7ebf\u7684\u503c\u4e3a 1\uff0c\u5219\u7ed3\u679c\u8f93\u51fa\u4e3a 1\u3002\u4f46\u662f\uff0c\u5982\u679c\u4e00\u6761\u6216\u4e24\u6761\u8f93\u5165\u7ebf\u5747\u4e3a 0\uff0c\u5219\u7ed3\u679c\u4e3a 0\u3002\u6216\u95e8\u4e5f\u6709\u4e24\u6761\u8f93\u5165\u7ebf\uff0c\u5982\u679c\u4e00\u6761\u6216\u4e24\u6761\u8f93\u5165\u7ebf\u90fd\u4e3a 1\uff0c\u5219\u7ed3\u679c\u4e3a 1 \u8f93\u5165\u503c\u7684\u5176\u4e2d\u4e4b\u4e00\u662f 1\u3002\u5982\u679c\u4e24\u6761\u8f93\u5165\u7ebf\u5747\u4e3a 0\uff0c\u5219\u7ed3\u679c\u4e3a 0\u3002</p> <p>NOT \u95e8\u4e0e\u5176\u4ed6\u4e24\u4e2a\u95e8\u7684\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u5b83\u4eec\u53ea\u6709\u4e00\u6761\u8f93\u5165\u7ebf\u3002 \u8f93\u51fa\u503c\u4e0e\u8f93\u5165\u503c\u6b63\u597d\u76f8\u53cd\u3002 \u5982\u679c\u8f93\u5165\u4e0a\u51fa\u73b0 0\uff0c\u5219\u8f93\u51fa\u4e0a\u4f1a\u4ea7\u751f 1\u3002 \u7c7b\u4f3c\u5730\uff0c1 \u4ea7\u751f 0\u3002\u201c\u56fe 9\u201d\u663e\u793a\u4e86\u6bcf\u4e2a\u95e8\u7684\u5178\u578b\u8868\u793a\u65b9\u5f0f\u3002 \u6bcf\u4e2a\u95e8\u8fd8\u6709\u4e00\u4e2a\u503c\u7684\u771f\u503c\u8868\uff0c\u663e\u793a\u95e8\u6267\u884c\u7684\u8f93\u5165\u5230\u8f93\u51fa\u6620\u5c04\u3002</p> <p> \u56fe 9\uff1a\u4e09\u79cd\u7c7b\u578b\u7684\u903b\u8f91\u95e8 </p> <p>\u901a\u8fc7\u4ee5\u5404\u79cd\u6a21\u5f0f\u7ec4\u5408\u8fd9\u4e9b\u95e8\uff0c\u7136\u540e\u5e94\u7528\u4e00\u7ec4\u8f93\u5165\u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u6784\u5efa\u5177\u6709\u903b\u8f91\u529f\u80fd\u7684\u7535\u8def\u3002 \u201c\u56fe 10\u201d\u663e\u793a\u4e86\u4e00\u4e2a\u7531\u4e24\u4e2a\u4e0e\u95e8\u3001\u4e00\u4e2a\u6216\u95e8\u548c\u4e00\u4e2a\u975e\u95e8\u7ec4\u6210\u7684\u7535\u8def\u3002 \u4e24\u4e2a\u201c\u4e0e\u201d\u95e8\u7684\u8f93\u51fa\u7ebf\u76f4\u63a5\u9988\u5165\u201c\u6216\u201d\u95e8\uff0c\u201c\u6216\u201d\u95e8\u7684\u8f93\u51fa\u7ed3\u679c\u63d0\u4f9b\u7ed9\u201c\u975e\u201d\u95e8\u3002 \u5982\u679c\u6211\u4eec\u5c06\u4e00\u7ec4\u8f93\u5165\u503c\u5e94\u7528\u4e8e\u56db\u4e2a\u8f93\u5165\u7ebf\uff08\u6bcf\u4e2a\u4e0e\u95e8\u4e24\u4e2a\u8f93\u5165\u7ebf\uff09\uff0c\u8fd9\u4e9b\u503c\u5c06\u88ab\u5904\u7406\uff0c\u5e76\u4e14\u7ed3\u679c\u5c06\u51fa\u73b0\u5728\u975e\u95e8\u7684\u8f93\u51fa\u5904\u3002 \u201c\u56fe 10\u201d\u8fd8\u663e\u793a\u4e86\u4e00\u4e2a\u5e26\u6709\u503c\u7684\u793a\u4f8b\u3002</p> <p> \u56fe 10\uff1a\u7535\u8def </p> <p>\u4e3a\u4e86\u5b9e\u73b0\u7535\u8def\uff0c\u6211\u4eec\u9996\u5148\u6784\u5efa\u903b\u8f91\u95e8\u7684\u8868\u793a\u3002 \u903b\u8f91\u95e8\u5f88\u5bb9\u6613\u7ec4\u7ec7\u6210\u7c7b\u7ee7\u627f\u5c42\u6b21\u7ed3\u6784\uff0c\u5982\u56fe 11 \u6240\u793a\u3002 \u5728\u5c42\u6b21\u7ed3\u6784\u7684\u9876\u90e8\uff0c\u201cLogicGate\u201d\u7c7b\u4ee3\u8868\u903b\u8f91\u95e8\u7684\u6700\u4e00\u822c\u7279\u5f81\uff1a\u5373\u95e8\u7684\u6807\u7b7e\u548c\u8f93\u51fa\u7ebf\u3002 \u4e0b\u4e00\u7ea7\u5b50\u7c7b\u5c06\u903b\u8f91\u95e8\u5206\u4e3a\u4e24\u4e2a\u7cfb\u5217\uff0c\u4e00\u7ec4\u6709\u4e00\u6761\u8f93\u5165\u7ebf\uff0c\u53e6\u4e00\u7ec4\u6709\u4e24\u6761\u8f93\u5165\u7ebf\u3002 \u4e0b\u9762\uff0c\u51fa\u73b0\u4e86\u6bcf\u4e2a\u7684\u5177\u4f53\u903b\u8f91\u529f\u80fd\u3002</p> <p> \u56fe 11\uff1a\u903b\u8f91\u95e8\u7684\u7ee7\u627f\u5c42\u6b21\u7ed3\u6784 </p> <p>\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u4ece\u6700\u901a\u7528\u7684\u201cLogicGate\u201d\u5f00\u59cb\u5f00\u59cb\u5b9e\u73b0\u8fd9\u4e9b\u7c7b\u3002 \u5982\u524d\u6240\u8ff0\uff0c\u6bcf\u4e2a\u95e8\u90fd\u6709\u4e00\u4e2a\u7528\u4e8e\u8bc6\u522b\u7684\u6807\u7b7e\u548c\u4e00\u6761\u8f93\u51fa\u7ebf\u3002 \u6b64\u5916\uff0c\u6211\u4eec\u9700\u8981\u5141\u8bb8\u95e8\u7684\u7528\u6237\u5411\u95e8\u8be2\u95ee\u5176\u6807\u7b7e\u7684\u65b9\u6cd5\u3002</p> <p>\u6bcf\u4e2a\u903b\u8f91\u95e8\u9700\u8981\u7684\u53e6\u4e00\u4e2a\u884c\u4e3a\u662f\u4e86\u89e3\u5176\u8f93\u51fa\u503c\u7684\u80fd\u529b\u3002 \u8fd9\u5c06\u8981\u6c42\u95e8\u6839\u636e\u5f53\u524d\u8f93\u5165\u6267\u884c\u9002\u5f53\u7684\u903b\u8f91\u3002 \u4e3a\u4e86\u4ea7\u751f\u8f93\u51fa\uff0c\u95e8\u9700\u8981\u5177\u4f53\u77e5\u9053\u8be5\u903b\u8f91\u662f\u4ec0\u4e48\u3002 \u8fd9\u610f\u5473\u7740\u8c03\u7528\u4e00\u4e2a\u65b9\u6cd5\u6765\u6267\u884c\u903b\u8f91\u8ba1\u7b97\u3002 \u5b8c\u6574\u7684\u7c7b\u5982\u201c\u6e05\u5355 8\u201d\u6240\u793a\u3002</p> <p>\u6e05\u5355 8</p> <pre><code>class LogicGate:\n    def __init__(self, lbl):\n        self.label = lbl\n        self.output = None\n\n    def get_label(self):\n        return self.label\n\n    def get_output(self):\n        self.output = self.perform_gate_logic()\n        return self.output\n</code></pre> <p>\u6b64\u65f6\uff0c\u6211\u4eec\u4e0d\u4f1a\u5b9e\u73b0\u201cperform_gate_logic\u201d\u51fd\u6570\u3002 \u539f\u56e0\u662f\u6211\u4eec\u4e0d\u77e5\u9053\u6bcf\u4e2a\u95e8\u5c06\u5982\u4f55\u6267\u884c\u81ea\u5df1\u7684\u903b\u8f91\u8fd0\u7b97\u3002 \u8fd9\u4e9b\u8be6\u7ec6\u4fe1\u606f\u5c06\u5305\u542b\u5728\u6dfb\u52a0\u5230\u5c42\u6b21\u7ed3\u6784\u4e2d\u7684\u6bcf\u4e2a\u5355\u72ec\u7684\u95e8\u4e2d\u3002 \u8fd9\u662f\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u4e2d\u4e00\u4e2a\u975e\u5e38\u5f3a\u5927\u7684\u601d\u60f3\u3002 \u6211\u4eec\u6b63\u5728\u7f16\u5199\u4e00\u4e2a\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u5c06\u4f7f\u7528\u5c1a\u4e0d\u5b58\u5728\u7684\u4ee3\u7801\u3002 \u53c2\u6570\u201cself\u201d\u662f\u5bf9\u8c03\u7528\u8be5\u65b9\u6cd5\u7684\u5b9e\u9645\u95e8\u5bf9\u8c61\u7684\u5f15\u7528\u3002 \u6dfb\u52a0\u5230\u5c42\u6b21\u7ed3\u6784\u4e2d\u7684\u4efb\u4f55\u65b0\u903b\u8f91\u95e8\u53ea\u9700\u8981\u5b9e\u73b0\u201cperform_gate_logic\u201d\u51fd\u6570\uff0c\u5e76\u4e14\u5b83\u5c06\u5728\u9002\u5f53\u7684\u65f6\u95f4\u4f7f\u7528\u3002 \u4e00\u65e6\u5b8c\u6210\uff0c\u95e8\u5c31\u53ef\u4ee5\u63d0\u4f9b\u5176\u8f93\u51fa\u503c\u3002 \u8fd9\u79cd\u6269\u5c55\u5f53\u524d\u5b58\u5728\u7684\u5c42\u6b21\u7ed3\u6784\u5e76\u63d0\u4f9b\u5c42\u6b21\u7ed3\u6784\u4f7f\u7528\u65b0\u7c7b\u6240\u9700\u7684\u7279\u5b9a\u529f\u80fd\u7684\u80fd\u529b\u5bf9\u4e8e\u91cd\u7528\u73b0\u6709\u4ee3\u7801\u6781\u5176\u91cd\u8981\u3002</p> <p>\u6211\u4eec\u6839\u636e\u8f93\u5165\u7ebf\u7684\u6570\u91cf\u5bf9\u903b\u8f91\u95e8\u8fdb\u884c\u5206\u7c7b\uff0c\u5982\u56fe11\u6240\u793a\uff1a\u4e0e\u95e8\u548c\u6216\u95e8\u90fd\u6709\u4e24\u6761\u8f93\u5165\u7ebf\uff0c\u800c\u975e\u95e8\u53ea\u6709\u4e00\u6761\u8f93\u5165\u7ebf\u3002 <code>LogicGate</code> \u6709\u4e24\u4e2a\u5b50\u7c7b\uff1a<code>BinaryGate</code>\uff0c\u5b83\u5c06\u6dfb\u52a0\u4e24\u4e2a\u8f93\u5165\u884c\uff0c\u4ee5\u53ca<code>UnaryGate</code>\uff0c\u5b83\u5c06\u53ea\u6709\u4e00\u4e2a\u8f93\u5165\u884c\u3002</p> <p>\u5728\u8ba1\u7b97\u673a\u7535\u8def\u8bbe\u8ba1\u4e2d\uff0c\u8fd9\u4e9b\u7ebf\u8def\u6709\u65f6\u79f0\u4e3a\u201c\u5f15\u811a\u201d\uff0c\u56e0\u6b64\u6211\u4eec\u5c06\u5728\u5b9e\u73b0\u4e2d\u4f7f\u7528\u8be5\u672f\u8bed\u3002</p> <p>\u201c\u6e05\u5355 9\u201d\u548c\u201c\u6e05\u5355 10\u201d\u5b9e\u73b0\u4e86\u8fd9\u4e24\u4e2a\u7c7b\u3002 \u8fd9\u4e24\u4e2a\u7c7b\u4e2d\u7684\u6784\u9020\u51fd\u6570\u90fd\u4ee5\u4f7f\u7528\u7236\u7c7b\u7684 <code>__init__</code> \u65b9\u6cd5\u663e\u5f0f\u8c03\u7528\u7236\u7c7b\u7684\u6784\u9020\u51fd\u6570\u5f00\u59cb\u3002 \u5f53\u521b\u5efa\u201cBinaryGate\u201d\u7c7b\u7684\u5b9e\u4f8b\u65f6\uff0c\u6211\u4eec\u9996\u5148\u8981\u521d\u59cb\u5316\u4ece\u201cLogicGate\u201d\u7ee7\u627f\u7684\u6240\u6709\u6570\u636e\u9879\u3002 \u5728\u672c\u4f8b\u4e2d\uff0c\u8fd9\u610f\u5473\u7740\u95e8\u7684\u6807\u7b7e\u3002 \u7136\u540e\u6784\u9020\u51fd\u6570\u7ee7\u7eed\u6dfb\u52a0\u4e24\u4e2a\u8f93\u5165\u884c\uff08\u201cpin_a\u201d\u548c\u201cpin_b\u201d\uff09\u3002 \u8fd9\u662f\u4e00\u79cd\u975e\u5e38\u5e38\u89c1\u7684\u6a21\u5f0f\uff0c\u5728\u6784\u5efa\u7c7b\u5c42\u6b21\u7ed3\u6784\u65f6\u5e94\u8be5\u59cb\u7ec8\u4f7f\u7528\u5b83\u3002 \u5b50\u7c7b\u6784\u9020\u51fd\u6570\u9700\u8981\u8c03\u7528\u7236\u7c7b\u6784\u9020\u51fd\u6570\uff0c\u7136\u540e\u7ee7\u7eed\u5904\u7406\u5b83\u4eec\u81ea\u5df1\u7684\u533a\u522b\u6570\u636e\u3002</p> <p>\u6e05\u5355 9</p> <pre><code>class BinaryGate(LogicGate):\n    def __init__(self, lbl):\n        LogicGate.__init__(self, lbl)\n        self.pin_a = None\n        self.pin_b = None\n\n    def get_pin_a(self):\n        return int(input(f\"Enter pin A input for gate \\\n            {self.get_label()}: \"))\n\n    def get_pin_b(self):\n        return int(input(f\"Enter pin B input for gate \\\n            {self.get_label()}: \"))\n</code></pre> <p>\u6e05\u5355 10</p> <pre><code>class UnaryGate(LogicGate):\n    def __init__(self, lbl):\n        LogicGate.__init__(self, lbl)\n        self.pin = None\n\n    def get_pin(self):\n        return int(input(f\"Enter pin input for gate \\\n            {self.get_label()}: \"))\n</code></pre> <p>Python \u8fd8\u6709\u4e00\u4e2a\u540d\u4e3a\u201csuper\u201d\u7684\u51fd\u6570\uff0c\u53ef\u4ee5\u7528\u6765\u4ee3\u66ff\u663e\u5f0f\u547d\u540d\u7236\u7c7b\u3002 \u8fd9\u662f\u4e00\u79cd\u66f4\u901a\u7528\u7684\u673a\u5236\u5e76\u4e14\u88ab\u5e7f\u6cdb\u4f7f\u7528\uff0c\u7279\u522b\u662f\u5f53\u4e00\u4e2a\u7c7b\u6709\u591a\u4e2a\u7236\u7c7b\u65f6\u3002 \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c<code>LogicGate.__init__(self, lbl)</code> \u53ef\u4ee5\u66ff\u6362\u4e3a<code>super().__init__(lbl)</code>,<code>super(UnaryGate, self).__init__(lbl)</code>, \u6216<code>super().__init__(\"UnaryGate\", lbl)</code>\u3002 \u5177\u4f53\u7ec6\u8282\u8d85\u51fa\u4e86\u672c\u6587\u7684\u8303\u56f4\u3002</p> <p><code>BinaryGate</code> \u7c7b\u6dfb\u52a0\u7684\u552f\u4e00\u884c\u4e3a\u662f\u80fd\u591f\u4ece\u4e24\u4e2a\u8f93\u5165\u884c\u83b7\u53d6\u503c\u3002 \u7531\u4e8e\u8fd9\u4e9b\u503c\u6765\u81ea\u67d0\u4e2a\u5916\u90e8\u4f4d\u7f6e\uff0c\u6211\u4eec\u5c06\u7b80\u5355\u5730\u8981\u6c42\u7528\u6237\u901a\u8fc7\u8f93\u5165\u8bed\u53e5\u63d0\u4f9b\u5b83\u4eec\u3002 <code>UnaryGate</code> \u7c7b\u4e5f\u6709\u76f8\u540c\u7684\u5b9e\u73b0\uff0c\u53ea\u662f\u53ea\u6709\u4e00\u4e2a\u8f93\u5165\u884c\u3002</p> <p>\u73b0\u5728\u6211\u4eec\u6709\u4e86\u6839\u636e\u8f93\u5165\u7ebf\u6570\u91cf\u7684\u95e8\u7684\u901a\u7528\u7c7b\uff0c\u6211\u4eec\u53ef\u4ee5\u6784\u5efa\u5177\u6709\u72ec\u7279\u884c\u4e3a\u7684\u7279\u5b9a\u95e8\u3002 \u4f8b\u5982\uff0c<code>AndGate</code>\u7c7b\u5c06\u662f<code>BinaryGate</code>\u7684\u5b50\u7c7b\uff0c\u56e0\u4e3a\u201c\u4e0e\u201d\u95e8\u6709\u4e24\u4e2a\u8f93\u5165\u7ebf\u3002 \u548c\u4ee5\u524d\u4e00\u6837\uff0c\u6784\u9020\u51fd\u6570\u7684\u7b2c\u4e00\u884c\u8c03\u7528\u7236\u7c7b\u6784\u9020\u51fd\u6570\uff08\u201cBinaryGate\u201d\uff09\uff0c\u800c\u7236\u7c7b\u6784\u9020\u51fd\u6570\u53c8\u8c03\u7528\u5176\u7236\u7c7b\u6784\u9020\u51fd\u6570\uff08<code>LogicGate</code>\uff09\u3002 \u8bf7\u6ce8\u610f\uff0c<code>AndGate</code>\u7c7b\u4e0d\u63d0\u4f9b\u4efb\u4f55\u65b0\u6570\u636e\uff0c\u56e0\u4e3a\u5b83\u7ee7\u627f\u4e86\u4e24\u4e2a\u8f93\u5165\u884c\u3001\u4e00\u4e2a\u8f93\u51fa\u884c\u548c\u4e00\u4e2a\u6807\u7b7e\u3002</p> <p>\u201cAndGate\u201d \u552f\u4e00\u9700\u8981\u6dfb\u52a0\u7684\u662f\u6267\u884c\u524d\u9762\u63cf\u8ff0\u7684\u5e03\u5c14\u8fd0\u7b97\u7684\u7279\u5b9a\u884c\u4e3a\u3002 \u8fd9\u662f\u6211\u4eec\u53ef\u4ee5\u63d0\u4f9b\u201cperform_gate_logic\u201d\u65b9\u6cd5\u7684\u5730\u65b9\u3002 \u5bf9\u4e8e AND \u95e8\uff0c\u6b64\u65b9\u6cd5\u9996\u5148\u5fc5\u987b\u83b7\u53d6\u4e24\u4e2a\u8f93\u5165\u503c\uff0c\u7136\u540e\u4ec5\u5728\u4e24\u4e2a\u8f93\u5165\u503c\u5747\u4e3a 1 \u65f6\u624d\u8fd4\u56de 1\u3002\u5b8c\u6574\u7684\u7c7b\u5982\u201c\u6e05\u5355 11\u201d\u6240\u793a\u3002</p> <p>Listing 11</p> <pre><code>class AndGate(BinaryGate):\n    def __init__(self, lbl):\n        super().__init__(lbl)\n\n    def perform_gate_logic(self):\n        a = self.get_pin_a()\n        b = self.get_pin_b()\n        if a == 1 and b == 1:\n            return 1\n        else:\n            return 0\n</code></pre> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u521b\u5efa\u4e00\u4e2a\u5b9e\u4f8b\u5e76\u8981\u6c42\u5b83\u8ba1\u7b97\u5176\u8f93\u51fa\u6765\u5c55\u793a\u6b63\u5728\u8fd0\u884c\u7684\u201cAndGate\u201d\u7c7b\u3002 \u4ee5\u4e0b\u4f1a\u8bdd\u663e\u793a\u4e86\u4e00\u4e2a\u201cAndGate\u201d\u5bf9\u8c61\u201cg1\u201d\uff0c\u5b83\u6709\u4e00\u4e2a\u5185\u90e8\u6807\u7b7e\u201c\u201cG1\u201d\u201d\u3002 \u5f53\u6211\u4eec\u8c03\u7528\u201cget_output\u201d\u65b9\u6cd5\u65f6\uff0c\u8be5\u5bf9\u8c61\u5fc5\u987b\u9996\u5148\u8c03\u7528\u5176\u201cperform_gate_logic\u201d\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u4f9d\u6b21\u67e5\u8be2\u4e24\u4e2a\u8f93\u5165\u884c\u3002 \u63d0\u4f9b\u503c\u540e\uff0c\u5c31\u4f1a\u663e\u793a\u6b63\u786e\u7684\u8f93\u51fa\u3002</p> <pre><code>&gt;&gt;&gt; g1 = AndGate(\"G1\")\n&gt;&gt;&gt; g1.get_output()\nEnter pin A input for gate G1: 1\nEnter pin B input for gate G1: 0\n0\n</code></pre> <p>\u53ef\u4ee5\u5bf9\u201c\u6216\u201d\u95e8\u548c\u201c\u975e\u201d\u95e8\u8fdb\u884c\u76f8\u540c\u7684\u5f00\u53d1\u3002 \u201cOrGate\u201d\u7c7b\u4e5f\u5c06\u662f\u201cBinaryGate\u201d\u7684\u5b50\u7c7b\uff0c\u201cNotGate\u201d\u7c7b\u5c06\u6269\u5c55\u201cUnaryGate\u201d\u7c7b\u3002 \u8fd9\u4e24\u4e2a\u7c7b\u90fd\u9700\u8981\u63d0\u4f9b\u81ea\u5df1\u7684\u201cperform_gate_logic\u201d\u51fd\u6570\uff0c\u56e0\u4e3a\u8fd9\u662f\u5b83\u4eec\u7684\u7279\u5b9a\u884c\u4e3a\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u9996\u5148\u6784\u9020\u5176\u4e2d\u4e00\u4e2a\u95e8\u7c7b\u7684\u5b9e\u4f8b\uff0c\u7136\u540e\u5411\u95e8\u8be2\u95ee\u5176\u8f93\u51fa\uff08\u8fd9\u53c8\u9700\u8981\u63d0\u4f9b\u8f93\u5165\uff09\u6765\u4f7f\u7528\u5355\u4e2a\u95e8\u3002 \u4f8b\u5982\uff1a</p> <pre><code>&gt;&gt;&gt; g2 = OrGate(\"G2\")\n&gt;&gt;&gt; g2.get_output()\nEnter pin A input for gate G2: 1\nEnter pin B input for gate G2: 1\n1\n&gt;&gt;&gt; g2.get_output()\nEnter pin A input for gate G2: 0\nEnter pin B input for gate G2: 0\n0\n&gt;&gt;&gt; g3 = NotGate(\"G3\")\n&gt;&gt;&gt; g3.get_output()\nEnter pin input for gate G3: 0\n1\n</code></pre> <p>\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u6709\u4e86\u57fa\u672c\u7684\u95e8\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u6ce8\u610f\u529b\u8f6c\u5411\u6784\u5efa\u7535\u8def\u3002 \u4e3a\u4e86\u521b\u5efa\u4e00\u4e2a\u7535\u8def\uff0c\u6211\u4eec\u9700\u8981\u5c06\u95e8\u8fde\u63a5\u5728\u4e00\u8d77\uff0c\u4e00\u4e2a\u95e8\u7684\u8f93\u51fa\u6d41\u5165\u53e6\u4e00\u4e2a\u95e8\u7684\u8f93\u5165\u3002 \u4e3a\u6b64\uff0c\u6211\u4eec\u5c06\u5b9e\u73b0\u4e00\u4e2a\u540d\u4e3a\u201cConnector\u201d\u7684\u65b0\u7c7b\u3002</p> <p>\u201cConnector\u201d\u7c7b\u4e0d\u4f1a\u9a7b\u7559\u5728\u95e8\u5c42\u6b21\u7ed3\u6784\u4e2d\u3002 \u7136\u800c\uff0c\u5b83\u5c06\u4f7f\u7528\u95e8\u5c42\u6b21\u7ed3\u6784\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u8fde\u63a5\u5668\u90fd\u6709\u4e24\u4e2a\u95e8\uff0c\u4e24\u7aef\u5404\u4e00\u4e2a\uff08\u53c2\u89c1\u201c\u56fe 12\u201d\uff09\u3002 \u8fd9\u79cd\u5173\u7cfb\u5728\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u4e2d\u975e\u5e38\u91cd\u8981\u3002 \u5b83\u88ab\u79f0\u4e3a\u6709\u5173\u7cfb\u3002 \u56de\u60f3\u4e00\u4e0b\u4e4b\u524d\u6211\u4eec\u4f7f\u7528\u77ed\u8bed Is-a \u5173\u7cfb \u6765\u8868\u793a\u5b50\u7c7b\u4e0e\u7236\u7c7b\u76f8\u5173\uff0c\u4f8b\u5982 <code>UnaryGate</code> Is-a <code>LogicGate</code>\u3002</p> <p> \u56fe 12\uff1a\u8fde\u63a5\u5668\u5c06\u4e00\u4e2a\u95e8\u7684\u8f93\u51fa\u8fde\u63a5\u5230\u53e6\u4e00\u4e2a\u95e8\u7684\u8f93\u5165 </p> <p>\u73b0\u5728\uff0c\u5bf9\u4e8e\u201cConnector\u201d\u7c7b\uff0c\u6211\u4eec\u8bf4\u201cConnector\u201d\u5177\u6709\u201cLogicGate\u201d\uff0c\u8fd9\u610f\u5473\u7740\u8fde\u63a5\u5668\u5c06\u5728\u5176\u4e2d\u5305\u542b\u201cLogicGate\u201d\u7c7b\u7684\u5b9e\u4f8b\uff0c\u4f46\u4e0d\u662f \u5c42\u6b21\u7ed3\u6784\u3002 \u5728\u8bbe\u8ba1\u7c7b\u65f6\uff0c\u533a\u5206\u5177\u6709 Is-a \u5173\u7cfb\uff08\u9700\u8981\u7ee7\u627f\uff09\u548c\u5177\u6709 Has-a \u5173\u7cfb\uff08\u4e0d\u9700\u8981\u7ee7\u627f\uff09\u7684\u7c7b\u975e\u5e38\u91cd\u8981\u3002</p> <p>\u201c\u6e05\u5355 12\u201d\u663e\u793a\u4e86\u201cConnector\u201d\u7c7b\u3002 \u6bcf\u4e2a\u8fde\u63a5\u5668\u5bf9\u8c61\u5185\u7684\u4e24\u4e2a\u95e8\u5b9e\u4f8b\u5c06\u88ab\u79f0\u4e3a\u201cfrom_gate\u201d\u548c\u201cto_gate\u201d\uff0c\u8ba4\u8bc6\u5230\u6570\u636e\u503c\u5c06\u4ece\u4e00\u4e2a\u95e8\u7684\u8f93\u51fa\u6d41\u5230\u4e0b\u4e00\u4e2a\u95e8\u7684\u8f93\u5165\u7ebf\u3002 \u5bf9\u201cset_next_pin\u201d\u7684\u8c03\u7528\u5bf9\u4e8e\u5efa\u7acb\u8fde\u63a5\u975e\u5e38\u91cd\u8981\uff08\u53c2\u89c1\u201c\u6e05\u5355 13\u201d\uff09\u3002 \u6211\u4eec\u9700\u8981\u5c06\u6b64\u65b9\u6cd5\u6dfb\u52a0\u5230\u6211\u4eec\u7684\u95e8\u7c7b\u4e2d\uff0c\u4ee5\u4fbf\u6bcf\u4e2a\u201cto_gate\u201d\u53ef\u4ee5\u4e3a\u8fde\u63a5\u9009\u62e9\u6b63\u786e\u7684\u8f93\u5165\u7ebf\u3002</p> <p>\u6e05\u5355 12</p> <pre><code>class Connector:\n    def __init__(self, fgate, tgate):\n        self.from_gate = fgate\n        self.to_gate = tgate\n\n        tgate.set_next_pin(self)\n\n    def get_from(self):\n        return self.from_gate\n\n    def get_to(self):\n        return self.to_gate\n</code></pre> <p>\u6e05\u5355 13</p> <pre><code>def set_next_pin(self, source):\n    if self.pin_a == None:\n        self.pin_a = source\n    else:\n        if self.pin_b == None:\n            self.pin_b = source\n        else:\n            raise RuntimeError(\"Error: NO EMPTY PINS\")\n</code></pre> <p>\u5728\u201cBinaryGate\u201d\u7c7b\u4e2d\uff0c\u5bf9\u4e8e\u5177\u6709\u4e24\u6761\u53ef\u80fd\u7684\u8f93\u5165\u7ebf\u7684\u95e8\uff0c\u8fde\u63a5\u5668\u5fc5\u987b\u4ec5\u8fde\u63a5\u5230\u4e00\u6839\u7ebf\u3002 \u5982\u679c\u4e24\u8005\u90fd\u53ef\u7528\uff0c\u6211\u4eec\u5c06\u9ed8\u8ba4\u9009\u62e9\u201cpin_a\u201d\u3002 \u5982\u679c\u201cpin_a\u201d\u5df2\u7ecf\u8fde\u63a5\uff0c\u90a3\u4e48\u6211\u4eec\u5c06\u9009\u62e9\u201cpin_b\u201d\u3002 \u65e0\u6cd5\u8fde\u63a5\u5230\u6ca1\u6709\u53ef\u7528\u8f93\u5165\u7ebf\u7684\u95e8\u3002</p> <p>\u73b0\u5728\u53ef\u4ee5\u4ece\u4e24\u4e2a\u5730\u65b9\u83b7\u5f97\u8f93\u5165\uff1a\u50cf\u4ee5\u524d\u4e00\u6837\u4ece\u5916\u90e8\u83b7\u5f97\u8f93\u5165\uff0c\u4ee5\u53ca\u4ece\u8fde\u63a5\u5230\u8be5\u8f93\u5165\u7ebf\u7684\u95e8\u7684\u8f93\u51fa\u83b7\u5f97\u8f93\u5165\u3002 \u8fd9\u9700\u8981\u66f4\u6539\u201cget_pin_a\u201d\u548c\u201cget_pin_b\u201d\u65b9\u6cd5\uff08\u53c2\u89c1\u201c\u6e05\u5355 14\u201d\uff09\u3002 \u5982\u679c\u8f93\u5165\u7ebf\u6ca1\u6709\u8fde\u63a5\u5230\u4efb\u4f55\u4e1c\u897f\uff08<code>None</code>\uff09\uff0c\u5219\u50cf\u4ee5\u524d\u4e00\u6837\u4ece\u5916\u90e8\u8be2\u95ee\u7528\u6237\u3002 \u4f46\u662f\uff0c\u5982\u679c\u5b58\u5728\u8fde\u63a5\uff0c\u5219\u4f1a\u8bbf\u95ee\u8be5\u8fde\u63a5\u5e76\u68c0\u7d22\u201cfrom_gate\u201d\u7684\u8f93\u51fa\u503c\u3002 \u8fd9\u53cd\u8fc7\u6765\u53c8\u5bfc\u81f4\u8be5\u95e8\u5904\u7406\u5176\u903b\u8f91\u3002 \u8fd9\u5c06\u6301\u7eed\u4e0b\u53bb\uff0c\u76f4\u5230\u6240\u6709\u8f93\u5165\u90fd\u53ef\u7528\u5e76\u4e14\u6700\u7ec8\u8f93\u51fa\u503c\u6210\u4e3a\u76f8\u5173\u95e8\u6240\u9700\u7684\u8f93\u5165\u3002 \u4ece\u67d0\u79cd\u610f\u4e49\u4e0a\u8bf4\uff0c\u7535\u8def\u5411\u540e\u5de5\u4f5c\u4ee5\u627e\u5230\u6700\u7ec8\u4ea7\u751f\u8f93\u51fa\u6240\u9700\u7684\u8f93\u5165\u3002</p> <p>\u6e05\u5355 14</p> <pre><code>def get_pin_a(self):\n    if self.pin_a == None:\n        return input(\n            f\"Enter pin A input for gate \\\n            {self.get_label()}: \"\n        )\n    else:\n        return self.pin_a.get_from().get_output()\n</code></pre> <p>\u4ee5\u4e0b\u7247\u6bb5\u6784\u5efa\u4e86\u672c\u8282\u524d\u9762\u6240\u793a\u7684\u7535\u8def\uff1a</p> <pre><code>&gt;&gt;&gt; g1 = AndGate(\"G1\")\n&gt;&gt;&gt; g2 = AndGate(\"G2\")\n&gt;&gt;&gt; g3 = OrGate(\"G3\")\n&gt;&gt;&gt; g4 = NotGate(\"G4\")\n&gt;&gt;&gt; c1 = Connector(g1, g3)\n&gt;&gt;&gt; c2 = Connector(g2, g3)\n&gt;&gt;&gt; c3 = Connector(g3, g4)\n</code></pre> <p>\u4e24\u4e2a\u4e0e\u95e8\uff08\u201cg1\u201d\u548c\u201cg2\u201d\uff09\u7684\u8f93\u51fa\u8fde\u63a5\u5230\u201c\u6216\u201d\u95e8\uff08\u201cg3\u201d\uff09\uff0c\u8be5\u8f93\u51fa\u8fde\u63a5\u5230\u201c\u975e\u201d\u95e8\uff08\u201cg4\u201d\uff09\u3002 \u975e\u95e8\u7684\u8f93\u51fa\u5c31\u662f\u6574\u4e2a\u7535\u8def\u7684\u8f93\u51fa\u3002 \u4f8b\u5982\uff1a</p> <pre><code>&gt;&gt;&gt; g4.get_output()\nEnter pin A input for gate G1: 0\nEnter pin B input for gate G1: 1\nEnter pin A input for gate G2: 1\nEnter pin B input for gate G2: 1\n0\n</code></pre> <p>\u4f7f\u7528 ActiveCode 4 \u4eb2\u81ea\u5c1d\u8bd5\u4e00\u4e0b\u3002</p> \u5b8c\u6574\u7684\u7535\u8def\u7a0b\u5e8f\u3002<pre><code>class LogicGate:\n\n    def __init__(self, lbl):\n        self.name = lbl\n        self.output = None\n\n    def get_label(self):\n        return self.name\n\n    def get_output(self):\n        self.output = self.perform_gate_logic()\n        return self.output\n\n\nclass BinaryGate(LogicGate):\n\n    def __init__(self, lbl):\n        super(BinaryGate, self).__init__(lbl)\n\n        self.pin_a = None\n        self.pin_b = None\n\n    def get_pin_a(self):\n        if self.pin_a == None:\n            return int(input(\"Enter pin A input for gate \" + self.get_label() + \": \"))\n        else:\n            return self.pin_a.get_from().get_output()\n\n    def get_pin_b(self):\n        if self.pin_b == None:\n            return int(input(\"Enter pin B input for gate \" + self.get_label() + \": \"))\n        else:\n            return self.pin_b.get_from().get_output()\n\n    def set_next_pin(self, source):\n        if self.pin_a == None:\n            self.pin_a = source\n        else:\n            if self.pin_b == None:\n                self.pin_b = source\n            else:\n                print(\"Cannot Connect: NO EMPTY PINS on this gate\")\n\n\nclass AndGate(BinaryGate):\n\n    def __init__(self, lbl):\n        BinaryGate.__init__(self, lbl)\n\n    def perform_gate_logic(self):\n\n        a = self.get_pin_a()\n        b = self.get_pin_b()\n        if a == 1 and b == 1:\n            return 1\n        else:\n            return 0\n\nclass OrGate(BinaryGate):\n\n    def __init__(self, lbl):\n        BinaryGate.__init__(self, lbl)\n\n    def perform_gate_logic(self):\n\n        a = self.get_pin_a()\n        b = self.get_pin_b()\n        if a == 1 or b == 1:\n            return 1\n        else:\n            return 0\n\nclass UnaryGate(LogicGate):\n\n    def __init__(self, lbl):\n        LogicGate.__init__(self, lbl)\n\n        self.pin = None\n\n    def get_pin(self):\n        if self.pin == None:\n            return int(input(\"Enter pin input for gate \" + self.get_label() + \": \"))\n        else:\n            return self.pin.get_from().get_output()\n\n    def set_next_pin(self, source):\n        if self.pin == None:\n            self.pin = source\n        else:\n            print(\"Cannot Connect: NO EMPTY PINS on this gate\")\n\n\nclass NotGate(UnaryGate):\n\n    def __init__(self, lbl):\n        UnaryGate.__init__(self, lbl)\n\n    def perform_gate_logic(self):\n        if self.get_pin():\n            return 0\n        else:\n            return 1\n\n\nclass Connector:\n\n    def __init__(self, fgate, tgate):\n        self.from_gate = fgate\n        self.to_gate = tgate\n\n        tgate.set_next_pin(self)\n\n    def get_from(self):\n        return self.from_gate\n\n    def get_to(self):\n        return self.to_gate\n\n\ndef main():\n    g1 = AndGate(\"G1\")\n    g2 = AndGate(\"G2\")\n    g3 = OrGate(\"G3\")\n    g4 = NotGate(\"G4\")\n    c1 = Connector(g1, g3)\n    c2 = Connector(g2, g3)\n    c3 = Connector(g3, g4)\n    print(g4.get_output())\n\nmain()\n</code></pre> <p>\u81ea\u68c0</p> <p>\u521b\u5efa\u4e24\u4e2a\u65b0\u7684\u95e8\u7c7b\uff0c\u4e00\u4e2a\u79f0\u4e3a NorGate\uff0c\u53e6\u4e00\u4e2a\u79f0\u4e3a NandGate\u3002 NandGates \u7684\u5de5\u4f5c\u65b9\u5f0f\u4e0e AndGates \u7c7b\u4f3c\uff0c\u4f46\u8f93\u51fa\u672a\u9644\u52a0\u3002 NorGates \u5de5\u4f5c\u4e8e OrGates \u6e56\uff0c\u5176\u8f93\u51fa\u672a\u9644\u52a0\u3002</p> <p>\u521b\u5efa\u4e00\u7cfb\u5217\u95e8\u6765\u8bc1\u660e\u4ee5\u4e0b\u7b49\u5f0f <code>NOT (( A and B) or (C and D))</code> \u4e0e <code>NOT( A and B )</code> \u548c <code>NOT (C and D)</code> \u76f8\u540c\u3002 \u786e\u4fdd\u5728\u6a21\u62df\u4e2d\u4f7f\u7528\u4e00\u4e9b\u65b0\u7684\u95e8\u3002</p> self_check_5<pre><code>class LogicGate:\n\n    def __init__(self,n):\n        self.name = n\n        self.output = None\n\n    def get_label(self):\n        return self.name\n\n    def get_output(self):\n        self.output = self.perform_gate_logic()\n        return self.output\n\n\nclass BinaryGate(LogicGate):\n\n    def __init__(self,n):\n        LogicGate.__init__(self,n)\n\n        self.pin_a = None\n        self.pin_b = None\n\n    def get_pin_a(self):\n        if self.pin_a == None:\n            return int(input(\"Enter Pin A input for gate \"+self.get_label()+\"--&gt;\"))\n        else:\n            return self.pin_a.get_from().get_output()\n\n    def get_pin_b(self):\n        if self.pin_b == None:\n            return int(input(\"Enter Pin B input for gate \"+self.get_label()+\"--&gt;\"))\n        else:\n            return self.pin_b.get_from().get_output()\n\n    def set_next_pin(self,source):\n        if self.pin_a == None:\n            self.pin_a = source\n        else:\n            if self.pin_b == None:\n                self.pin_b = source\n            else:\n                print(\"Cannot Connect: NO EMPTY PINS on this gate\")\n\n\nclass AndGate(BinaryGate):\n\n    def __init__(self,n):\n        BinaryGate.__init__(self,n)\n\n    def perform_gate_logic(self):\n\n        a = self.get_pin_a()\n        b = self.get_pin_b()\n        if a==1 and b==1:\n            return 1\n        else:\n            return 0\n\nclass OrGate(BinaryGate):\n\n    def __init__(self,n):\n        BinaryGate.__init__(self,n)\n\n    def perform_gate_logic(self):\n\n        a = self.get_pin_a()\n        b = self.get_pin_b()\n        if a ==1 or b==1:\n            return 1\n        else:\n            return 0\n\nclass UnaryGate(LogicGate):\n\n    def __init__(self,n):\n        LogicGate.__init__(self,n)\n\n        self.pin = None\n\n    def get_pin(self):\n        if self.pin == None:\n            return int(input(\"Enter Pin input for gate \"+self.get_label()+\"--&gt;\"))\n        else:\n            return self.pin.get_from().get_output()\n\n    def set_next_pin(self,source):\n        if self.pin == None:\n            self.pin = source\n        else:\n            print(\"Cannot Connect: NO EMPTY PINS on this gate\")\n\n\nclass NotGate(UnaryGate):\n\n    def __init__(self,n):\n        UnaryGate.__init__(self,n)\n\n    def perform_gate_logic(self):\n        if self.get_pin():\n            return 0\n        else:\n            return 1\n\n\nclass Connector:\n\n    def __init__(self, fgate, tgate):\n        self.from_gate = fgate\n        self.to_gate = tgate\n\n        tgate.set_next_pin(self)\n\n    def get_from(self):\n        return self.from_gate\n\n    def get_to(self):\n        return self.to_gate\n\ndef main():\n    g1 = AndGate(\"G1\")\n\n    print(g1.get_output())\n\nmain()\n</code></pre> <p></p> <p>\u81ea\u68c0\u6311\u6218</p> <p>\u8ba1\u7b97\u673a\u7684\u57fa\u672c\u6784\u5efa\u6a21\u5757\u4e4b\u4e00\u662f\u89e6\u53d1\u5668\u3002 \u5b83\u4e0d\u662f\u8ba1\u7b97\u673a\u79d1\u5b66\u6559\u6388\u7a7f\u5728\u811a\u4e0a\u7684\u4e1c\u897f\uff0c\u800c\u662f\u4e00\u79cd\u7a33\u5b9a\u7684\u7535\u8def\uff0c\u53ef\u4ee5\u5b58\u50a8\u6700\u540e\u7684\u6570\u636e\u3002 \u4e00\u4e2a\u7b80\u5355\u7684\u89e6\u53d1\u5668\u53ef\u4ee5\u7531\u8fde\u63a5\u5728\u4e00\u8d77\u7684\u4e24\u4e2a\u6216\u975e\u95e8\u7ec4\u6210\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002</p> <p></p> <p>\u8fd9\u662f\u4e00\u4e2a\u5177\u6709\u6311\u6218\u6027\u7684\u95ee\u9898\uff0c\u56e0\u4e3a\u6574\u4f53\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0c\u5982\u679c Reset \u548c Set \u7684\u521d\u59cb\u8f93\u5165\u5747\u4e3a 0\uff0c\u5219\u89e6\u53d1\u5668\u7684\u8f93\u51fa\u4e3a 0\u3002\u4f46\u662f\uff0c\u5982\u679c Set \u8f93\u5165\u5207\u6362\u4e3a 1\uff0c\u5219\u8f93\u51fa\u53d8\u4e3a 1\u3002\u6700\u68d2\u7684\u662f\uff0c\u5f53 set \u8f93\u5165\u53d8\u4e3a 0 \u65f6 \u8f93\u51fa\u4fdd\u6301\u4e3a 1\uff0c\u76f4\u5230\u590d\u4f4d\u8f93\u5165\u5207\u6362\u4e3a 1\uff0c\u4ece\u800c\u5c06\u7535\u8def\u7684\u8f93\u51fa\u590d\u4f4d\u4e3a\u96f6\u3002</p> <p>Our final section will introduce another important aspect of object-oriented programming. Inheritance is the ability of one class to be related to another class in much the same way that people can be related to one another. Children inherit characteristics from their parents. Similarly, Python child classes can inherit characteristic data and behavior from a parent class. These classes are often referred to as subclasses and superclasses.</p> <p><code>Figure 8</code> shows the built-in Python collections and their relationships to one another. We call a relationship structure such as this an inheritance hierarchy. For example, the list is a child of the sequential collection. In this case, we call the list the child and the sequence the parent (or subclass list and superclass sequence). This is often referred to as an Is-a relationship (the list Is-a sequential collection). This implies that lists inherit important characteristics from sequences, namely the ordering of the underlying data and operations such as concatenation, repetition, and indexing.</p> <p> Figure 8: An Inheritance Hierarchy for Python Collections </p> <p>Lists, tuples, and strings are all examples of sequential collections. They all inherit common data organization and operations. However, each of them is distinct based on whether the data is homogeneous and whether the collection is immutable. The children all gain from their parents but distinguish themselves by adding additional characteristics.</p> <p>By organizing classes in this hierarchical fashion, object-oriented programming languages allow previously written code to be extended to meet the needs of a new situation. In addition, by organizing data in this hierarchical manner, we can better understand the relationships that exist. We can be more efficient in building our abstract representations.</p> <p>To explore this idea further, we will construct a simulation, an application to simulate digital circuits. The basic building block for this simulation will be the logic gate. These electronic switches represent Boolean algebra relationships between their input and their output. In general, gates have a single output line. The value of the output is dependent on the values given on the input lines.</p> <p>AND gates have two input lines, each of which can be either 0 or 1 (representing <code>False</code> or <code>True</code>, respectively). If both of the input lines have the value 1, the resulting output is 1. However, if either or both of the input lines is 0, the result is 0. OR gates also have two input lines and produce a 1 if one or both of the input values is a 1. In the case where both input lines are 0, the result is 0.</p> <p>NOT gates differ from the other two gates in that they have only a single input line. The output value is simply the opposite of the input value. If 0 appears on the input, 1 is produced on the output. Similarly, 1 produces 0. <code>Figure 9</code> shows how each of these gates is typically represented. Each gate also has a truth table of values showing the input-to-output mapping that is performed by the gate.</p> <p> Figure 9: Three Types of Logic Gates </p> <p>By combining these gates in various patterns and then applying a set of  input values, we can build circuits that have logical functions. <code>Figure 10</code> shows a circuit consisting of two AND gates, one OR gate, and a single NOT gate. The output lines from the two AND gates feed directly into the OR gate, and the resulting output from the OR gate is given to the NOT gate. If we apply a set of input values to the four input lines (two for each AND gate), the values are processed and a result appears at the output of the NOT gate. <code>Figure 10</code> also shows an example with values.</p> <p> Figure 10: A Circuit </p> <p>In order to implement a circuit, we will first build a representation for logic gates. Logic gates are easily organized into a class inheritance hierarchy as shown in <code>Figure 11</code>. At the top of the hierarchy, the <code>LogicGate</code> class represents the most general characteristics of logic gates: namely, a label for the gate and an output line. The next level of subclasses breaks the logic gates into two families, those that have one input line and those that have two. Below that, the specific logic functions of each appear.</p> <p> Figure 11: An Inheritance Hierarchy for Logic Gates </p> <p>We can now start to implement the classes by starting with the most general, <code>LogicGate</code>. As noted earlier, each gate has a label for identification and a single output line. In addition, we need methods to allow a user of a gate to ask the gate for its label.</p> <p>The other behavior that every logic gate needs is the ability to know its output value. This will require that the gate perform the appropriate logic based on the current input. In order to produce output, the gate needs to know specifically what that logic is. This means calling a method to perform the logic computation. The complete class is shown in <code>Listing 8</code>.</p> <p>Listing 8</p> <pre><code>class LogicGate:\n    def __init__(self, lbl):\n        self.label = lbl\n        self.output = None\n\n    def get_label(self):\n        return self.label\n\n    def get_output(self):\n        self.output = self.perform_gate_logic()\n        return self.output\n</code></pre> <p>At this point, we will not implement the <code>perform_gate_logic</code> function. The reason for this is that we do not know how each gate will perform its own logic operation. Those details will be included by each individual gate that is added to the hierarchy. This is a very powerful idea in object-oriented programming. We are writing a method that will use code that does not exist yet. The parameter <code>self</code> is a reference to the actual gate object invoking the method. Any new logic gate that gets added to the hierarchy will simply need to implement the <code>perform_gate_logic</code> function and it will be used at the appropriate time. Once done, the gate can provide its output value. This ability to extend a hierarchy that currently exists and provide the specific functions that the hierarchy needs to use the new class is extremely important for reusing existing code.</p> <p>We categorized the logic gates based on the number of input lines, as shown in <code>Figure 11</code>: the AND gate and OR gate both have two input lines, whereas the NOT gate has only one. <code>LogicGate</code> has two subclasses: <code>BinaryGate</code>, which will add two input lines, and <code>UnaryGate</code>, which will have only a single input line.</p> <p>In computer circuit design, these lines are sometimes called pins, so we will use that terminology in our implementation.</p> <p><code>Listing 9</code> and <code>Listing 10</code> implement these two classes. The constructors in both of these classes start with an explicit call to the constructor of the parent class using the parent's <code>__init__</code> method. When creating an instance of the <code>BinaryGate</code> class, we first want to initialize any data items that are inherited from <code>LogicGate</code>. In this case, that means the label for the gate. The constructor then goes on to add the two input lines (<code>pin_a</code> and <code>pin_b</code>). This is a very common pattern that you should always use when building class hierarchies. Child class constructors need to call parent class constructors and then move on to their own distinguishing data.</p> <p>Listing 9</p> <pre><code>class BinaryGate(LogicGate):\n    def __init__(self, lbl):\n        LogicGate.__init__(self, lbl)\n        self.pin_a = None\n        self.pin_b = None\n\n    def get_pin_a(self):\n        return int(input(f\"Enter pin A input for gate \\\n            {self.get_label()}: \"))\n\n    def get_pin_b(self):\n        return int(input(f\"Enter pin B input for gate \\\n            {self.get_label()}: \"))\n</code></pre> <p>Listing 10</p> <pre><code>class UnaryGate(LogicGate):\n    def __init__(self, lbl):\n        LogicGate.__init__(self, lbl)\n        self.pin = None\n\n    def get_pin(self):\n        return int(input(f\"Enter pin input for gate \\\n            {self.get_label()}: \"))\n</code></pre> <p>Python also has a function called <code>super</code> which can be used in place of explicitly naming the parent class.  This is a more general mechanism and is widely used, especially when a class has more than one parent. In our example above, <code>LogicGate.__init__(self, lbl)</code> could be replaced with <code>super().__init__(lbl)</code>, <code>super(UnaryGate, self).__init__(lbl)</code>, or <code>super().__init__(\"UnaryGate\", lbl)</code>. The specific details are beyond the scope of this text.</p> <p>The only behavior that the <code>BinaryGate</code> class adds is the ability to get the values from the two input lines. Since these values come from some external place, we will simply ask the user to provide them via an input statement. The same implementation occurs for the <code>UnaryGate</code> class except that there is only one input line.</p> <p>Now that we have a general class for gates depending on the number of input lines, we can build specific gates that have unique behavior. For example, the <code>AndGate</code> class will be a subclass of <code>BinaryGate</code> since AND gates have two input lines. As before, the first line of the constructor calls upon the parent class constructor (<code>BinaryGate</code>), which in turn calls its parent class constructor (<code>LogicGate</code>). Note that the <code>AndGate</code> class does not provide any new data since it inherits two input lines, one output line, and a label.</p> <p>The only thing <code>AndGate</code> needs to add is the specific behavior that performs the Boolean operation that was described earlier. This is the place where we can provide the <code>perform_gate_logic</code> method. For an AND gate, this method first must get the two input values and then only return 1 if both input values are 1. The complete class is shown in <code>Listing 11</code>.</p> <p>Listing 11</p> <pre><code>class AndGate(BinaryGate):\n    def __init__(self, lbl):\n        super().__init__(lbl)\n\n    def perform_gate_logic(self):\n        a = self.get_pin_a()\n        b = self.get_pin_b()\n        if a == 1 and b == 1:\n            return 1\n        else:\n            return 0\n</code></pre> <p>We can show the <code>AndGate</code> class in action by creating an instance and asking it to compute its output. The following session shows an <code>AndGate</code> object, <code>g1</code>, that has an internal label <code>\"G1\"</code>. When we invoke the <code>get_output</code> method, the object must first call its <code>perform_gate_logic</code> method which in turn queries the two input lines. Once the values are provided, the correct output is shown.</p> <pre><code>&gt;&gt;&gt; g1 = AndGate(\"G1\")\n&gt;&gt;&gt; g1.get_output()\nEnter pin A input for gate G1: 1\nEnter pin B input for gate G1: 0\n0\n</code></pre> <p>The same development can be done for OR gates and NOT gates. The <code>OrGate</code> class will also be a subclass of <code>BinaryGate</code> and the <code>NotGate</code> class will extend the <code>UnaryGate</code> class. Both of these classes will need to provide their own <code>perform_gate_logic</code> functions, as this is their specific behavior.</p> <p>We can use a single gate by first constructing an instance of one of the gate classes and then asking the gate for its output (which will in turn need inputs to be provided). For example:</p> <pre><code>&gt;&gt;&gt; g2 = OrGate(\"G2\")\n&gt;&gt;&gt; g2.get_output()\nEnter pin A input for gate G2: 1\nEnter pin B input for gate G2: 1\n1\n&gt;&gt;&gt; g2.get_output()\nEnter pin A input for gate G2: 0\nEnter pin B input for gate G2: 0\n0\n&gt;&gt;&gt; g3 = NotGate(\"G3\")\n&gt;&gt;&gt; g3.get_output()\nEnter pin input for gate G3: 0\n1\n</code></pre> <p>Now that we have the basic gates working, we can turn our attention to building circuits. In order to create a circuit, we need to connect gates together, the output of one flowing into the input of another. To do this, we will implement a new class called <code>Connector</code>.</p> <p>The <code>Connector</code> class will not reside in the gate hierarchy. It will, however, use the gate hierarchy in that each connector will have two gates, one on either end (see <code>Figure 12</code>). This relationship is very important in object-oriented programming. It is called the Has-a relationship. Recall earlier that we used the phrase Is-a relationship to say that a child class is related to a parent class, for example <code>UnaryGate</code> Is-a <code>LogicGate</code>.</p> <p> Figure 12: A Connector Connects the Output of One Gate to the Input of Another </p> <p>Now, with the <code>Connector</code> class, we say that a <code>Connector</code> Has-a <code>LogicGate</code>, meaning that connectors will have instances of the <code>LogicGate</code> class within them but are not part of the hierarchy. When designing classes, it is very important to distinguish between those that have the Is-a relationship (which requires inheritance) and those that have Has-a relationships (with no inheritance).</p> <p><code>Listing 12</code> shows the <code>Connector</code> class. The two gate instances within each connector object will be referred to as the <code>from_gate</code> and the <code>to_gate</code>, recognizing that data values will flow from the output of one gate into an input line of the next. The call to <code>set_next_pin</code> is very important for making connections (see <code>Listing 13</code>). We need to add this method to our gate classes so that each <code>to_gate</code> can choose the proper input line for the connection.</p> <p>Listing 12</p> <pre><code>class Connector:\n    def __init__(self, fgate, tgate):\n        self.from_gate = fgate\n        self.to_gate = tgate\n\n        tgate.set_next_pin(self)\n\n    def get_from(self):\n        return self.from_gate\n\n    def get_to(self):\n        return self.to_gate\n</code></pre> <p>Listing 13</p> <pre><code>def set_next_pin(self, source):\n    if self.pin_a == None:\n        self.pin_a = source\n    else:\n        if self.pin_b == None:\n            self.pin_b = source\n        else:\n            raise RuntimeError(\"Error: NO EMPTY PINS\")\n</code></pre> <p>In the <code>BinaryGate</code> class, for gates with two possible input lines, the connector must be connected to only one line. If both of them are available, we will choose <code>pin_a</code> by default. If <code>pin_a</code> is already connected, then we will choose <code>pin_b</code>. It is not possible to connect to a gate with no available input lines.</p> <p>Now it is possible to get input from two places: externally, as before, and from the output of a gate that is connected to that input line. This requires a change to the <code>get_pin_a</code> and <code>get_pin_b</code> methods (see <code>Listing 14</code>). If the input line is not connected to anything (<code>None</code>), then ask the user externally as before. However, if there is a connection, the connection is accessed and <code>from_gate</code>\u2019s output value is retrieved. This in turn causes that gate to process its logic. This continues until all input is available and the final output value becomes the required input for the gate in question. In a sense, the circuit works backwards to find the input necessary to finally produce output.</p> <p>Listing 14</p> <pre><code>def get_pin_a(self):\n    if self.pin_a == None:\n        return input(\n            f\"Enter pin A input for gate \\\n            {self.get_label()}: \"\n        )\n    else:\n        return self.pin_a.get_from().get_output()\n</code></pre> <p>The following fragment constructs the circuit shown earlier in the section:</p> <pre><code>&gt;&gt;&gt; g1 = AndGate(\"G1\")\n&gt;&gt;&gt; g2 = AndGate(\"G2\")\n&gt;&gt;&gt; g3 = OrGate(\"G3\")\n&gt;&gt;&gt; g4 = NotGate(\"G4\")\n&gt;&gt;&gt; c1 = Connector(g1, g3)\n&gt;&gt;&gt; c2 = Connector(g2, g3)\n&gt;&gt;&gt; c3 = Connector(g3, g4)\n</code></pre> <p>The outputs from the two AND gates (<code>g1</code> and <code>g2</code>) are connected to the OR gate (<code>g3</code>) and that output is connected to the NOT gate (<code>g4</code>). The output from the NOT gate is the output of the entire circuit. For example:</p> <pre><code>&gt;&gt;&gt; g4.get_output()\nEnter pin A input for gate G1: 0\nEnter pin B input for gate G1: 1\nEnter pin A input for gate G2: 1\nEnter pin B input for gate G2: 1\n0\n</code></pre> <p>Try it yourself using ActiveCode 4.</p> The Complete Circuit Program.<pre><code>class LogicGate:\n\n    def __init__(self, lbl):\n        self.name = lbl\n        self.output = None\n\n    def get_label(self):\n        return self.name\n\n    def get_output(self):\n        self.output = self.perform_gate_logic()\n        return self.output\n\n\nclass BinaryGate(LogicGate):\n\n    def __init__(self, lbl):\n        super(BinaryGate, self).__init__(lbl)\n\n        self.pin_a = None\n        self.pin_b = None\n\n    def get_pin_a(self):\n        if self.pin_a == None:\n            return int(input(\"Enter pin A input for gate \" + self.get_label() + \": \"))\n        else:\n            return self.pin_a.get_from().get_output()\n\n    def get_pin_b(self):\n        if self.pin_b == None:\n            return int(input(\"Enter pin B input for gate \" + self.get_label() + \": \"))\n        else:\n            return self.pin_b.get_from().get_output()\n\n    def set_next_pin(self, source):\n        if self.pin_a == None:\n            self.pin_a = source\n        else:\n            if self.pin_b == None:\n                self.pin_b = source\n            else:\n                print(\"Cannot Connect: NO EMPTY PINS on this gate\")\n\n\nclass AndGate(BinaryGate):\n\n    def __init__(self, lbl):\n        BinaryGate.__init__(self, lbl)\n\n    def perform_gate_logic(self):\n\n        a = self.get_pin_a()\n        b = self.get_pin_b()\n        if a == 1 and b == 1:\n            return 1\n        else:\n            return 0\n\nclass OrGate(BinaryGate):\n\n    def __init__(self, lbl):\n        BinaryGate.__init__(self, lbl)\n\n    def perform_gate_logic(self):\n\n        a = self.get_pin_a()\n        b = self.get_pin_b()\n        if a == 1 or b == 1:\n            return 1\n        else:\n            return 0\n\nclass UnaryGate(LogicGate):\n\n    def __init__(self, lbl):\n        LogicGate.__init__(self, lbl)\n\n        self.pin = None\n\n    def get_pin(self):\n        if self.pin == None:\n            return int(input(\"Enter pin input for gate \" + self.get_label() + \": \"))\n        else:\n            return self.pin.get_from().get_output()\n\n    def set_next_pin(self, source):\n        if self.pin == None:\n            self.pin = source\n        else:\n            print(\"Cannot Connect: NO EMPTY PINS on this gate\")\n\n\nclass NotGate(UnaryGate):\n\n    def __init__(self, lbl):\n        UnaryGate.__init__(self, lbl)\n\n    def perform_gate_logic(self):\n        if self.get_pin():\n            return 0\n        else:\n            return 1\n\n\nclass Connector:\n\n    def __init__(self, fgate, tgate):\n        self.from_gate = fgate\n        self.to_gate = tgate\n\n        tgate.set_next_pin(self)\n\n    def get_from(self):\n        return self.from_gate\n\n    def get_to(self):\n        return self.to_gate\n\n\ndef main():\n    g1 = AndGate(\"G1\")\n    g2 = AndGate(\"G2\")\n    g3 = OrGate(\"G3\")\n    g4 = NotGate(\"G4\")\n    c1 = Connector(g1, g3)\n    c2 = Connector(g2, g3)\n    c3 = Connector(g3, g4)\n    print(g4.get_output())\n\nmain()\n</code></pre> <p>Self Check</p> <p>Create a two new gate classes,  one called NorGate the other called NandGate.  NandGates work like AndGates that have a Not attached to the output.  NorGates work lake OrGates that have a Not attached to the output.</p> <p>Create a series of gates that prove the following equality NOT (( A and B) or (C and D)) is that same as NOT( A and B ) and NOT (C and D).  Make sure to use some of your new gates in the simulation.</p> self_check_5<pre><code>class LogicGate:\n\n    def __init__(self,n):\n        self.name = n\n        self.output = None\n\n    def get_label(self):\n        return self.name\n\n    def get_output(self):\n        self.output = self.perform_gate_logic()\n        return self.output\n\n\nclass BinaryGate(LogicGate):\n\n    def __init__(self,n):\n        LogicGate.__init__(self,n)\n\n        self.pin_a = None\n        self.pin_b = None\n\n    def get_pin_a(self):\n        if self.pin_a == None:\n            return int(input(\"Enter Pin A input for gate \"+self.get_label()+\"--&gt;\"))\n        else:\n            return self.pin_a.get_from().get_output()\n\n    def get_pin_b(self):\n        if self.pin_b == None:\n            return int(input(\"Enter Pin B input for gate \"+self.get_label()+\"--&gt;\"))\n        else:\n            return self.pin_b.get_from().get_output()\n\n    def set_next_pin(self,source):\n        if self.pin_a == None:\n            self.pin_a = source\n        else:\n            if self.pin_b == None:\n                self.pin_b = source\n            else:\n                print(\"Cannot Connect: NO EMPTY PINS on this gate\")\n\n\nclass AndGate(BinaryGate):\n\n    def __init__(self,n):\n        BinaryGate.__init__(self,n)\n\n    def perform_gate_logic(self):\n\n        a = self.get_pin_a()\n        b = self.get_pin_b()\n        if a==1 and b==1:\n            return 1\n        else:\n            return 0\n\nclass OrGate(BinaryGate):\n\n    def __init__(self,n):\n        BinaryGate.__init__(self,n)\n\n    def perform_gate_logic(self):\n\n        a = self.get_pin_a()\n        b = self.get_pin_b()\n        if a ==1 or b==1:\n            return 1\n        else:\n            return 0\n\nclass UnaryGate(LogicGate):\n\n    def __init__(self,n):\n        LogicGate.__init__(self,n)\n\n        self.pin = None\n\n    def get_pin(self):\n        if self.pin == None:\n            return int(input(\"Enter Pin input for gate \"+self.get_label()+\"--&gt;\"))\n        else:\n            return self.pin.get_from().get_output()\n\n    def set_next_pin(self,source):\n        if self.pin == None:\n            self.pin = source\n        else:\n            print(\"Cannot Connect: NO EMPTY PINS on this gate\")\n\n\nclass NotGate(UnaryGate):\n\n    def __init__(self,n):\n        UnaryGate.__init__(self,n)\n\n    def perform_gate_logic(self):\n        if self.get_pin():\n            return 0\n        else:\n            return 1\n\n\nclass Connector:\n\n    def __init__(self, fgate, tgate):\n        self.from_gate = fgate\n        self.to_gate = tgate\n\n        tgate.set_next_pin(self)\n\n    def get_from(self):\n        return self.from_gate\n\n    def get_to(self):\n        return self.to_gate\n\n\n\ndef main():\n    g1 = AndGate(\"G1\")\n\n    print(g1.get_output())\n\nmain()\n</code></pre> <p></p> <p>Self  Check Challenge</p> <p>One of the fundamental building blocks of a computer is something called a flip flop.  It's not something that computer science professors wear on their feet, but rather a kind of circuit that is stable and stores the last piece of data that was put on it.  A simple flip-flop can be made from two NOR gates that are tied together as in the following diagram.</p> <p></p> <p>This is a challenge problem because the entire Note if the initial inputs to Reset and Set are both 0 then the output of the flip-flop is 0.  But if the Set input is toggled to 1 then the output becomes 1.  The great thing is that when the set input goes to 0 the output stays 1, until the reset input is toggled to 1 which resets the output of the circuit back to zero.</p>"},{"location":"c1/s14/","title":"1.14. \u603b\u7ed3","text":"<p>1.14. Summary</p> \u4e2d\u6587\u82f1\u6587 <ul> <li>\u8ba1\u7b97\u673a\u79d1\u5b66\u662f\u89e3\u51b3\u95ee\u9898\u7684\u7814\u7a76\u3002</li> <li>\u8ba1\u7b97\u673a\u79d1\u5b66\u4f7f\u7528\u62bd\u8c61\u4f5c\u4e3a\u8868\u793a\u8fc7\u7a0b\u548c\u6570\u636e\u7684\u5de5\u5177\u3002</li> <li>\u62bd\u8c61\u6570\u636e\u7c7b\u578b\u5141\u8bb8\u7a0b\u5e8f\u5458\u901a\u8fc7\u9690\u85cf\u6570\u636e\u7684\u7ec6\u8282\u6765\u7ba1\u7406\u95ee\u9898\u57df\u7684\u590d\u6742\u6027\u3002</li> <li>Python \u662f\u4e00\u79cd\u529f\u80fd\u5f3a\u5927\u4e14\u6613\u4e8e\u4f7f\u7528\u7684\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\u3002</li> <li>\u5217\u8868\u3001\u5143\u7ec4\u548c\u5b57\u7b26\u4e32\u662f\u5728 Python \u987a\u5e8f\u96c6\u5408\u4e2d\u6784\u5efa\u7684\u3002</li> <li>\u5b57\u5178\u548c\u96c6\u5408\u662f\u975e\u987a\u5e8f\u7684\u6570\u636e\u96c6\u5408\u3002</li> <li>\u7c7b\u5141\u8bb8\u7a0b\u5e8f\u5458\u5b9e\u73b0\u62bd\u8c61\u6570\u636e\u7c7b\u578b\u3002</li> <li>\u7a0b\u5e8f\u5458\u53ef\u4ee5\u91cd\u5199\u6807\u51c6\u65b9\u6cd5\u4ee5\u53ca\u521b\u5efa\u65b0\u65b9\u6cd5\u3002</li> <li>\u7c7b\u53ef\u4ee5\u7ec4\u7ec7\u6210\u5c42\u6b21\u7ed3\u6784\u3002</li> <li>\u7c7b\u6784\u9020\u51fd\u6570\u5e94\u59cb\u7ec8\u8c03\u7528\u5176\u7236\u7c7b\u7684\u6784\u9020\u51fd\u6570\uff0c\u7136\u540e\u518d\u7ee7\u7eed\u5904\u7406\u81ea\u5df1\u7684\u6570\u636e\u548c\u884c\u4e3a\u3002</li> </ul> <ul> <li>Computer science is the study of problem solving.</li> <li>Computer science uses abstraction as a tool for representing both processes and data.</li> <li>Abstract data types allow programmers to manage the complexity of a problem domain by hiding the details of the data.</li> <li>Python is a powerful, yet easy-to-use, object-oriented language.</li> <li>Lists, tuples, and strings are built in Python sequential collections.</li> <li>Dictionaries and sets are nonsequential collections of data.</li> <li>Classes allow programmers to implement abstract data types.</li> <li>Programmers can override standard methods as well as create new methods.</li> <li>Classes can be organized into hierarchies.</li> <li>A class constructor should always invoke the constructor of its parent before continuing on with its own data and behavior. </li> </ul>"},{"location":"c1/s15/","title":"1.15. \u5173\u952e\u672f\u8bed","text":"<p>1.15. Key Terms</p> \u4e2d\u6587\u82f1\u6587 - - - abstract data type (ADT) formatted strings override abstraction Has-a relationship procedural abstraction algorithm implementation-independent programming class information hiding prompt computable inheritance <code>self</code> data abstraction inheritance hierarchy set data structure interface shallow equality data type Is-a relationship simulation deep equality list string dictionary list comprehension subclass encapsulation method superclass exception mutability truth table f-string object tuple format operator - - - abstract data type (ADT) formatted strings override abstraction Has-a relationship procedural abstraction algorithm implementation-independent programming class information hiding prompt computable inheritance <code>self</code> data abstraction inheritance hierarchy set data structure interface shallow equality data type Is-a relationship simulation deep equality list string dictionary list comprehension subclass encapsulation method superclass exception mutability truth table f-string object tuple format operator"},{"location":"c1/s16/","title":"1.16. \u7ec3\u4e60","text":"<p>1.16. Exercises</p> \u4e2d\u6587\u82f1\u6587 <ol> <li>\u4e3a\u5927\u5b66\u6821\u56ed\u91cc\u7684\u4eba\u4eec\u6784\u5efa\u4e00\u4e2a\u9636\u7ea7\u5c42\u6b21\u7ed3\u6784\u3002 \u5305\u62ec\u6559\u5e08\u3001\u804c\u5458\u548c\u5b66\u751f\u3002 \u4ed6\u4eec\u6709\u4ec0\u4e48\u5171\u540c\u70b9\uff1f \u5b83\u4eec\u6709\u4f55\u4e0d\u540c\uff1f</li> <li>\u6784\u5efa\u94f6\u884c\u5e10\u6237\u7684\u7c7b\u5c42\u6b21\u7ed3\u6784\u3002</li> <li>\u4e3a\u4e0d\u540c\u7c7b\u578b\u7684\u8ba1\u7b97\u673a\u6784\u5efa\u7c7b\u5c42\u6b21\u7ed3\u6784\u3002</li> <li>\u4f7f\u7528\u672c\u7ae0\u4e2d\u63d0\u4f9b\u7684\u7c7b\uff0c\u4ea4\u4e92\u5f0f\u5730\u6784\u5efa\u7535\u8def\u5e76\u5bf9\u5176\u8fdb\u884c\u6d4b\u8bd5\u3002</li> <li>\u5b9e\u73b0\u7b80\u5355\u7684\u65b9\u6cd5\u201cget_num\u201d\u548c\u201cget_den\u201d\uff0c\u5b83\u4eec\u5c06\u8fd4\u56de\u5206\u6570\u7684\u5206\u5b50\u548c\u5206\u6bcd\u3002</li> <li>\u4ece\u5f88\u591a\u65b9\u9762\u6765\u8bf4\uff0c\u5982\u679c\u6240\u6709\u5206\u6570\u4ece\u4e00\u5f00\u59cb\u5c31\u4fdd\u6301\u6700\u4f4e\u7684\u6c34\u5e73\u4f1a\u66f4\u597d\u3002 \u4fee\u6539\u201cFraction\u201d\u7c7b\u7684\u6784\u9020\u51fd\u6570\uff0c\u4ee5\u4fbf\u4f7f\u7528\u201cGCD\u201d\u7acb\u5373\u51cf\u5c11\u5206\u6570\u3002 \u8bf7\u6ce8\u610f\uff0c\u8fd9\u610f\u5473\u7740 <code>__add__</code> \u51fd\u6570\u4e0d\u518d\u9700\u8981\u5f52\u7ea6\u3002 \u8fdb\u884c\u5fc5\u8981\u7684\u4fee\u6539\u3002</li> <li>\u5b9e\u73b0\u5269\u4f59\u7684\u7b80\u5355\u7b97\u672f\u8fd0\u7b97\u7b26\uff08<code>__sub__</code>\u3001<code>__mul__</code> \u548c<code>__truediv__</code>\uff09\u3002</li> <li>\u5b9e\u73b0\u5269\u4f59\u7684\u5173\u7cfb\u8fd0\u7b97\u7b26\uff08<code>__gt__</code>\u3001<code>__ge__</code>\u3001<code>__lt__</code>\u3001<code>__le__</code> \u548c <code>__ne__</code>\uff09\u3002</li> <li>\u4fee\u6539\u5206\u6570\u7c7b\u7684\u6784\u9020\u51fd\u6570\uff0c\u4ee5\u4fbf\u5b83\u68c0\u67e5\u4ee5\u786e\u4fdd\u5206\u5b50\u548c\u5206\u6bcd\u90fd\u662f\u6574\u6570\u3002 \u5982\u679c\u5176\u4e2d\u4e00\u4e2a\u4e0d\u662f\u6574\u6570\uff0c\u6784\u9020\u51fd\u6570\u5e94\u8be5\u5f15\u53d1\u5f02\u5e38\u3002</li> <li>\u5728\u5206\u6570\u7684\u5b9a\u4e49\u4e2d\uff0c\u6211\u4eec\u5047\u8bbe\u8d1f\u5206\u6570\u5177\u6709\u8d1f\u5206\u5b50\u548c\u6b63\u5206\u6bcd\u3002 \u4f7f\u7528\u8d1f\u5206\u6bcd\u4f1a\u5bfc\u81f4\u67d0\u4e9b\u5173\u7cfb\u8fd0\u7b97\u7b26\u7ed9\u51fa\u4e0d\u6b63\u786e\u7684\u7ed3\u679c\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u8fd9\u662f\u4e00\u4e2a\u4e0d\u5fc5\u8981\u7684\u9650\u5236\u3002 \u4fee\u6539\u6784\u9020\u51fd\u6570\u4ee5\u5141\u8bb8\u7528\u6237\u4f20\u9012\u8d1f\u5206\u6bcd\uff0c\u4ee5\u4fbf\u6240\u6709\u8fd0\u7b97\u7b26\u7ee7\u7eed\u6b63\u5e38\u5de5\u4f5c\u3002</li> <li>\u7814\u7a76<code>__radd__</code>\u65b9\u6cd5\u3002 \u5b83\u4e0e <code>__add__</code> \u6709\u4f55\u4e0d\u540c\uff1f \u4ec0\u4e48\u65f6\u5019\u4f7f\u7528\uff1f \u5b9e\u73b0<code>__radd__</code>\u3002</li> <li>\u91cd\u590d\u4e0a\u4e00\u4e2a\u95ee\u9898\uff0c\u4f46\u8fd9\u6b21\u8003\u8651<code>__iadd__</code>\u65b9\u6cd5\u3002</li> <li>\u7814\u7a76<code>__repr__</code>\u65b9\u6cd5\u3002 \u5b83\u4e0e <code>__str__</code> \u6709\u4f55\u4e0d\u540c\uff1f \u4ec0\u4e48\u65f6\u5019\u4f7f\u7528\uff1f \u5b9e\u73b0<code>__repr__</code>\u3002</li> <li>\u7814\u7a76\u73b0\u6709\u7684\u5176\u4ed6\u7c7b\u578b\u7684\u95e8\uff08\u4f8b\u5982 NAND\u3001NOR \u548c XOR\uff09\u3002 \u5c06\u5b83\u4eec\u6dfb\u52a0\u5230\u7535\u8def\u5c42\u6b21\u7ed3\u6784\u4e2d\u3002 \u60a8\u9700\u8981\u505a\u591a\u5c11\u989d\u5916\u7684\u7f16\u7801\uff1f</li> <li>\u6700\u7b80\u5355\u7684\u7b97\u672f\u7535\u8def\u79f0\u4e3a\u534a\u52a0\u5668\u3002 \u7814\u7a76\u7b80\u5355\u7684\u534a\u52a0\u5668\u7535\u8def\u3002 \u5b9e\u73b0\u8be5\u7535\u8def\u3002</li> <li>\u73b0\u5728\u6269\u5c55\u8be5\u7535\u8def\u5e76\u5b9e\u73b0\u4e00\u4e2a 8 \u4f4d\u5168\u52a0\u5668\u3002</li> <li>\u672c\u7ae0\u6240\u793a\u7684\u7535\u8def\u4eff\u771f\u662f\u53cd\u5411\u5de5\u4f5c\u7684\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u7535\u8def\uff0c\u8f93\u51fa\u662f\u901a\u8fc7\u8f93\u5165\u503c\u8fdb\u884c\u53cd\u5411\u5904\u7406\u800c\u4ea7\u751f\u7684\uff0c\u8fd9\u53cd\u8fc7\u6765\u53c8\u5bfc\u81f4\u5176\u4ed6\u8f93\u51fa\u88ab\u67e5\u8be2\u3002 \u8fd9\u4e00\u76f4\u6301\u7eed\u5230\u627e\u5230\u5916\u90e8\u8f93\u5165\u7ebf\u4e3a\u6b62\uff0c\u6b64\u65f6\u7cfb\u7edf\u4f1a\u8981\u6c42\u7528\u6237\u8f93\u5165\u503c\u3002 \u4fee\u6539\u5b9e\u73b0\uff0c\u4f7f\u52a8\u4f5c\u671d\u7740\u6b63\u5411\u65b9\u5411\u8fdb\u884c\uff1b \u63a5\u6536\u8f93\u5165\u540e\uff0c\u7535\u8def\u4ea7\u751f\u8f93\u51fa\u3002</li> <li>\u8bbe\u8ba1\u4e00\u4e2a\u7c7b\u6765\u4ee3\u8868\u4e00\u5f20\u6251\u514b\u724c\uff0c\u53e6\u4e00\u4e2a\u7c7b\u6765\u4ee3\u8868\u4e00\u526f\u7eb8\u724c\u3002 \u4f7f\u7528\u8fd9\u4e24\u4e2a\u7c7b\uff0c\u5b9e\u73b0\u60a8\u6700\u559c\u6b22\u7684\u7eb8\u724c\u6e38\u620f\u3002</li> <li>\u5728\u7ebf\u6216\u5728\u5f53\u5730\u62a5\u7eb8\u4e0a\u67e5\u627e\u6570\u72ec\u8c1c\u9898\u3002 \u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\u6765\u89e3\u51b3\u8fd9\u4e2a\u96be\u9898\u3002</li> </ol> <ol> <li>Construct a class hierarchy for people on a college campus. Include faculty, staff, and students. What do they have in common? What distinguishes them from one another?</li> <li>Construct a class hierarchy for bank accounts.</li> <li>Construct a class hierarchy for different types of computers.</li> <li>Using the classes provided in the chapter, interactively construct a circuit and test it.</li> <li>Implement the simple methods <code>get_num</code> and <code>get_den</code> that will return the numerator and denominator of a fraction.</li> <li>In many ways it would be better if all fractions were maintained in lowest terms right from the start. Modify the constructor for the <code>Fraction</code> class so that <code>GCD</code> is used to reduce fractions immediately. Notice that this means the <code>__add__</code> function no longer needs to reduce. Make the necessary modifications.</li> <li>Implement the remaining simple arithmetic operators (<code>__sub__</code>, <code>__mul__</code>, and <code>__truediv__</code>).</li> <li>Implement the remaining relational operators (<code>__gt__</code>, <code>__ge__</code>, <code>__lt__</code>, <code>__le__</code>, and <code>__ne__</code>).</li> <li>Modify the constructor for the fraction class so that it checks to make sure that the numerator and denominator are both integers. If either is not an integer, the constructor should raise an exception.</li> <li>In the definition of fractions we assumed that negative fractions have a negative numerator and a positive denominator. Using a negative denominator would cause some of the relational operators to give incorrect results. In general, this is an unnecessary constraint. Modify the constructor to allow the user to pass a negative denominator so that all of the operators continue to work properly.</li> <li>Research the <code>__radd__</code> method. How does it differ from <code>__add__</code>? When is it used? Implement <code>__radd__</code>.</li> <li>Repeat the last question but this time consider the <code>__iadd__</code> method.</li> <li>Research the <code>__repr__</code> method. How does it differ from <code>__str__</code>? When is it used? Implement <code>__repr__</code>.</li> <li>Research other types of gates that exist (such as NAND, NOR, and XOR). Add them to the circuit hierarchy. How much additional coding did you need to do?</li> <li>The most simple arithmetic circuit is known as the half adder. Research the simple half-adder circuit. Implement this circuit.</li> <li>Now extend that circuit and implement an 8-bit full adder.</li> <li>The circuit simulation shown in this chapter works in a backward direction. In other words, given a circuit, the output is produced by working back through the input values, which in turn cause other outputs to be queried. This continues until external input lines are found, at which point the user is asked for values. Modify the implementation so that the action is in the forward direction; upon receiving inputs the circuit produces an output.</li> <li>Design a class to represent a playing card and another one to represent a deck of cards. Using these two classes, implement your favorite card game.</li> <li>Find a Sudoku puzzle online or in the local newspaper. Write a program to solve the puzzle.</li> </ol>"},{"location":"c1/s2/","title":"1.2. \u5165\u95e8","text":"<p>1.2. Getting Started</p> \u4e2d\u6587\u82f1\u6587 <p>\u81ea\u4ece\u7b2c\u4e00\u53f0\u7535\u5b50\u8ba1\u7b97\u673a\u9700\u8981\u8df3\u7ebf\u548c\u5f00\u5173\u6765\u5c06\u6307\u4ee4\u4ece\u4eba\u4f20\u9012\u5230\u673a\u5668\u4ee5\u6765\uff0c\u591a\u5e74\u6765\u6211\u4eec\u5bf9\u7f16\u7a0b\u7684\u601d\u8003\u65b9\u5f0f\u5df2\u7ecf\u53d1\u751f\u4e86\u8bb8\u591a\u53d8\u5316\u3002 \u4e0e\u793e\u4f1a\u8bb8\u591a\u65b9\u9762\u7684\u60c5\u51b5\u4e00\u6837\uff0c\u8ba1\u7b97\u6280\u672f\u7684\u53d8\u5316\u4e3a\u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6\u63d0\u4f9b\u4e86\u8d8a\u6765\u8d8a\u591a\u7684\u5de5\u5177\u548c\u5e73\u53f0\u6765\u5b9e\u8df5\u4ed6\u4eec\u7684\u6280\u80fd\u3002 \u66f4\u5feb\u7684\u5904\u7406\u5668\u3001\u9ad8\u901f\u7f51\u7edc\u548c\u5927\u5bb9\u91cf\u5185\u5b58\u7b49\u8fdb\u6b65\u5df2\u7ecf\u9020\u6210\u4e86\u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6\u5fc5\u987b\u5e94\u5bf9\u7684\u590d\u6742\u6027\u87ba\u65cb\u5f0f\u4e0a\u5347\u3002 \u5728\u6240\u6709\u8fd9\u4e9b\u5feb\u901f\u53d1\u5c55\u8fc7\u7a0b\u4e2d\uff0c\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u4e00\u4e2a\u57fa\u672c\u539f\u7406\u59cb\u7ec8\u4fdd\u6301\u4e0d\u53d8\uff1a\u5b83\u5173\u6ce8\u7684\u662f\u4f7f\u7528\u8ba1\u7b97\u673a\u6765\u89e3\u51b3\u95ee\u9898\u3002</p> <p>\u6beb\u65e0\u7591\u95ee\uff0c\u60a8\u82b1\u8d39\u4e86\u5927\u91cf\u65f6\u95f4\u5b66\u4e60\u89e3\u51b3\u95ee\u9898\u7684\u57fa\u7840\u77e5\u8bc6\uff0c\u5e76\u5e0c\u671b\u5bf9\u81ea\u5df1\u63d0\u51fa\u95ee\u9898\u5e76\u5236\u5b9a\u89e3\u51b3\u65b9\u6848\u7684\u80fd\u529b\u5145\u6ee1\u4fe1\u5fc3\u3002 \u60a8\u8fd8\u4e86\u89e3\u5230\uff0c\u7f16\u5199\u8ba1\u7b97\u673a\u7a0b\u5e8f\u901a\u5e38\u5f88\u56f0\u96be\u3002 \u5927\u95ee\u9898\u7684\u590d\u6742\u6027\u4ee5\u53ca\u76f8\u5e94\u7684\u89e3\u51b3\u65b9\u6848\u7684\u590d\u6742\u6027\u5f80\u5f80\u4f1a\u63a9\u76d6\u4e0e\u95ee\u9898\u89e3\u51b3\u8fc7\u7a0b\u76f8\u5173\u7684\u57fa\u672c\u601d\u60f3\u3002</p> <p>\u672c\u7ae0\u5f3a\u8c03\u4e86\u6587\u672c\u5176\u4f59\u90e8\u5206\u7684\u4e24\u4e2a\u91cd\u8981\u9886\u57df\u3002 \u9996\u5148\uff0c\u6211\u4eec\u5c06\u56de\u987e\u8ba1\u7b97\u673a\u79d1\u5b66\u4ee5\u53ca\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u7814\u7a76\u5fc5\u987b\u9002\u5e94\u7684\u6846\u67b6\u3002 \u7279\u522b\u662f\uff0c\u6211\u4eec\u5c06\u63a2\u8ba8\u6211\u4eec\u9700\u8981\u7814\u7a76\u8fd9\u4e9b\u4e3b\u9898\u7684\u539f\u56e0\u4ee5\u53ca\u7406\u89e3\u8fd9\u4e9b\u4e3b\u9898\u5982\u4f55\u5e2e\u52a9\u6211\u4eec\u6210\u4e3a\u66f4\u597d\u7684\u95ee\u9898\u89e3\u51b3\u8005\u3002 \u5176\u6b21\uff0c\u6211\u4eec\u5c06\u56de\u987e\u4e00\u4e0b Python \u7f16\u7a0b\u8bed\u8a00\u3002 \u5c3d\u7ba1\u6211\u4eec\u65e0\u6cd5\u63d0\u4f9b\u8be6\u7ec6\u3001\u8be6\u5c3d\u7684\u53c2\u8003\uff0c\u4f46\u6211\u4eec\u5c06\u4e3a\u5176\u4f59\u7ae0\u8282\u4e2d\u51fa\u73b0\u7684\u57fa\u672c\u7ed3\u6784\u548c\u60f3\u6cd5\u63d0\u4f9b\u793a\u4f8b\u548c\u89e3\u91ca\u3002</p> <p>The way we think about programming has undergone many changes in the years since the first electronic computers required patch cables and switches to convey instructions from human to machine. As is the case with many aspects of society, changes in computing technology provide computer scientists with a growing number of tools and platforms on which to practice their craft. Advances such as faster processors, high-speed networks, and large memory capacities have created a spiral of complexity through which computer scientists must navigate. Throughout all of this rapid evolution, a basic principle of computer science has remained constant: it is concerned with using computers to solve problems.</p> <p>You have no doubt spent considerable time learning the basics of problem-solving and hopefully feel confident in your ability to take a problem statement and develop a solution. You have also learned that writing computer programs is often hard. The complexity of large problems and the corresponding complexity of the solutions can tend to overshadow the fundamental ideas related to the problem-solving process.</p> <p>This chapter emphasizes two important areas for the rest of the text. First, we\u2019ll review the framework within which computer science and the study of algorithms and data structures must fit. In particular, we\u2019ll look at the reasons why we need to study these topics and how understanding these topics helps us to become better problem solvers. Second, we\u2019ll review the Python programming language. Although we cannot provide a detailed, exhaustive reference, we will give examples and explanations for the basic constructs and ideas that will occur throughout the remaining chapters.</p>"},{"location":"c1/s3/","title":"1.3. \u4ec0\u4e48\u662f\u8ba1\u7b97\u673a\u79d1\u5b66\uff1f","text":"<p>1.3. What Is Computer Science?</p> \u4e2d\u6587\u82f1\u6587 <p>\u8ba1\u7b97\u673a\u79d1\u5b66\u5f88\u96be\u5b9a\u4e49\u3002 \u8fd9\u53ef\u80fd\u662f\u7531\u4e8e\u540d\u79f0\u4e2d\u4e0d\u5e78\u4f7f\u7528\u4e86\u201c\u8ba1\u7b97\u673a\u201d\u4e00\u8bcd\u3002 \u6b63\u5982\u60a8\u53ef\u80fd\u77e5\u9053\u7684\u90a3\u6837\uff0c\u8ba1\u7b97\u673a\u79d1\u5b66\u4e0d\u4ec5\u4ec5\u662f\u5bf9\u8ba1\u7b97\u673a\u7684\u7814\u7a76\u3002 \u5c3d\u7ba1\u8ba1\u7b97\u673a\u4f5c\u4e3a\u5de5\u5177\u5728\u8be5\u5b66\u79d1\u4e2d\u53d1\u6325\u7740\u91cd\u8981\u7684\u652f\u6301\u4f5c\u7528\uff0c\u4f46\u5b83\u4eec\u53ea\u662f -- \u5de5\u5177\u3002</p> <p>\u8ba1\u7b97\u673a\u79d1\u5b66\u662f\u5bf9\u95ee\u9898\u3001\u95ee\u9898\u89e3\u51b3\u4ee5\u53ca\u95ee\u9898\u89e3\u51b3\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u7684\u89e3\u51b3\u65b9\u6848\u7684\u7814\u7a76\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u95ee\u9898\uff0c\u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6\u7684\u76ee\u6807\u662f\u5f00\u53d1\u4e00\u79cd\u7b97\u6cd5\uff0c\u8fd9\u662f\u89e3\u51b3\u53ef\u80fd\u51fa\u73b0\u7684\u4efb\u4f55\u95ee\u9898\u5b9e\u4f8b\u7684\u9010\u6b65\u8bf4\u660e\u5217\u8868\u3002 \u7b97\u6cd5\u662f\u6709\u9650\u7684\u8fc7\u7a0b\uff0c\u5982\u679c\u9075\u5faa\u5b83\u5c31\u80fd\u89e3\u51b3\u95ee\u9898\u3002 \u7b97\u6cd5\u5c31\u662f\u89e3\u51b3\u65b9\u6848\u3002</p> <p>\u8ba1\u7b97\u673a\u79d1\u5b66\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u7b97\u6cd5\u7684\u7814\u7a76\u3002 \u7136\u800c\uff0c\u6211\u4eec\u5fc5\u987b\u5c0f\u5fc3\u5730\u627f\u8ba4\uff0c\u6709\u4e9b\u95ee\u9898\u53ef\u80fd\u6ca1\u6709\u89e3\u51b3\u65b9\u6848\u3002 \u867d\u7136\u8bc1\u660e\u8fd9\u4e00\u8bf4\u6cd5\u8d85\u51fa\u4e86\u672c\u6587\u7684\u8303\u56f4\uff0c\u4f46\u6709\u4e9b\u95ee\u9898\u65e0\u6cd5\u89e3\u51b3\u8fd9\u4e00\u4e8b\u5b9e\u5bf9\u4e8e\u7814\u7a76\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u4eba\u6765\u8bf4\u5f88\u91cd\u8981\u3002 \u90a3\u4e48\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5305\u62ec\u8fd9\u4e24\u79cd\u7c7b\u578b\u7684\u95ee\u9898\u6765\u5b8c\u6574\u5730\u5b9a\u4e49\u8ba1\u7b97\u673a\u79d1\u5b66\uff0c\u5e76\u6307\u51fa\u8ba1\u7b97\u673a\u79d1\u5b66\u662f\u5bf9\u95ee\u9898\u89e3\u51b3\u65b9\u6848\u7684\u7814\u7a76\u4ee5\u53ca\u5bf9\u65e0\u89e3\u51b3\u65b9\u6848\u7684\u95ee\u9898\u7684\u7814\u7a76\u3002</p> <p>\u5728\u63cf\u8ff0\u95ee\u9898\u548c\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5305\u542b \u53ef\u8ba1\u7b97 \u4e00\u8bcd\u4e5f\u5f88\u5e38\u89c1\u3002 \u5982\u679c\u5b58\u5728\u89e3\u51b3\u95ee\u9898\u7684\u7b97\u6cd5\uff0c\u6211\u4eec\u5c31\u8bf4\u95ee\u9898\u662f\u53ef\u8ba1\u7b97\u7684\u3002 \u90a3\u4e48\uff0c\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u53e6\u4e00\u79cd\u5b9a\u4e49\u662f\uff0c\u8ba1\u7b97\u673a\u79d1\u5b66\u662f\u5bf9\u53ef\u8ba1\u7b97\u548c\u4e0d\u53ef\u8ba1\u7b97\u95ee\u9898\u7684\u7814\u7a76\uff0c\u662f\u5bf9\u7b97\u6cd5\u5b58\u5728\u548c\u4e0d\u5b58\u5728\u7684\u7814\u7a76\u3002 \u65e0\u8bba\u5982\u4f55\uff0c\u60a8\u4f1a\u6ce8\u610f\u5230 \u8ba1\u7b97\u673a \u8fd9\u4e2a\u8bcd\u6839\u672c\u6ca1\u6709\u51fa\u73b0\u3002 \u89e3\u51b3\u65b9\u6848\u88ab\u8ba4\u4e3a\u72ec\u7acb\u4e8e\u673a\u5668\u3002</p> <p>\u8ba1\u7b97\u673a\u79d1\u5b66\uff0c\u56e0\u4e3a\u5b83\u6d89\u53ca\u95ee\u9898\u89e3\u51b3\u8fc7\u7a0b\u672c\u8eab\uff0c\u6240\u4ee5\u4e5f\u662f\u62bd\u8c61\u7684\u7814\u7a76\u3002 \u62bd\u8c61\u4f7f\u6211\u4eec\u80fd\u591f\u4ee5\u5206\u79bb\u6240\u8c13\u7684\u903b\u8f91\u548c\u7269\u7406\u89c6\u89d2\u7684\u65b9\u5f0f\u6765\u770b\u5f85\u95ee\u9898\u548c\u89e3\u51b3\u65b9\u6848\u3002 \u6211\u4eec\u5728\u4e00\u4e2a\u5e38\u89c1\u7684\u4f8b\u5b50\u4e2d\u719f\u6089\u5176\u57fa\u672c\u601d\u60f3\u3002</p> <p>\u8003\u8651\u4e00\u4e0b\u60a8\u4eca\u5929\u53ef\u80fd\u5f00\u7740\u7684\u8f66\u53bb\u5b66\u6821\u6216\u4e0a\u73ed\u3002 \u4f5c\u4e3a\u9a7e\u9a76\u5458\u3001\u8f66\u8f86\u7684\u7528\u6237\uff0c\u60a8\u9700\u8981\u8fdb\u884c\u67d0\u4e9b\u4ea4\u4e92\u624d\u80fd\u5c06\u6c7d\u8f66\u7528\u4e8e\u5176\u9884\u671f\u7528\u9014\u3002 \u60a8\u4e0a\u8f66\uff0c\u63d2\u5165\u94a5\u5319\uff0c\u542f\u52a8\u53d1\u52a8\u673a\uff0c\u6362\u6863\uff0c\u5236\u52a8\uff0c\u52a0\u901f\u548c\u8f6c\u5411\u4ee5\u8fdb\u884c\u9a7e\u9a76\u3002 \u4ece\u62bd\u8c61\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u6211\u4eec\u53ef\u4ee5\u8bf4\u4f60\u770b\u5230\u7684\u662f\u6c7d\u8f66\u7684\u903b\u8f91\u89c6\u89d2\u3002 \u60a8\u6b63\u5728\u4f7f\u7528\u8f66\u8f86\u8bbe\u8ba1\u8005\u63d0\u4f9b\u7684\u529f\u80fd\u6765\u5c06\u60a8\u4ece\u4e00\u4e2a\u5730\u70b9\u8fd0\u9001\u5230\u53e6\u4e00\u4e2a\u5730\u70b9\u3002 \u8fd9\u4e9b\u51fd\u6570\u6709\u65f6\u4e5f\u79f0\u4e3a\u63a5\u53e3\u3002</p> <p>\u53e6\u4e00\u65b9\u9762\uff0c\u5fc5\u987b\u4fee\u7406\u4f60\u7684\u6c7d\u8f66\u7684\u673a\u68b0\u5e08\u5219\u6301\u622a\u7136\u4e0d\u540c\u7684\u89c2\u70b9\u3002 \u4ed6\u4eec\u4e0d\u4ec5\u77e5\u9053\u5982\u4f55\u9a7e\u9a76\uff0c\u8fd8\u5fc5\u987b\u4e86\u89e3\u6267\u884c\u6211\u4eec\u8ba4\u4e3a\u7406\u6240\u5f53\u7136\u7684\u6240\u6709\u529f\u80fd\u6240\u9700\u7684\u6240\u6709\u7ec6\u8282\u3002 \u4ed6\u4eec\u9700\u8981\u4e86\u89e3\u53d1\u52a8\u673a\u5982\u4f55\u5de5\u4f5c\u3001\u53d8\u901f\u5668\u5982\u4f55\u6362\u6863\u3001\u5982\u4f55\u63a7\u5236\u6e29\u5ea6\u7b49\u7b49\u3002 \u8fd9\u88ab\u79f0\u4e3a\u7269\u7406\u89c6\u89d2\uff0c\u5373 \u201c\u5e55\u540e\u201d \u53d1\u751f\u7684\u7ec6\u8282\u3002</p> <p>\u5f53\u6211\u4eec\u4f7f\u7528\u7535\u8111\u65f6\u4e5f\u4f1a\u53d1\u751f\u540c\u6837\u7684\u4e8b\u60c5\u3002 \u5927\u591a\u6570\u4eba\u4f7f\u7528\u8ba1\u7b97\u673a\u7f16\u5199\u6587\u6863\u3001\u53d1\u9001\u548c\u63a5\u6536\u7535\u5b50\u90ae\u4ef6\u3001\u4e0a\u7f51\u3001\u64ad\u653e\u97f3\u4e50\u3001\u5b58\u50a8\u56fe\u50cf\u548c\u73a9\u6e38\u620f\uff0c\u4f46\u4e0d\u4e86\u89e3\u8fd9\u4e9b\u7c7b\u578b\u7684\u5e94\u7528\u7a0b\u5e8f\u8fd0\u884c\u7684\u8be6\u7ec6\u4fe1\u606f\u3002 \u4ed6\u4eec\u4ece\u903b\u8f91\u6216\u7528\u6237\u7684\u89d2\u5ea6\u770b\u5f85\u8ba1\u7b97\u673a\u3002 \u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6\u3001\u7a0b\u5e8f\u5458\u3001\u6280\u672f\u652f\u6301\u4eba\u5458\u548c\u7cfb\u7edf\u7ba1\u7406\u5458\u5bf9\u8ba1\u7b97\u673a\u7684\u770b\u6cd5\u622a\u7136\u4e0d\u540c\u3002 \u4ed6\u4eec\u5fc5\u987b\u4e86\u89e3\u64cd\u4f5c\u7cfb\u7edf\u5982\u4f55\u5de5\u4f5c\u3001\u7f51\u7edc\u534f\u8bae\u5982\u4f55\u914d\u7f6e\u4ee5\u53ca\u5982\u4f55\u7f16\u5199\u63a7\u5236\u8ba1\u7b97\u673a\u529f\u80fd\u7684\u5404\u79cd\u811a\u672c\u7684\u8be6\u7ec6\u4fe1\u606f\u3002 \u4ed6\u4eec\u5fc5\u987b\u80fd\u591f\u63a7\u5236\u7528\u6237\u7b80\u5355\u5047\u8bbe\u7684\u4f4e\u7ea7\u7ec6\u8282\u3002</p> <p>\u8fd9\u4e24\u4e2a\u793a\u4f8b\u7684\u5171\u540c\u70b9\u662f\uff0c\u62bd\u8c61\u7684\u7528\u6237\uff08\u6709\u65f6\u4e5f\u79f0\u4e3a\u5ba2\u6237\u7aef\uff09\u4e0d\u9700\u8981\u4e86\u89e3\u7ec6\u8282\uff0c\u53ea\u8981\u7528\u6237\u77e5\u9053\u754c\u9762\u7684\u5de5\u4f5c\u65b9\u5f0f\u5373\u53ef\u3002 \u8fd9\u4e2a\u63a5\u53e3\u662f\u6211\u4eec\u4f5c\u4e3a\u7528\u6237\u4e0e\u5b9e\u73b0\u7684\u5e95\u5c42\u590d\u6742\u6027\u8fdb\u884c\u901a\u4fe1\u7684\u65b9\u5f0f\u3002</p> <p>\u4f5c\u4e3a\u62bd\u8c61\u7684\u53e6\u4e00\u4e2a\u4f8b\u5b50\uff0c\u8003\u8651\u4e00\u4e0b Python \u7684 <code>math</code> \u6a21\u5757\u3002 \u4e00\u65e6\u6211\u4eec\u5bfc\u5165\u6a21\u5757\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u6267\u884c\u8ba1\u7b97\uff0c\u4f8b\u5982</p> <pre><code>&gt;&gt;&gt; import math\n&gt;&gt;&gt; math.sqrt(16)\n4.0\n</code></pre> <p>\u8fd9\u662f \u7a0b\u5e8f\u62bd\u8c61 \u7684\u4e00\u4e2a\u4f8b\u5b50\u3002 \u6211\u4eec\u4e0d\u4e00\u5b9a\u77e5\u9053\u5e73\u65b9\u6839\u662f\u5982\u4f55\u8ba1\u7b97\u7684\uff0c\u4f46\u6211\u4eec\u77e5\u9053\u8be5\u51fd\u6570\u7684\u540d\u79f0\u4ee5\u53ca\u5982\u4f55\u4f7f\u7528\u5b83\u3002 \u5982\u679c\u6211\u4eec\u6b63\u786e\u6267\u884c\u5bfc\u5165\uff0c\u6211\u4eec\u53ef\u4ee5\u5047\u8bbe\u8be5\u51fd\u6570\u5c06\u4e3a\u6211\u4eec\u63d0\u4f9b\u6b63\u786e\u7684\u7ed3\u679c\u3002 \u6211\u4eec\u77e5\u9053\u6709\u4eba\u5b9e\u73b0\u4e86\u5e73\u65b9\u6839\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u4f46\u6211\u4eec\u53ea\u9700\u8981\u77e5\u9053\u5982\u4f55\u4f7f\u7528\u5b83\u3002 \u8fd9\u6709\u65f6\u88ab\u79f0\u4e3a\u6d41\u7a0b\u7684 \u9ed1\u5323\u5b50 \u89c6\u56fe\u3002 \u6211\u4eec\u7b80\u5355\u5730\u63cf\u8ff0\u63a5\u53e3\uff1a\u51fd\u6570\u7684\u540d\u79f0\u3001\u9700\u8981\u4ec0\u4e48\uff08\u53c2\u6570\uff09\u4ee5\u53ca\u5c06\u8fd4\u56de\u4ec0\u4e48\u3002 \u7ec6\u8282\u9690\u85cf\u5728\u91cc\u9762\uff08\u53c2\u89c1\u201c\u56fe1\u201d\uff09\u3002</p> <p> \u56fe 1: \u7a0b\u5e8f\u62bd\u8c61 </p> <p>Computer science is difficult to define. This is probably due to the unfortunate use of the word computer in the name. As you are perhaps aware, computer science is not simply the study of computers. Although computers play an important supporting role as a tool in the discipline, they are just that\u2013\u2013tools.</p> <p>Computer science is the study of problems, problem-solving, and the solutions that come out of the problem-solving process. Given a problem, a computer scientist\u2019s goal is to develop an algorithm, a step-by-step list of instructions for solving any instance of the problem that might arise. Algorithms are finite processes that if followed will solve the problem. Algorithms are solutions.</p> <p>Computer science can be thought of as the study of algorithms. However, we must be careful to include the fact that some problems may not have a solution. Although proving this statement is beyond the scope of this text, the fact that some problems cannot be solved is important for those who study computer science. We can fully define computer science, then, by including both types of problems and stating that computer science is the study of solutions to problems as well as the study of problems with no solutions.</p> <p>It is also very common to include the word computable when describing problems and solutions. We say that a problem is computable if an algorithm exists for solving it. An alternative definition for computer science, then, is to say that computer science is the study of problems that are and that are not computable, the study of the existence and the nonexistence of algorithms. In any case, you will note that the word computer did not come up at all. Solutions are considered independent from the machine.</p> <p>Computer science, as it pertains to the problem-solving process itself, is also the study of abstraction. Abstraction allows us to view the problem and solution in such a way as to separate the so-called logical and physical perspectives. The basic idea is familiar to us in a common example.</p> <p>Consider the car that you may have driven to school or work today. As a driver, a user of the vehicle, you have certain interactions that take place in order to use the car for its intended purpose. You get in, insert the key, start the engine, shift, brake, accelerate, and steer in order to drive. From an abstraction point of view, we can say that you are seeing the logical perspective of the car. You are using the functions provided by the vehicle designers for the purpose of transporting you from one location to another. These functions are sometimes also referred to as the interface.</p> <p>On the other hand, the mechanic who must repair your car takes a very different point of view. They not only know how to drive but must know all of the details necessary to carry out all the functions that we take for granted. They need to understand how the engine works, how the transmission shifts gears, how temperature is controlled, and so on. This is known as the physical perspective, the details that take place \u201cunder the hood.\u201d</p> <p>The same thing happens when we use computers. Most people use computers to write documents, send and receive email, surf the web, play music, store images, and play games without any knowledge of the details that take place to allow those types of applications to work. They view computers from a logical or user perspective. Computer scientists, programmers, technology support staff, and system administrators take a very different view of the computer. They must know the details of how operating systems work, how network protocols are configured, and how to code various scripts that control computer functionality. They must be able to control the low-level details that a user simply assumes.</p> <p>The common point for both of these examples is that the user of the abstraction, sometimes also called the client, does not need to know the details as long as the user is aware of the way the interface works. This interface is the way we as users communicate with the underlying complexities of the implementation.</p> <p>As another example of abstraction, consider the Python <code>math</code> module. Once we import the module, we can perform computations such as</p> <pre><code>&gt;&gt;&gt; import math\n&gt;&gt;&gt; math.sqrt(16)\n4.0\n</code></pre> <p>This is an example of procedural abstraction. We do not necessarily know how the square root is being calculated, but we know what the function is called and how to use it. If we perform the import correctly, we can assume that the function will provide us with the correct results. We know that someone implemented a solution to the square root problem, but we only need to know how to use it. This is sometimes referred to as a black box view of a process. We simply describe the interface: the name of the function, what is needed (the parameters), and what will be returned. The details are hidden inside (see Figure 1).</p> <p> Figure 1: Procedural Abstraction </p>"},{"location":"c1/s4/","title":"1.4. \u4ec0\u4e48\u662f\u7f16\u7a0b\uff1f","text":"<p>1.4. What Is Programming?</p> \u4e2d\u6587\u82f1\u6587 <p>\u7f16\u7a0b(Programming)\u662f\u91c7\u7528\u7b97\u6cd5\u5e76\u5c06\u5176\u7f16\u7801\u4e3a\u7b26\u53f7\uff08\u4e00\u79cd\u7f16\u7a0b\u8bed\u8a00\uff09\u4ee5\u4fbf\u8ba1\u7b97\u673a\u53ef\u4ee5\u6267\u884c\u7684\u8fc7\u7a0b\u3002 \u5c3d\u7ba1\u5b58\u5728\u8bb8\u591a\u7f16\u7a0b\u8bed\u8a00\u548c\u8bb8\u591a\u4e0d\u540c\u7c7b\u578b\u7684\u8ba1\u7b97\u673a\uff0c\u4f46\u91cd\u8981\u7684\u7b2c\u4e00\u6b65\u662f\u9700\u8981\u6709\u89e3\u51b3\u65b9\u6848\u3002 \u6ca1\u6709\u7b97\u6cd5\u5c31\u4e0d\u53ef\u80fd\u6709\u7a0b\u5e8f\u3002</p> <p>\u8ba1\u7b97\u673a\u79d1\u5b66\u4e0d\u662f\u7f16\u7a0b\u7684\u7814\u7a76\u3002 \u7136\u800c\uff0c\u7f16\u7a0b\u662f\u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6\u5de5\u4f5c\u7684\u91cd\u8981\u7ec4\u6210\u90e8\u5206\u3002 \u7f16\u7a0b\u901a\u5e38\u662f\u6211\u4eec\u4e3a\u89e3\u51b3\u65b9\u6848\u521b\u5efa\u8868\u793a\u7684\u65b9\u5f0f\u3002 \u56e0\u6b64\uff0c\u8fd9\u79cd\u8bed\u8a00\u8868\u793a\u53ca\u5176\u521b\u5efa\u8fc7\u7a0b\u6210\u4e3a\u8be5\u5b66\u79d1\u7684\u57fa\u672c\u7ec4\u6210\u90e8\u5206\u3002</p> <p>\u7b97\u6cd5\u6839\u636e\u8868\u793a\u95ee\u9898\u5b9e\u4f8b\u6240\u9700\u7684\u6570\u636e\u4ee5\u53ca\u4ea7\u751f\u9884\u671f\u7ed3\u679c\u6240\u9700\u7684\u6b65\u9aa4\u96c6\u6765\u63cf\u8ff0\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\u3002 \u7f16\u7a0b\u8bed\u8a00\u5fc5\u987b\u63d0\u4f9b\u4e00\u79cd\u8868\u793a\u8fc7\u7a0b\u548c\u6570\u636e\u7684\u7b26\u53f7\u65b9\u5f0f\u3002 \u4e3a\u6b64\uff0c\u8bed\u8a00\u63d0\u4f9b\u4e86\u63a7\u5236\u7ed3\u6784(control constructs)\u548c\u6570\u636e\u7c7b\u578b(data types)\u3002</p> <p>\u63a7\u5236\u7ed3\u6784\u5141\u8bb8\u4ee5\u65b9\u4fbf\u800c\u660e\u786e\u7684\u65b9\u5f0f\u8868\u793a\u7b97\u6cd5\u6b65\u9aa4\u3002 \u81f3\u5c11\uff0c\u7b97\u6cd5\u9700\u8981\u6267\u884c\u987a\u5e8f\u5904\u7406\u3001\u51b3\u7b56\u9009\u62e9\u548c\u91cd\u590d\u63a7\u5236\u8fed\u4ee3\u7684\u7ed3\u6784\u3002 \u53ea\u8981\u8bed\u8a00\u63d0\u4f9b\u4e86\u8fd9\u4e9b\u57fa\u672c\u8bed\u53e5\uff0c\u5c31\u53ef\u4ee5\u7528\u4e8e\u7b97\u6cd5\u8868\u793a\u3002</p> <p>\u8ba1\u7b97\u673a\u4e2d\u7684\u6240\u6709\u6570\u636e\u9879\u90fd\u8868\u793a\u4e3a\u4e8c\u8fdb\u5236\u6570\u5b57\u4e32\u3002 \u4e3a\u4e86\u8d4b\u4e88\u8fd9\u4e9b\u5b57\u7b26\u4e32\u542b\u4e49\uff0c\u6211\u4eec\u9700\u8981\u6570\u636e\u7c7b\u578b(data types)\u3002 \u6570\u636e\u7c7b\u578b\u63d0\u4f9b\u4e86\u5bf9\u8fd9\u79cd\u4e8c\u8fdb\u5236\u6570\u636e\u7684\u89e3\u91ca\uff0c\u4ee5\u4fbf\u6211\u4eec\u53ef\u4ee5\u7528\u5bf9\u8981\u89e3\u51b3\u7684\u95ee\u9898\u6709\u610f\u4e49\u7684\u672f\u8bed\u6765\u601d\u8003\u6570\u636e\u3002 \u8fd9\u4e9b\u4f4e\u7ea7\u5185\u7f6e\u6570\u636e\u7c7b\u578b\uff08\u6709\u65f6\u79f0\u4e3a \u539f\u59cb(primitive) \u6570\u636e\u7c7b\u578b\uff09\u4e3a\u7b97\u6cd5\u5f00\u53d1\u63d0\u4f9b\u4e86\u6784\u5efa\u5757\u3002</p> <p>\u4f8b\u5982\uff0c\u5927\u591a\u6570\u7f16\u7a0b\u8bed\u8a00\u90fd\u63d0\u4f9b\u6574\u6570\u6570\u636e\u7c7b\u578b\u3002 \u8ba1\u7b97\u673a\u5185\u5b58\u4e2d\u7684\u4e8c\u8fdb\u5236\u6570\u5b57\u4e32\u53ef\u4ee5\u89e3\u91ca\u4e3a\u6574\u6570\uff0c\u5e76\u5177\u6709\u6211\u4eec\u901a\u5e38\u4e0e\u6574\u6570\u76f8\u5173\u7684\u5178\u578b\u542b\u4e49\uff08\u4f8b\u5982 23\u3001654 \u548c -19\uff09\u3002 \u6b64\u5916\uff0c\u6570\u636e\u7c7b\u578b\u8fd8\u63d0\u4f9b\u4e86\u6570\u636e\u9879\u53ef\u4ee5\u53c2\u4e0e\u7684\u8fd0\u7b97\u7684\u63cf\u8ff0\u3002\u5bf9\u4e8e\u6574\u6570\uff0c\u52a0\u6cd5\u3001\u51cf\u6cd5\u548c\u4e58\u6cd5\u7b49\u8fd0\u7b97\u5f88\u5e38\u89c1\u3002 \u6211\u4eec\u671f\u671b\u6570\u5b57\u7c7b\u578b\u7684\u6570\u636e\u53ef\u4ee5\u53c2\u4e0e\u8fd9\u4e9b\u7b97\u672f\u8fd0\u7b97\u3002</p> <p>\u6211\u4eec\u7ecf\u5e38\u9047\u5230\u7684\u56f0\u96be\u662f\u95ee\u9898\u53ca\u5176\u89e3\u51b3\u65b9\u6848\u975e\u5e38\u590d\u6742\u3002 \u8fd9\u4e9b\u7b80\u5355\u7684\u3001\u8bed\u8a00\u63d0\u4f9b\u7684\u7ed3\u6784\u548c\u6570\u636e\u7c7b\u578b\u867d\u7136\u8db3\u4ee5\u8868\u793a\u590d\u6742\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u4f46\u5728\u6211\u4eec\u89e3\u51b3\u95ee\u9898\u7684\u8fc7\u7a0b\u4e2d\u901a\u5e38\u5904\u4e8e\u52a3\u52bf\u3002 \u6211\u4eec\u9700\u8981\u4e00\u4e9b\u65b9\u6cd5\u6765\u63a7\u5236\u8fd9\u79cd\u590d\u6742\u6027\u5e76\u534f\u52a9\u521b\u5efa\u89e3\u51b3\u65b9\u6848\u3002</p> <p>Programming is the process of taking an algorithm and encoding it into a notation, a programming language, so that it can be executed by a computer. Although many programming languages and many different types of computers exist, the important first step is the need to have the solution. Without an algorithm there can be no program.</p> <p>Computer science is not the study of programming. Programming, however, is an important part of what a computer scientist does. Programming is often the way that we create a representation for our solutions. Therefore, this language representation and the process of creating it becomes a fundamental part of the discipline.</p> <p>Algorithms describe the solution to a problem in terms of the data needed to represent the problem instance and the set of steps necessary to produce the intended result. Programming languages must provide a notational way to represent both the process and the data. To this end, languages provide control constructs and data types.</p> <p>Control constructs allow algorithmic steps to be represented in a convenient yet unambiguous way. At a minimum, algorithms require constructs that perform sequential processing, selection for decision-making, and iteration for repetitive control. As long as the language provides these basic statements, it can be used for algorithm representation.</p> <p>All data items in the computer are represented as strings of binary digits. In order to give these strings meaning, we need to have data types. Data types provide an interpretation for this binary data so that we can think about the data in terms that make sense with respect to the problem being solved. These low-level, built-in data types (sometimes called the primitive data types) provide the building blocks for algorithm development.</p> <p>For example, most programming languages provide a data type for integers. Strings of binary digits in the computer\u2019s memory can be interpreted as integers and given the typical meanings that we commonly associate with integers (e.g. 23, 654, and -19). In addition, a data type also provides a description of the operations that the data items can participate in. With integers, operations such as addition, subtraction, and multiplication are common. We have come to expect that numeric types of data can participate in these arithmetic operations.</p> <p>The difficulty that often arises for us is the fact that problems and their solutions are very complex. These simple, language-provided constructs and data types, although certainly sufficient to represent complex solutions, are typically at a disadvantage as we work through the problem-solving process. We need ways to control this complexity and assist with the creation of solutions.</p>"},{"location":"c1/s5/","title":"1.5. \u4e3a\u4ec0\u4e48\u5b66\u4e60\u6570\u636e\u7ed3\u6784\u548c\u62bd\u8c61\u6570\u636e\u7c7b\u578b\uff1f","text":"<p>1.5. Why Study Data Structures and Abstract Data Types?</p> \u4e2d\u6587\u82f1\u6587 <p>\u4e3a\u4e86\u7ba1\u7406\u95ee\u9898\u7684\u590d\u6742\u6027\u548c\u89e3\u51b3\u95ee\u9898\u7684\u8fc7\u7a0b\uff0c\u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6\u4f7f\u7528\u62bd\u8c61\u6765\u8ba9\u4ed6\u4eec\u4e13\u6ce8\u4e8e\u201c\u5927\u5c40\uff08big picture\uff09\u201d\uff0c\u800c\u4e0d\u4f1a\u8ff7\u5931\u5728\u7ec6\u8282\u4e2d\u3002 \u901a\u8fc7\u521b\u5efa\u95ee\u9898\u57df\u7684\u6a21\u578b\uff0c\u6211\u4eec\u80fd\u591f\u5229\u7528\u66f4\u597d\u3001\u66f4\u9ad8\u6548\u7684\u95ee\u9898\u89e3\u51b3\u8fc7\u7a0b\u3002 \u8fd9\u4e9b\u6a21\u578b\u4f7f\u6211\u4eec\u80fd\u591f\u63cf\u8ff0\u6211\u4eec\u7684\u7b97\u6cd5\u5c06\u4ee5\u4e0e\u95ee\u9898\u672c\u8eab\u66f4\u52a0\u4e00\u81f4\u7684\u65b9\u5f0f\u64cd\u4f5c\u7684\u6570\u636e\u3002</p> <p>\u65e9\u4e9b\u65f6\u5019\uff0c\u6211\u4eec\u5c06\u8fc7\u7a0b\u62bd\u8c61\u79f0\u4e3a\u9690\u85cf\u7279\u5b9a\u51fd\u6570\u7684\u7ec6\u8282\u4ee5\u5141\u8bb8\u7528\u6237\u6216\u5ba2\u6237\u7aef\u5728\u975e\u5e38\u9ad8\u7684\u7ea7\u522b\u4e0a\u67e5\u770b\u5b83\u7684\u8fc7\u7a0b\u3002 \u73b0\u5728\u6211\u4eec\u5c06\u6ce8\u610f\u529b\u8f6c\u5411\u4e00\u4e2a\u7c7b\u4f3c\u7684\u60f3\u6cd5\uff0c\u5373\u6570\u636e\u62bd\u8c61\u3002 \u62bd\u8c61\u6570\u636e\u7c7b\u578b\uff0c\u6709\u65f6\u7f29\u5199\u4e3aADT\uff0c\u662f\u6211\u4eec\u5982\u4f55\u67e5\u770b\u6570\u636e\u548c\u5141\u8bb8\u7684\u64cd\u4f5c\u7684\u903b\u8f91\u63cf\u8ff0\uff0c\u800c\u4e0d\u8003\u8651\u5b83\u4eec\u5c06\u5982\u4f55\u5b9e\u73b0\u3002 \u8fd9\u610f\u5473\u7740\u6211\u4eec\u53ea\u5173\u5fc3\u6570\u636e\u4ee3\u8868\u4ec0\u4e48\uff0c\u800c\u4e0d\u5173\u5fc3\u5b83\u6700\u7ec8\u5c06\u5982\u4f55\u6784\u5efa\u3002 \u901a\u8fc7\u63d0\u4f9b\u8fd9\u79cd\u62bd\u8c61\u7ea7\u522b\uff0c\u6211\u4eec\u6b63\u5728\u56f4\u7ed5\u6570\u636e\u521b\u5efa\u5c01\u88c5\u3002 \u6211\u4eec\u7684\u60f3\u6cd5\u662f\uff0c\u901a\u8fc7\u5c01\u88c5\u5b9e\u73b0\u7684\u7ec6\u8282\uff0c\u6211\u4eec\u5c06\u5b83\u4eec\u9690\u85cf\u5728\u7528\u6237\u7684\u89c6\u91ce\u4e4b\u5916\u3002 \u8fd9\u79f0\u4e3a\u4fe1\u606f\u9690\u85cf\u3002</p> <p>\u201c\u56fe 2\u201d\u663e\u793a\u4e86\u62bd\u8c61\u6570\u636e\u7c7b\u578b\u662f\u4ec0\u4e48\u53ca\u5176\u64cd\u4f5c\u65b9\u5f0f\u7684\u56fe\u7247\u3002 \u7528\u6237\u4f7f\u7528\u62bd\u8c61\u6570\u636e\u7c7b\u578b\u6307\u5b9a\u7684\u64cd\u4f5c\u4e0e\u754c\u9762\u4ea4\u4e92\u3002 \u62bd\u8c61\u6570\u636e\u7c7b\u578b\u662f\u7528\u6237\u4ea4\u4e92\u7684\u5916\u58f3\u3002 \u8be5\u5b9e\u73b0\u9690\u85cf\u5f97\u66f4\u6df1\u4e00\u5c42\u3002 \u7528\u6237\u4e0d\u5173\u5fc3\u5b9e\u73b0\u7684\u7ec6\u8282\u3002</p> <p> \u56fe 2: \u62bd\u8c61\u6570\u636e\u7c7b\u578b </p> <p>\u62bd\u8c61\u6570\u636e\u7c7b\u578b\uff08\u901a\u5e38\u79f0\u4e3a\u6570\u636e\u7ed3\u6784\uff09\u7684\u5b9e\u73b0\u5c06\u8981\u6c42\u6211\u4eec\u4f7f\u7528\u4e00\u4e9b\u7f16\u7a0b\u7ed3\u6784\u548c\u539f\u59cb\u6570\u636e\u7c7b\u578b\u7684\u96c6\u5408\u6765\u63d0\u4f9b\u6570\u636e\u7684\u7269\u7406\u89c6\u56fe\u3002 \u6b63\u5982\u6211\u4eec\u4e4b\u524d\u8ba8\u8bba\u7684\uff0c\u8fd9\u4e24\u4e2a\u89c6\u89d2\u7684\u5206\u79bb\u5c06\u4f7f\u6211\u4eec\u80fd\u591f\u4e3a\u6211\u4eec\u7684\u95ee\u9898\u5b9a\u4e49\u590d\u6742\u7684\u6570\u636e\u6a21\u578b\uff0c\u800c\u65e0\u9700\u7ed9\u51fa\u4efb\u4f55\u6709\u5173\u5982\u4f55\u5b9e\u9645\u6784\u5efa\u6a21\u578b\u7684\u7ec6\u8282\u7684\u6307\u793a\u3002 \u8fd9\u63d0\u4f9b\u4e86\u6570\u636e\u7684\u72ec\u7acb\u4e8e\u5b9e\u73b0\u7684\u89c6\u56fe\u3002 \u7531\u4e8e\u901a\u5e38\u6709\u8bb8\u591a\u4e0d\u540c\u7684\u65b9\u6cd5\u6765\u5b9e\u73b0\u62bd\u8c61\u6570\u636e\u7c7b\u578b\uff0c\u56e0\u6b64\u8fd9\u79cd\u5b9e\u73b0\u72ec\u7acb\u6027\u5141\u8bb8\u7a0b\u5e8f\u5458\u5207\u6362\u5b9e\u73b0\u7684\u7ec6\u8282\uff0c\u800c\u65e0\u9700\u66f4\u6539\u6570\u636e\u7528\u6237\u4e0e\u5176\u4ea4\u4e92\u7684\u65b9\u5f0f\u3002 \u7528\u6237\u53ef\u4ee5\u7ee7\u7eed\u4e13\u6ce8\u4e8e\u89e3\u51b3\u95ee\u9898\u7684\u8fc7\u7a0b\u3002</p> <p>To manage the complexity of problems and the problem-solving process, computer scientists use abstractions to allow them to focus on the \u201cbig picture\u201d without getting lost in the details. By creating models of the problem domain, we are able to utilize a better and more efficient problem-solving process. These models allow us to describe the data that our algorithms will manipulate in a much more consistent way with respect to the problem itself.</p> <p>Earlier, we referred to procedural abstraction as a process that hides the details of a particular function to allow the user or client to view it at a very high level. We now turn our attention to a similar idea, that of data abstraction. An abstract data type, sometimes abbreviated ADT, is a logical description of how we view the data and the operations that are allowed without regard to how they will be implemented. This means that we are concerned only with what the data is representing and not with how it will eventually be constructed. By providing this level of abstraction, we are creating an encapsulation around the data. The idea is that by encapsulating the details of the implementation, we are hiding them from the user\u2019s view. This is called information hiding.</p> <p>Figure 2 shows a picture of what an abstract data type is and how it operates. The user interacts with the interface, using the operations that have been specified by the abstract data type. The abstract data type is the shell that the user interacts with. The implementation is hidden one level deeper. The user is not concerned with the details of the implementation.</p> <p> Figure 2: Abstract Data Type </p> <p>The implementation of an abstract data type, often referred to as a data structure, will require that we provide a physical view of the data using some collection of programming constructs and primitive data types. As we discussed earlier, the separation of these two perspectives will allow us to define the complex data models for our problems without giving any indication as to the details of how the model will actually be built. This provides an implementation-independent view of the data. Since there will usually be many different ways to implement an abstract data type, this implementation independence allows the programmer to switch the details of the implementation without changing the way the user of the data interacts with it. The user can remain focused on the problem-solving process.</p>"},{"location":"c1/s6/","title":"1.6. \u4e3a\u4ec0\u4e48\u5b66\u4e60\u7b97\u6cd5\uff1f","text":"<p>1.6. Why Study Algorithms?</p> \u4e2d\u6587\u82f1\u6587 <p>\u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6\u901a\u8fc7\u7ecf\u9a8c\u5b66\u4e60\u3002 \u6211\u4eec\u901a\u8fc7\u770b\u5230\u522b\u4eba\u89e3\u51b3\u95ee\u9898\u548c\u81ea\u5df1\u89e3\u51b3\u95ee\u9898\u6765\u5b66\u4e60\u3002 \u63a5\u89e6\u4e0d\u540c\u7684\u95ee\u9898\u89e3\u51b3\u6280\u672f\u5e76\u4e86\u89e3\u4e0d\u540c\u7b97\u6cd5\u7684\u8bbe\u8ba1\u65b9\u5f0f\u6709\u52a9\u4e8e\u6211\u4eec\u5e94\u5bf9\u4e0b\u4e00\u4e2a\u5177\u6709\u6311\u6218\u6027\u7684\u95ee\u9898\u3002 \u901a\u8fc7\u8003\u8651\u591a\u79cd\u4e0d\u540c\u7684\u7b97\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u5f00\u59cb\u5f00\u53d1\u6a21\u5f0f\u8bc6\u522b\uff0c\u4ee5\u4fbf\u4e0b\u6b21\u51fa\u73b0\u7c7b\u4f3c\u95ee\u9898\u65f6\uff0c\u6211\u4eec\u80fd\u591f\u66f4\u597d\u5730\u89e3\u51b3\u5b83\u3002</p> <p>\u7b97\u6cd5\u4e4b\u95f4\u5f80\u5f80\u5b58\u5728\u5f88\u5927\u5dee\u5f02\u3002 \u8003\u8651\u524d\u9762\u770b\u5230\u7684 sqrt \u793a\u4f8b\uff08\u89c1\u56fe 1.1\uff09\u3002 \u5b8c\u5168\u6709\u53ef\u80fd\u6709\u8bb8\u591a\u4e0d\u540c\u7684\u65b9\u6cd5\u6765\u5b9e\u73b0\u8ba1\u7b97\u5e73\u65b9\u6839\u51fd\u6570\u7684\u7ec6\u8282\u3002 \u4e00\u79cd\u7b97\u6cd5\u4f7f\u7528\u7684\u8d44\u6e90\u53ef\u80fd\u6bd4\u53e6\u4e00\u79cd\u7b97\u6cd5\u5c11\u5f97\u591a\u3002 \u4e00\u79cd\u7b97\u6cd5\u8fd4\u56de\u7ed3\u679c\u7684\u65f6\u95f4\u53ef\u80fd\u662f\u53e6\u4e00\u79cd\u7b97\u6cd5\u7684 10 \u500d\u3002 \u6211\u4eec\u5e0c\u671b\u6709\u67d0\u79cd\u65b9\u6cd5\u6765\u6bd4\u8f83\u8fd9\u4e24\u79cd\u89e3\u51b3\u65b9\u6848\u3002 \u5c3d\u7ba1\u5b83\u4eec\u90fd\u6709\u6548\uff0c\u4f46\u5176\u4e2d\u4e00\u79cd\u53ef\u80fd\u6bd4\u53e6\u4e00\u79cd\u201c\u66f4\u597d\u201d\u3002\u6211\u4eec\u53ef\u80fd\u4f1a\u5efa\u8bae\u5176\u4e2d\u4e00\u79cd\u6548\u7387\u66f4\u9ad8\uff0c\u6216\u8005\u53ea\u662f\u5de5\u4f5c\u901f\u5ea6\u66f4\u5feb\u6216\u4f7f\u7528\u66f4\u5c11\u7684\u5185\u5b58\u3002\u5f53\u6211\u4eec\u7814\u7a76\u7b97\u6cd5\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5b66\u4e60\u5206\u6790\u6280\u672f\uff0c\u8fd9\u4e9b\u6280\u672f\u4f7f\u6211\u4eec\u80fd\u591f\u4ec5\u6839\u636e\u89e3\u51b3\u65b9\u6848\u81ea\u8eab\u7684\u7279\u5f81\uff0c\u800c\u4e0d\u662f\u7528\u4e8e\u5b9e\u73b0\u5b83\u4eec\u7684\u7a0b\u5e8f\u6216\u8ba1\u7b97\u673a\u7684\u7279\u5f81\u6765\u6bd4\u8f83\u548c\u5bf9\u6bd4\u89e3\u51b3\u65b9\u6848\u3002</p> <p>\u5728\u6700\u574f\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u9047\u5230\u4e00\u4e2a\u68d8\u624b\u7684\u95ee\u9898\uff0c\u8fd9\u610f\u5473\u7740\u6ca1\u6709\u7b97\u6cd5\u53ef\u4ee5\u5728\u73b0\u5b9e\u7684\u65f6\u95f4\u5185\u89e3\u51b3\u95ee\u9898\u3002 \u91cd\u8981\u7684\u662f\u80fd\u591f\u533a\u5206\u54ea\u4e9b\u6709\u89e3\u51b3\u65b9\u6848\u7684\u95ee\u9898\u3001\u54ea\u4e9b\u6ca1\u6709\u89e3\u51b3\u65b9\u6848\u7684\u95ee\u9898\u4ee5\u53ca\u54ea\u4e9b\u5b58\u5728\u89e3\u51b3\u65b9\u6848\u4f46\u9700\u8981\u592a\u591a\u65f6\u95f4\u6216\u5176\u4ed6\u8d44\u6e90\u624d\u80fd\u5408\u7406\u5de5\u4f5c\u7684\u95ee\u9898\u3002</p> <p>\u6211\u4eec\u7ecf\u5e38\u9700\u8981\u786e\u5b9a\u5e76\u505a\u51fa\u6743\u8861\u3002 \u4f5c\u4e3a\u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6\uff0c\u9664\u4e86\u89e3\u51b3\u95ee\u9898\u7684\u80fd\u529b\u4e4b\u5916\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u4e86\u89e3\u548c\u7406\u89e3\u89e3\u51b3\u65b9\u6848\u8bc4\u4f30\u6280\u672f\u3002 \u6700\u540e\uff0c\u89e3\u51b3\u4e00\u4e2a\u95ee\u9898\u5f80\u5f80\u6709\u5f88\u591a\u79cd\u65b9\u6cd5\u3002 \u627e\u5230\u4e00\u4e2a\u89e3\u51b3\u65b9\u6848\uff0c\u7136\u540e\u51b3\u5b9a\u5b83\u662f\u5426\u662f\u4e00\u4e2a\u597d\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u662f\u6211\u4eec\u4f1a\u4e00\u904d\u53c8\u4e00\u904d\u5730\u505a\u7684\u4efb\u52a1\u3002</p> <p>Computer scientists learn by experience. We learn by seeing others solve problems and by solving problems by ourselves. Being exposed to different problem-solving techniques and seeing how different algorithms are designed helps us to take on the next challenging problem that we are given. By considering a number of different algorithms, we can begin to develop pattern recognition so that the next time a similar problem arises, we are better able to solve it.</p> <p>Algorithms are often quite different from one another. Consider the example of <code>sqrt</code> seen earlier (see Figure 1.1). It is entirely possible that there are many different ways to implement the details to compute the square root function. One algorithm may use many fewer resources than another. One algorithm might take 10 times as long to return the result as the other. We would like to have some way to compare these two solutions. Even though they both work, one is perhaps \u201cbetter\u201d than the other. We might suggest that one is more efficient or that one simply works faster or uses less memory. As we study algorithms, we can learn analysis techniques that allow us to compare and contrast solutions based solely on their own characteristics, not the characteristics of the program or computer used to implement them.</p> <p>In the worst-case scenario, we may have a problem that is intractable, meaning that there is no algorithm that can solve the problem in a realistic amount of time. It is important to be able to distinguish between those problems that have solutions, those that do not, and those where solutions exist but require too much time or other resources to work reasonably.</p> <p>There will often be trade-offs that we will need to identify and decide upon. As computer scientists, in addition to our ability to solve problems, we will also need to know and understand solution evaluation techniques. In the end, there are often many ways to solve a problem. Finding a solution and then deciding whether it is a good one are tasks that we will do over and over again.</p>"},{"location":"c1/s7/","title":"1.7. Python\u57fa\u7840\u56de\u987e","text":"<p>1.7. Review of Basic Python</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u56de\u987e\u7f16\u7a0b\u8bed\u8a00 Python\uff0c\u5e76\u63d0\u4f9b\u4e00\u4e9b\u66f4\u8be6\u7ec6\u7684\u793a\u4f8b\u6765\u4f53\u73b0\u4e0a\u4e00\u8282\u4e2d\u7684\u60f3\u6cd5\u3002 \u5982\u679c\u60a8\u662f Python \u65b0\u624b\u6216\u53d1\u73b0\u9700\u8981\u6709\u5173\u6240\u63d0\u4f9b\u7684\u4efb\u4f55\u4e3b\u9898\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u6211\u4eec\u5efa\u8bae\u60a8\u67e5\u9605\u8d44\u6e90\uff0c\u4f8b\u5982 \u201cPython \u8bed\u8a00\u53c2\u8003\u201d\u3001\u201cPython \u6559\u7a0b\u201d \u6216 https://docs.python.org/ \u4e2d\u63d0\u4f9b\u7684\u5176\u4ed6\u6587\u6863\u3002 \u6211\u4eec\u7684\u76ee\u6807\u662f\u8ba9\u60a8\u91cd\u65b0\u719f\u6089\u8be5\u8bed\u8a00\uff0c\u5e76\u5f3a\u5316\u4e00\u4e9b\u5c06\u6210\u4e3a\u540e\u7eed\u7ae0\u8282\u6838\u5fc3\u7684\u6982\u5ff5\u3002</p> <p>Python \u662f\u4e00\u79cd\u73b0\u4ee3\u3001\u6613\u4e8e\u5b66\u4e60\u3001\u9762\u5411\u5bf9\u8c61\u7684\u7f16\u7a0b\u8bed\u8a00\u3002 \u5b83\u5177\u6709\u4e00\u7ec4\u5f3a\u5927\u7684\u5185\u7f6e\u6570\u636e\u7c7b\u578b\u548c\u6613\u4e8e\u4f7f\u7528\u7684\u63a7\u5236\u7ed3\u6784\u3002 \u7531\u4e8e Python \u662f\u4e00\u79cd\u89e3\u91ca\u6027\u8bed\u8a00\uff0c\u56e0\u6b64\u901a\u8fc7\u7b80\u5355\u5730\u67e5\u770b\u548c\u63cf\u8ff0\u4ea4\u4e92\u5f0f\u4f1a\u8bdd\u6765\u6700\u5bb9\u6613\u5bf9\u5176\u8fdb\u884c\u5ba1\u67e5\u3002 \u60a8\u5e94\u8be5\u8bb0\u5f97\uff0c\u89e3\u91ca\u5668\u663e\u793a\u719f\u6089\u7684<code>&gt;&gt;&gt;</code>\u63d0\u793a\u7b26\uff0c\u7136\u540e\u8bc4\u4f30\u60a8\u63d0\u4f9b\u7684 Python \u6784\u9020\u3002 \u4f8b\u5982\uff0c</p> <pre><code>&gt;&gt;&gt; print(\"Algorithms and Data Structures\")\nAlgorithms and Data Structures\n</code></pre> <p>\u663e\u793a\u63d0\u793a\u3001<code>print</code>\u51fd\u6570\u3001\u7ed3\u679c\u548c\u4e0b\u4e00\u4e2a\u63d0\u793a\u3002</p> <p>In this section, we will review the programming language Python and also provide some more detailed examples of the ideas from the previous section. If you are new to Python or find that you need more information about any of the topics presented, we recommend that you consult a resource such as \u201cThe Python Language Reference\u201d, \u201cThe Python Tutorial\u201d, or other documents available at https://docs.python.org/. Our goal here is to reacquaint you with the language and also reinforce some of the concepts that will be central to later chapters.</p> <p>Python is a modern, easy-to-learn, object-oriented programming language. It has a powerful set of built-in data types and easy-to-use control constructs. Since Python is an interpreted language, it is most easily reviewed by simply looking at and describing interactive sessions. You should recall that the interpreter displays the familiar <code>&gt;&gt;&gt;</code> prompt and then evaluates the Python construct that you provide. For example,</p> <pre><code>&gt;&gt;&gt; print(\"Algorithms and Data Structures\")\nAlgorithms and Data Structures\n</code></pre> <p>shows the prompt, the <code>print</code> function, the result, and the next prompt.</p>"},{"location":"c1/s8/","title":"1.8. \u6570\u636e\u5165\u95e8","text":"<p>1.8. Getting Started with Data</p> \u4e2d\u6587\u82f1\u6587 <p>\u4e0a\u9762\u6211\u4eec\u8bf4\u8fc7Python\u652f\u6301\u9762\u5411\u5bf9\u8c61\u7684\u7f16\u7a0b\u8303\u5f0f\u3002 \u8fd9\u610f\u5473\u7740 Python \u5c06\u6570\u636e\u89c6\u4e3a\u89e3\u51b3\u95ee\u9898\u8fc7\u7a0b\u7684\u7126\u70b9\u3002 \u5728Python\u4ee5\u53ca\u4efb\u4f55\u5176\u4ed6\u9762\u5411\u5bf9\u8c61\u7684\u7f16\u7a0b\u8bed\u8a00\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u7c7b(class)\u6765\u63cf\u8ff0\u6570\u636e\u7684\u6837\u5b50\uff08\u72b6\u6001\uff09\u4ee5\u53ca\u6570\u636e\u53ef\u4ee5\u505a\u4ec0\u4e48\uff08\u884c\u4e3a\uff09\u3002 \u7c7b\u7c7b\u4f3c\u4e8e\u62bd\u8c61\u6570\u636e\u7c7b\u578b\uff0c\u56e0\u4e3a\u7c7b\u7684\u7528\u6237\u53ea\u80fd\u770b\u5230\u6570\u636e\u9879\u7684\u72b6\u6001\u548c\u884c\u4e3a\u3002 \u5728\u9762\u5411\u5bf9\u8c61\u7684\u8303\u5f0f\u4e2d\uff0c\u6570\u636e\u9879\u88ab\u79f0\u4e3a\u5bf9\u8c61(objects)\u3002 \u5bf9\u8c61\u662f\u7c7b\u7684\u5b9e\u4f8b\u3002</p> <p>We stated above that Python supports the object-oriented programming paradigm. This means that Python considers data to be the focal point of the problem-solving process. In Python, as well as in any other object-oriented programming language, we define a class to be a description of what the data look like (the state) and what the data can do (the behavior). Classes are analogous to abstract data types because a user of a class only sees the state and behavior of a data item. Data items are called objects in the object-oriented paradigm. An object is an instance of a class.</p>"},{"location":"c1/s8/#181-\u5185\u5efa\u7684\u539f\u5b50\u6570\u636e\u7c7b\u578b","title":"1.8.1. \u5185\u5efa\u7684\u539f\u5b50\u6570\u636e\u7c7b\u578b","text":"<p>1.8.1. Built-in Atomic Data Types</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u5c06\u901a\u8fc7\u8003\u8651\u539f\u5b50\u6570\u636e\u7c7b\u578b\u6765\u5f00\u59cb\u6211\u4eec\u7684\u5ba1\u67e5\u3002 Python \u6709\u4e24\u4e2a\u4e3b\u8981\u7684\u5185\u7f6e\u6570\u5b57\u7c7b\uff0c\u5b83\u4eec\u5b9e\u73b0\u6574\u6570\u548c\u6d6e\u70b9\u6570\u636e\u7c7b\u578b\u3002 \u8fd9\u4e9b Python \u7c7b\u79f0\u4e3a <code>int</code> \u548c\u201cfloat\u201d\u3002 \u6807\u51c6\u7b97\u672f\u8fd0\u7b97\u7b26 +\u3001-\u3001*\u3001/ \u548c **\uff08\u6c42\u5e42\uff09\u53ef\u4ee5\u4e0e\u62ec\u53f7\u4e00\u8d77\u4f7f\u7528\uff0c\u5f3a\u5236\u64cd\u4f5c\u987a\u5e8f\u504f\u79bb\u6b63\u5e38\u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7\u3002 \u5176\u4ed6\u975e\u5e38\u6709\u7528\u7684\u8fd0\u7b97\u7b26\u662f\u4f59\u6570\uff08\u6a21\uff09\u8fd0\u7b97\u7b26 (%) \u548c\u6574\u6570\u9664\u6cd5 (//)\u3002 \u8bf7\u6ce8\u610f\uff0c\u5f53\u4e24\u4e2a\u6574\u6570\u76f8\u9664\u65f6\uff0c\u7ed3\u679c\u662f\u6d6e\u70b9\u6570\u3002 \u6574\u6570\u9664\u6cd5\u8fd0\u7b97\u7b26\u901a\u8fc7\u622a\u65ad\u4efb\u4f55\u5c0f\u6570\u90e8\u5206\u6765\u8fd4\u56de\u5546\u7684\u6574\u6570\u90e8\u5206\u3002</p> Activity: 1.8.1.1 Basic Arithmetic Operators<pre><code>print(2 + 3 * 4)\nprint((2 + 3) * 4)\nprint(2 ** 10)\nprint(6 / 3)\nprint(7 / 3)\nprint(7 // 3)\nprint(7 % 3)\nprint(3 / 6)\nprint(3 // 6)\nprint(3 % 6)\nprint(2 ** 100)\n</code></pre> <p>\u5e03\u5c14\u6570\u636e\u7c7b\u578b\uff0c\u4f5c\u4e3aPython <code>bool</code> \u7c7b\u5b9e\u73b0\uff0c\u5bf9\u4e8e\u8868\u793a\u771f\u503c\u975e\u5e38\u6709\u7528\u3002 \u5e03\u5c14\u5bf9\u8c61\u7684\u53ef\u80fd\u72b6\u6001\u503c\u662f<code>True</code>\u548c<code>False</code>\uff0c\u4ee5\u53ca\u6807\u51c6\u5e03\u5c14\u8fd0\u7b97\u7b26<code>and</code>\u3001<code>or</code>\u548c<code>not</code>\u3002</p> <pre><code>&gt;&gt;&gt; True\nTrue\n&gt;&gt;&gt; False\nFalse\n&gt;&gt;&gt; False or True\nTrue\n&gt;&gt;&gt; not (False or True)\nFalse\n&gt;&gt;&gt; True and True\nTrue\n</code></pre> <p>\u5e03\u5c14\u6570\u636e\u5bf9\u8c61\u8fd8\u7528\u4f5c\u6bd4\u8f83\u8fd0\u7b97\u7b26\u7684\u7ed3\u679c\uff0c\u4f8b\u5982\u7b49\u4e8e (==) \u548c\u5927\u4e8e (\\(&gt;\\))\u3002 \u6b64\u5916\uff0c\u5173\u7cfb\u8fd0\u7b97\u7b26\u548c\u903b\u8f91\u8fd0\u7b97\u7b26\u53ef\u4ee5\u7ec4\u5408\u5728\u4e00\u8d77\u5f62\u6210\u590d\u6742\u7684\u903b\u8f91\u95ee\u9898\u3002 \u201c\u8868 1\u201d\u663e\u793a\u4e86\u5173\u7cfb\u8fd0\u7b97\u7b26\u548c\u903b\u8f91\u8fd0\u7b97\u7b26\uff0c\u5e76\u5728\u968f\u540e\u7684\u4f1a\u8bdd\u4e2d\u663e\u793a\u4e86\u793a\u4f8b\u3002</p> <p>\u8868 1: \u5173\u7cfb\u8fd0\u7b97\u7b26\u548c\u903b\u8f91\u8fd0\u7b97\u7b26</p> \u8fd0\u7b97\u7b26\u540d\u79f0 \u8fd0\u7b97\u7b26 \u89e3\u91ca \u5c0f\u4e8e \\(&lt;\\) \u5c0f\u4e8e\u8fd0\u7b97\u7b26 \u5927\u4e8e \\(&gt;\\) \u5927\u4e8e\u8fd0\u7b97\u7b26 \u5c0f\u4e8e\u6216\u7b49\u4e8e \\(&lt;=\\) \u5c0f\u4e8e\u6216\u7b49\u4e8e\u8fd0\u7b97\u7b26 \u5927\u4e8e\u6216\u7b49\u4e8e \\(&gt;=\\) \u5927\u4e8e\u6216\u7b49\u4e8e\u8fd0\u7b97\u7b26 \u7b49\u4e8e \\(==\\) \u7b49\u4e8e\u8fd0\u7b97\u7b26 \u4e0d\u7b49\u4e8e \\(!=\\) \u4e0d\u7b49\u4e8e\u8fd0\u7b97\u7b26 \u903b\u8f91\u548c \\(and\\) \u4e24\u4e2a\u64cd\u4f5c\u6570\u90fd\u4e3a True \u65f6\u7ed3\u679c\u4e3a True \u903b\u8f91\u6216 \\(or\\) \u4e00\u4e2a\u6216\u53e6\u4e00\u4e2a\u64cd\u4f5c\u6570\u4e3a True \u5219\u7ed3\u679c\u4e3a True \u903b\u8f91\u975e \\(not\\) \u5426\u5b9a\u771f\u503c\uff0cFalse \u53d8\u4e3a True\uff0cTrue \u53d8\u4e3a False Activity: 1.8.1.2 \u57fa\u672c\u5173\u7cfb\u548c\u903b\u8f91\u8fd0\u7b97\u7b26<pre><code>&gt;&gt;&gt; print(5 == 10)\nFalse\n&gt;&gt;&gt; print(10 &gt; 5)\nTrue\n&gt;&gt;&gt; print((5 &gt;= 1) and (5 &lt;= 10))\nTrue\n&gt;&gt;&gt; print((1 &lt; 5) or (10 &lt; 1))\nTrue\n&gt;&gt;&gt; print(1 &lt; 5 &lt; 10)\nTrue\n</code></pre> <p>\u6807\u8bc6\u7b26\u5728\u7f16\u7a0b\u8bed\u8a00\u4e2d\u7528\u4f5c\u540d\u79f0\u3002 \u5728 Python \u4e2d\uff0c\u6807\u8bc6\u7b26\u4ee5\u5b57\u6bcd\u6216\u4e0b\u5212\u7ebf (_) \u5f00\u5934\uff0c\u533a\u5206\u5927\u5c0f\u5199\uff0c\u5e76\u4e14\u53ef\u4ee5\u662f\u4efb\u610f\u957f\u5ea6\u3002 \u8bf7\u8bb0\u4f4f\uff0c\u4f7f\u7528\u4f20\u8fbe\u542b\u4e49\u7684\u540d\u79f0\u59cb\u7ec8\u662f\u4e00\u4e2a\u597d\u4e3b\u610f\uff0c\u4ee5\u4fbf\u60a8\u7684\u7a0b\u5e8f\u4ee3\u7801\u66f4\u6613\u4e8e\u9605\u8bfb\u548c\u7406\u89e3\u3002</p> <p>\u5f53\u7b2c\u4e00\u6b21\u5728\u8d4b\u503c\u8bed\u53e5\u7684\u5de6\u4fa7\u4f7f\u7528\u540d\u79f0\u65f6\uff0c\u5c31\u4f1a\u521b\u5efa Python \u53d8\u91cf\u3002 \u8d4b\u503c\u8bed\u53e5\u63d0\u4f9b\u4e86\u4e00\u79cd\u5c06\u540d\u79f0\u4e0e\u503c\u5173\u8054\u8d77\u6765\u7684\u65b9\u6cd5\u3002 \u8be5\u53d8\u91cf\u5c06\u4fdd\u5b58\u5bf9\u4e00\u6bb5\u6570\u636e\u7684\u5f15\u7528\uff0c\u4f46\u4e0d\u4fdd\u5b58\u6570\u636e\u672c\u8eab\u3002 \u8003\u8651\u4ee5\u4e0b\u4f1a\u8bdd\uff1a</p> <pre><code>&gt;&gt;&gt; the_sum = 0\n&gt;&gt;&gt; the_sum\n0\n&gt;&gt;&gt; the_sum = the_sum + 1\n&gt;&gt;&gt; the_sum\n1\n&gt;&gt;&gt; the_sum = True\n&gt;&gt;&gt; the_sum\nTrue\n</code></pre> <p>\u8d4b\u503c\u8bed\u53e5<code>the_sum = 0</code>\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a<code>the_sum</code>\u7684\u53d8\u91cf\uff0c\u5e76\u8ba9\u5b83\u4fdd\u5b58\u5bf9\u6570\u636e\u5bf9\u8c61<code>0</code>\u7684\u5f15\u7528\uff08\u53c2\u89c1\u201c\u56fe3\u201d\uff09\u3002 \u901a\u5e38\uff0c\u5bf9\u8d4b\u503c\u8bed\u53e5\u7684\u53f3\u4fa7\u8fdb\u884c\u6c42\u503c\uff0c\u5e76\u5bf9\u7ed3\u679c\u6570\u636e\u5bf9\u8c61\u7684\u5f15\u7528\u5206\u914d\u7ed9\u5de6\u4fa7\u7684\u540d\u79f0\u3002 \u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u6b64\u65f6\u53d8\u91cf\u7684\u7c7b\u578b\u662f\u6574\u6570\uff0c\u56e0\u4e3a\u8fd9\u662f<code>the_sum</code>\u5f53\u524d\u5f15\u7528\u7684\u6570\u636e\u7684\u7c7b\u578b\u3002 \u5982\u679c\u6570\u636e\u7c7b\u578b\u53d1\u751f\u53d8\u5316\uff08\u53c2\u89c1\u201c\u56fe 4\u201d\uff09\uff0c\u5982\u4e0a\u9762\u5e03\u5c14\u503c<code>True</code>\u6240\u793a\uff0c\u53d8\u91cf\u7684\u7c7b\u578b\u4e5f\u4f1a\u53d1\u751f\u53d8\u5316\uff08<code>the_sum</code>\u73b0\u5728\u662f\u5e03\u5c14\u7c7b\u578b\uff09\u3002 \u8d4b\u503c\u8bed\u53e5\u66f4\u6539\u53d8\u91cf\u6240\u6301\u6709\u7684\u5f15\u7528\u3002 \u8fd9\u662fPython\u7684\u52a8\u6001\u7279\u6027\u3002 \u540c\u4e00\u53d8\u91cf\u53ef\u4ee5\u5f15\u7528\u8bb8\u591a\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u636e\u3002</p> <p> \u56fe 3: \u53d8\u91cf\u4fdd\u5b58\u5bf9\u6570\u636e\u5bf9\u8c61\u7684\u5f15\u7528 </p> <p> \u56fe 4: \u8d4b\u503c\u6539\u53d8\u5f15\u7528 </p> <p>We will begin our review by considering the atomic data types. Python has two main built-in numeric classes that implement the integer and floating-point data types. These Python classes are called <code>int</code> and <code>float</code>. The standard arithmetic operators, +, -, *, /, and ** (exponentiation), can be used with parentheses forcing the order of operations away from normal operator precedence. Other very useful operators are the remainder (modulo) operator (%) and integer division (//). Note that when two integers are divided, the result is a floating point. The integer division operator returns the integer portion of the quotient by truncating any fractional part.</p> Activity: 1.8.1.1 Basic Arithmetic Operators<pre><code>print(2 + 3 * 4)\nprint((2 + 3) * 4)\nprint(2 ** 10)\nprint(6 / 3)\nprint(7 / 3)\nprint(7 // 3)\nprint(7 % 3)\nprint(3 / 6)\nprint(3 // 6)\nprint(3 % 6)\nprint(2 ** 100)\n</code></pre> <p>The Boolean data type, implemented as the Python <code>bool</code> class, will be quite useful for representing truth values. The possible state values for a Boolean object are <code>True</code> and <code>False</code> with the standard Boolean operators, <code>and</code>, <code>or</code>, and <code>not</code>.</p> <pre><code>&gt;&gt;&gt; True\nTrue\n&gt;&gt;&gt; False\nFalse\n&gt;&gt;&gt; False or True\nTrue\n&gt;&gt;&gt; not (False or True)\nFalse\n&gt;&gt;&gt; True and True\nTrue\n</code></pre> <p>Boolean data objects are also used as results for comparison operators such as equality (==) and greater than ( &gt; ). In addition, relational operators and logical operators can be combined together to form complex logical questions. Table 1 shows the relational and logical operators with examples shown in the session that follows.</p> <p>Table 1: Relational and Logical Operators</p> Operation Name Operator Explanation less than \\(&lt;\\) Less than operator greater than \\(&gt;\\) Greater than operator less than or equal \\(&lt;=\\) Less than or equal to operator greater than or equal \\(&gt;=\\) Greater than or equal to operator equal \\(==\\) Equality operator not equal \\(!=\\) Not equal operator logical and \\(and\\) Both operands True for result to be True logical or \\(or\\) One or the other operand is True for the result to be True logical not \\(not\\) Negates the truth value, False becomes True, True becomes False Activity: 1.8.1.2 Basic Relational and Logical Operators<pre><code>&gt;&gt;&gt; print(5 == 10)\nFalse\n&gt;&gt;&gt; print(10 &gt; 5)\nTrue\n&gt;&gt;&gt; print((5 &gt;= 1) and (5 &lt;= 10))\nTrue\n&gt;&gt;&gt; print((1 &lt; 5) or (10 &lt; 1))\nTrue\n&gt;&gt;&gt; print(1 &lt; 5 &lt; 10)\nTrue\n</code></pre> <p>Identifiers are used in programming languages as names. In Python, identifiers start with a letter or an underscore (_), are case sensitive, and can be of any length. Remember that it is always a good idea to use names that convey meaning so that your program code is easier to read and understand.</p> <p>A Python variable is created when a name is used for the first time on the left-hand side of an assignment statement. Assignment statements provide a way to associate a name with a value. The variable will hold a reference to a piece of data but not the data itself. Consider the following session:</p> <pre><code>&gt;&gt;&gt; the_sum = 0\n&gt;&gt;&gt; the_sum\n0\n&gt;&gt;&gt; the_sum = the_sum + 1\n&gt;&gt;&gt; the_sum\n1\n&gt;&gt;&gt; the_sum = True\n&gt;&gt;&gt; the_sum\nTrue\n</code></pre> <p>The assignment statement <code>the_sum = 0</code> creates a variable called <code>the_sum</code> and lets it hold the reference to the data object <code>0</code> (see Figure 3). In general, the right-hand side of the assignment statement is evaluated and a reference to the resulting data object is assigned to the name on the left-hand side. At this point in our example, the type of the variable is integer as that is the type of the data currently being referred to by <code>the_sum</code>. If the type of the data changes (see Figure 4), as shown above with the Boolean value <code>True</code>, so does the type of the variable (<code>the_sum</code> is now of the type Boolean). The assignment statement changes the reference being held by the variable. This is a dynamic characteristic of Python. The same variable can refer to many different types of data.</p> <p> Figure 3: Variables Hold References to Data Objects </p> <p> Figure 4: Assignment Changes the Reference </p>"},{"location":"c1/s8/#182-\u5185\u5efa\u7684\u96c6\u5408\u6570\u636e\u7c7b\u578b","title":"1.8.2. \u5185\u5efa\u7684\u96c6\u5408\u6570\u636e\u7c7b\u578b","text":"<p>1.8.2. Built-in Collection Data Types</p> \u4e2d\u6587\u82f1\u6587 <p>\u9664\u4e86\u6570\u5b57\u7c7b\u548c\u5e03\u5c14\u7c7b\u4e4b\u5916\uff0cPython \u8fd8\u6709\u8bb8\u591a\u975e\u5e38\u5f3a\u5927\u7684\u5185\u7f6e\u96c6\u5408\u7c7b\u3002 \u5217\u8868\u3001\u5b57\u7b26\u4e32\u548c\u5143\u7ec4\u662f\u6709\u5e8f\u96c6\u5408\uff0c\u5b83\u4eec\u5728\u4e00\u822c\u7ed3\u6784\u4e0a\u975e\u5e38\u76f8\u4f3c\uff0c\u4f46\u5177\u6709\u7279\u5b9a\u7684\u5dee\u5f02\uff0c\u5fc5\u987b\u7406\u89e3\u8fd9\u4e9b\u5dee\u5f02\u624d\u80fd\u6b63\u786e\u4f7f\u7528\u5b83\u4eec\u3002 \u96c6\u5408\u548c\u5b57\u5178\u662f\u65e0\u5e8f\u96c6\u5408\u3002</p> <p>In addition to the numeric and Boolean classes, Python has a number of very powerful built-in collection classes. Lists, strings, and tuples are ordered collections that are very similar in general structure but have specific differences that must be understood for them to be used properly. Sets and dictionaries are unordered collections.</p>"},{"location":"c1/s8/#list","title":"list","text":"\u4e2d\u6587\u82f1\u6587 <p>\u5217\u8868(list)\u662f\u96f6\u4e2a\u6216\u591a\u4e2a\u5bf9 Python \u6570\u636e\u5bf9\u8c61\u7684\u5f15\u7528\u7684\u6709\u5e8f\u96c6\u5408\u3002 \u5217\u8868\u88ab\u5199\u4e3a\u62ec\u5728\u65b9\u62ec\u53f7\u4e2d\u7684\u9017\u53f7\u5206\u9694\u503c\u3002 \u7a7a\u5217\u8868\u5c31\u662f<code>[ ]</code>\u3002 \u5217\u8868\u662f\u5f02\u6784\u7684\uff0c\u8fd9\u610f\u5473\u7740\u6570\u636e\u5bf9\u8c61\u4e0d\u5fc5\u5168\u90e8\u6765\u81ea\u540c\u4e00\u7c7b\uff0c\u5e76\u4e14\u53ef\u4ee5\u5c06\u96c6\u5408\u5206\u914d\u7ed9\u53d8\u91cf\uff0c\u5982\u4e0b\u6240\u793a\u3002 \u4ee5\u4e0b\u7247\u6bb5\u663e\u793a\u4e86\u5217\u8868\u4e2d\u7684\u5404\u79cd Python \u6570\u636e\u5bf9\u8c61\u3002</p> <pre><code>&gt;&gt;&gt; [1, 3, True, 6.5]\n[1, 3, True, 6.5]\n&gt;&gt;&gt; my_list = [1, 3, True, 6.5]\n&gt;&gt;&gt; my_list\n[1, 3, True, 6.5]\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u5f53 Python \u8ba1\u7b97(evaluates)\u5217\u8868\u65f6\uff0c\u4f1a\u8fd4\u56de\u5217\u8868\u672c\u8eab\u3002 \u4f46\u662f\uff0c\u4e3a\u4e86\u8bb0\u4f4f\u8be5\u5217\u8868\u4ee5\u4f9b\u4ee5\u540e\u5904\u7406\uff0c\u9700\u8981\u5c06\u5176\u5f15\u7528\u5206\u914d\u7ed9\u4e00\u4e2a\u53d8\u91cf\u3002</p> <p>\u7531\u4e8e\u5217\u8868\u88ab\u8ba4\u4e3a\u662f\u6309\u987a\u5e8f\u6392\u5e8f\u7684\uff0c\u56e0\u6b64\u5b83\u4eec\u652f\u6301\u8bb8\u591a\u53ef\u5e94\u7528\u4e8e\u4efb\u4f55 Python \u5e8f\u5217\u7684\u64cd\u4f5c\u3002 \u201c\u8868 2\u201d\u56de\u987e\u4e86\u8fd9\u4e9b\u64cd\u4f5c\uff0c\u4e0b\u9762\u7684\u8bfe\u7a0b\u7ed9\u51fa\u4e86\u5b83\u4eec\u7684\u4f7f\u7528\u793a\u4f8b\u3002</p> <p>\u8868 2\uff1aPython \u4e2d\u4efb\u610f\u5e8f\u5217\u7684\u64cd\u4f5c</p> \u8fd0\u7b97\u7b26\u540d\u79f0 \u8fd0\u7b97\u7b26 \u89e3\u91ca \u7d22\u5f15 [ ] \u8bbf\u95ee\u5e8f\u5217\u7684\u5143\u7d20 \u4e32\u8054 + \u5c06\u5e8f\u5217\u7ec4\u5408\u5728\u4e00\u8d77 \u91cd\u590d * \u8fde\u63a5\u91cd\u590d\u6b21\u6570 \u4f1a\u5458 <code>in</code> \u8be2\u95ee\u67d0\u4e2a\u9879\u76ee\u662f\u5426\u5728\u5e8f\u5217\u4e2d \u957f\u5ea6 <code>len</code> \u8be2\u95ee\u5e8f\u5217\u4e2d\u7684\u9879\u76ee\u6570 \u5207\u7247 [ : ] \u63d0\u53d6\u5e8f\u5217\u7684\u4e00\u90e8\u5206 <p>\u8bf7\u6ce8\u610f\uff0c\u5217\u8868\uff08\u5e8f\u5217\uff09\u7684\u7d22\u5f15\u4ece 0 \u5f00\u59cb\u8ba1\u6570\u3002\u5207\u7247\u64cd\u4f5c <code>my_list[1:3]</code> \u8fd4\u56de\u4e00\u4e2a\u9879\u76ee\u5217\u8868\uff0c\u8be5\u5217\u8868\u4ee5\u7d22\u5f15\u4e3a <code>1</code> \u7684\u9879\u76ee\u5f00\u59cb\uff0c\u76f4\u5230\uff08\u4f46\u4e0d\u5305\u62ec\uff09\u7d22\u5f15\u4e3a\u7684\u9879\u76ee <code>3</code>.</p> <p>\u6709\u65f6\u60a8\u4f1a\u60f3\u8981\u521d\u59cb\u5316\u4e00\u4e2a\u5217\u8868\u3002 \u8fd9\u53ef\u4ee5\u901a\u8fc7\u91cd\u590d\u6765\u5feb\u901f\u5b8c\u6210\u3002 \u4f8b\u5982\uff0c</p> <pre><code>&gt;&gt;&gt; my_list = [0] * 6\n&gt;&gt;&gt; my_list\n[0, 0, 0, 0, 0, 0]\n</code></pre> <p>\u4e0e\u91cd\u590d\u8fd0\u7b97\u7b26\u76f8\u5173\u7684\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u95ee\u9898\u662f\uff0c\u7ed3\u679c\u662f\u91cd\u590d\u5bf9\u5e8f\u5217\u4e2d\u7684\u6570\u636e\u5bf9\u8c61\u7684\u5f15\u7528\u3002 \u901a\u8fc7\u8003\u8651\u4ee5\u4e0b\u4f1a\u8bae\u53ef\u4ee5\u6700\u597d\u5730\u770b\u51fa\u8fd9\u4e00\u70b9\uff1a</p> \u53c2\u8003\u6587\u732e\u7684\u91cd\u590d<pre><code>my_list = [1, 2, 3, 4]\nbig_list = [my_list] * 3\nprint(big_list)\nmy_list[2] = 45\nprint(big_list)\n</code></pre> <p>\u53d8\u91cf<code>big_list</code>\u4fdd\u5b58\u5bf9\u539f\u59cb\u5217\u8868<code>my_list</code>\u7684\u4e09\u4e2a\u5f15\u7528\u7684\u96c6\u5408\u3002 \u8bf7\u6ce8\u610f\uff0c\u5bf9 <code>my_list</code> \u7684\u4e00\u4e2a\u5143\u7d20\u7684\u66f4\u6539\u4f1a\u51fa\u73b0\u5728 <code>big_list</code> \u4e2d\u7684\u6240\u6709\u4e09\u4e2a\u4e8b\u4ef6\u4e2d\u3002</p> <p>\u5217\u8868\u652f\u6301\u8bb8\u591a\u7528\u4e8e\u6784\u5efa\u6570\u636e\u7ed3\u6784\u7684\u65b9\u6cd5\u3002 \u201c\u8868 3\u201d\u63d0\u4f9b\u4e86\u6458\u8981\u3002 \u5b83\u4eec\u7684\u4f7f\u7528\u793a\u4f8b\u5982\u4e0b\u3002</p> <p>\u8868 3\uff1aPython \u4e2d\u5217\u8868\u63d0\u4f9b\u7684\u65b9\u6cd5</p> \u65b9\u6cd5\u540d\u79f0 \u7528\u6cd5 \u89e3\u91ca <code>append</code> <code>a_list.append(item)</code> \u5c06\u65b0\u9879\u76ee\u6dfb\u52a0\u5230\u5217\u8868\u672b\u5c3e <code>insert</code> <code>a_list.insert(i,item)</code> \u5728\u5217\u8868\u4e2d\u7684\u7b2c i \u4e2a\u4f4d\u7f6e\u63d2\u5165\u4e00\u4e2a\u9879\u76ee <code>pop</code> <code>a_list.pop()</code> \u5220\u9664\u5e76\u8fd4\u56de\u5217\u8868\u4e2d\u7684\u6700\u540e\u4e00\u9879 <code>pop</code> <code>a_list.pop(i)</code> \u5220\u9664\u5e76\u8fd4\u56de\u5217\u8868\u4e2d\u7684\u7b2c i \u4e2a\u9879\u76ee <code>sort</code> <code>a_list.sort()</code> \u5bf9\u5217\u8868\u8fdb\u884c\u9002\u5f53\u6392\u5e8f <code>reverse</code> <code>a_list.reverse()</code> \u5c06\u5217\u8868\u4fee\u6539\u4e3a\u5012\u5e8f <code>del</code> <code>del a_list[i]</code> \u5220\u9664\u7b2c i \u4e2a\u4f4d\u7f6e\u7684\u9879\u76ee <code>index</code> <code>a_list.index(item)</code> \u8fd4\u56de\u7b2c\u4e00\u6b21\u51fa\u73b0<code>item</code>\u7684\u7d22\u5f15 <code>count</code> <code>a_list.count(item)</code> \u8fd4\u56de<code>item</code>\u51fa\u73b0\u7684\u6b21\u6570 <code>remove</code> <code>a_list.remove(item)</code> \u5220\u9664\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684<code>item</code> \u5217\u8868\u65b9\u6cd5\u7684\u793a\u4f8b<pre><code>my_list = [1024, 3, True, 6.5]\nmy_list.append(False)\nprint(my_list)\nmy_list.insert(2,4.5)\nprint(my_list)\nprint(my_list.pop())\nprint(my_list)\nprint(my_list.pop(1))\nprint(my_list)\nmy_list.pop(2)\nprint(my_list)\nmy_list.sort()\nprint(my_list)\nmy_list.reverse()\nprint(my_list)\nprint(my_list.count(6.5))\nprint(my_list.index(4.5))\nmy_list.remove(6.5)\nprint(my_list)\ndel my_list[0]\nprint(my_list)\n</code></pre> <p>\u60a8\u53ef\u4ee5\u770b\u5230\u67d0\u4e9b\u65b9\u6cd5\uff0c\u4f8b\u5982<code>pop</code>\uff0c\u8fd4\u56de\u4e00\u4e2a\u503c\u5e76\u4fee\u6539\u5217\u8868\u3002 \u5176\u4ed6\u7684\uff0c\u4f8b\u5982<code>reverse</code>\uff0c\u53ea\u662f\u7b80\u5355\u5730\u4fee\u6539\u5217\u8868\uff0c\u6ca1\u6709\u8fd4\u56de\u503c\u3002 <code>pop</code> \u5c06\u9ed8\u8ba4\u4f4d\u4e8e\u5217\u8868\u672b\u5c3e\uff0c\u4f46\u4e5f\u53ef\u4ee5\u5220\u9664\u5e76\u8fd4\u56de\u7279\u5b9a\u9879\u76ee\u3002 \u8fd9\u4e9b\u65b9\u6cd5\u518d\u6b21\u4f7f\u7528\u4ece 0 \u5f00\u59cb\u7684\u7d22\u5f15\u8303\u56f4\u3002 \u60a8\u8fd8\u5e94\u8be5\u6ce8\u610f\u5230\u719f\u6089\u7684\u201c\u70b9(.)\u201d\u8868\u793a\u6cd5\uff0c\u7528\u4e8e\u8981\u6c42\u5bf9\u8c61\u8c03\u7528\u65b9\u6cd5\u3002 <code>my_list.append(False)</code> \u53ef\u4ee5\u7406\u89e3\u4e3a\u201c\u8981\u6c42\u5bf9\u8c61 <code>my_list</code> \u6267\u884c\u5176 <code>append</code> \u65b9\u6cd5\u5e76\u5411\u5176\u53d1\u9001\u503c <code>False</code>\u3002 \u5373\u4f7f\u662f\u7b80\u5355\u7684\u6570\u636e\u5bf9\u8c61\uff08\u4f8b\u5982\u6574\u6570\uff09\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u8c03\u7528\u65b9\u6cd5\u3002</p> <pre><code>&gt;&gt;&gt; (54).__add__(21)\n75\n</code></pre> <p>\u5728\u8fd9\u4e2a\u7247\u6bb5\u4e2d\uff0c\u6211\u4eec\u8981\u6c42\u6574\u6570\u5bf9\u8c61<code>54</code>\u6267\u884c\u5176<code>add</code>\u65b9\u6cd5\uff08\u5728Python\u4e2d\u79f0\u4e3a<code>__add__</code>\uff09\u5e76\u5c06\u5176\u4f20\u9012<code>21</code>\u4f5c\u4e3a\u8981\u6dfb\u52a0\u7684\u503c\u3002 \u7ed3\u679c\u662f\u603b\u548c<code>75</code>\u3002 \u5f53\u7136\uff0c\u6211\u4eec\u901a\u5e38\u5199\u6210<code>54+21</code>\u3002 \u6211\u4eec\u5c06\u5728\u672c\u8282\u540e\u9762\u8be6\u7ec6\u4ecb\u7ecd\u8fd9\u4e9b\u65b9\u6cd5\u3002</p> <p>\u7ecf\u5e38\u4e0e\u5217\u8868\u4e00\u8d77\u8ba8\u8bba\u7684\u4e00\u79cd\u5e38\u89c1 Python \u51fd\u6570\u662f<code>range</code>\u51fd\u6570\u3002 <code>range</code> \u751f\u6210\u4e00\u4e2a\u8868\u793a\u503c\u5e8f\u5217\u7684\u8303\u56f4\u5bf9\u8c61\u3002 \u901a\u8fc7\u4f7f\u7528<code>list</code>\u51fd\u6570\uff0c\u53ef\u4ee5\u5c06\u8303\u56f4\u5bf9\u8c61\u7684\u503c\u89c6\u4e3a\u5217\u8868\u3002 \u5982\u4e0b\u56fe\u6240\u793a\u3002</p> <pre><code>&gt;&gt;&gt; range(10)\nrange(0, 10)\n&gt;&gt;&gt; list(range(10))\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n&gt;&gt;&gt; range(5, 10)\nrange(5, 10)\n&gt;&gt;&gt; list(range(5, 10))\n[5, 6, 7, 8, 9]\n&gt;&gt;&gt; list(range(5, 10, 2))\n[5, 7, 9]\n&gt;&gt;&gt; list(range(10, 1, -1))\n[10, 9, 8, 7, 6, 5, 4, 3, 2]\n</code></pre> <p>range \u5bf9\u8c61\u8868\u793a\u4e00\u4e2a\u6574\u6570\u5e8f\u5217\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5b83\u5c06\u4ece 0 \u5f00\u59cb\u3002\u5982\u679c\u60a8\u63d0\u4f9b\u66f4\u591a\u53c2\u6570\uff0c\u5b83\u5c06\u5728\u7279\u5b9a\u70b9\u5f00\u59cb\u548c\u7ed3\u675f\uff0c\u751a\u81f3\u53ef\u4ee5\u8df3\u8fc7\u9879\u76ee\u3002 \u5728\u6211\u4eec\u7684\u7b2c\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c<code>range(10)</code>\uff0c\u5e8f\u5217\u4ece 0 \u5f00\u59cb\uff0c\u4e00\u76f4\u4e0a\u5347\u5230\u4f46\u4e0d\u5305\u62ec 10\u3002\u5728\u6211\u4eec\u7684\u7b2c\u4e8c\u4e2a\u793a\u4f8b\u4e2d\uff0c<code>range(5, 10)</code>\u4ece 5 \u5f00\u59cb\uff0c\u4e00\u76f4\u4e0a\u5347 \u5230\u4f46\u4e0d\u5305\u62ec 10\u3002<code>range(5, 10, 2)</code> \u6267\u884c\u7c7b\u4f3c\uff0c\u4f46\u8df3\u8fc7\u4e24\u4e2a\uff08\u540c\u6837\uff0c\u4e0d\u5305\u62ec 10\uff09\u3002</p> <p>A <code>list</code> is an ordered collection of zero or more references to Python data objects. Lists are written as comma-delimited values enclosed in square brackets. The empty list is simply <code>[ ]</code>. Lists are heterogeneous, meaning that the data objects need not all be from the same class and the collection can be assigned to a variable as below. The following fragment shows a variety of Python data objects in a list.</p> <pre><code>&gt;&gt;&gt; [1, 3, True, 6.5]\n[1, 3, True, 6.5]\n&gt;&gt;&gt; my_list = [1, 3, True, 6.5]\n&gt;&gt;&gt; my_list\n[1, 3, True, 6.5]\n</code></pre> <p>Note that when Python evaluates a list, the list itself is returned. However, in order to remember the list for later processing, its reference needs to be assigned to a variable.</p> <p>Since lists are considered to be sequentially ordered, they support a number of operations that can be applied to any Python sequence. Table 2 reviews these operations and the following session gives examples of their use.</p> <p>Table 2: Operations on Any Sequence in Python</p> Operation Name Operator Explanation indexing [ ] Access an element of a sequence concatenation + Combine sequences together repetition * Concatenate a repeated number of times membership in Ask whether an item is in a sequence length len Ask the number of items in the sequence slicing [ : ] Extract a part of a sequence <p>Note that the indices for lists (sequences) start counting with 0. The slice operation my_list[1:3] returns a list of items starting with the item indexed by 1 up to---but not including---the item indexed by 3.</p> <p>Sometimes you will want to initialize a list. This can quickly be accomplished by using repetition. For example,</p> <pre><code>&gt;&gt;&gt; my_list = [0] * 6\n&gt;&gt;&gt; my_list\n[0, 0, 0, 0, 0, 0]\n</code></pre> <p>One very important aside relating to the repetition operator is that the result is a repetition of references to the data objects in the sequence. This can best be seen by considering the following session:</p> Activity: 1.8.2.1 Repetition of References<pre><code>my_list = [1, 2, 3, 4]\nbig_list = [my_list] * 3\nprint(big_list)\nmy_list[2] = 45\nprint(big_list)\n</code></pre> <p>The variable <code>big_list</code> holds a collection of three references to the original list called <code>my_list</code>. Note that a change to one element of <code>my_list</code> shows up in all three occurrences in <code>big_list</code>.</p> <p>Lists support a number of methods that will be used to build data structures. <code>Table\u00a03</code> provides a summary. Examples of their use follow.</p> <p>Table 3: Methods Provided by Lists in Python</p> Method Name Use Explanation <code>append</code> <code>a_list.append(item)</code> Adds a new item to the end of a list <code>insert</code> <code>a_list.insert(i,item)</code> Inserts an item at the ith position in a list <code>pop</code> <code>a_list.pop()</code> Removes and returns the last item in a list <code>pop</code> <code>a_list.pop(i)</code> Removes and returns the ith item in a list <code>sort</code> <code>a_list.sort()</code> Sorts a list in place <code>reverse</code> <code>a_list.reverse()</code> Modifies a list to be in reverse order <code>del</code> <code>del a_list[i]</code> Deletes the item in the ith position <code>index</code> <code>a_list.index(item)</code> Returns the index of the first occurrence of <code>item</code> <code>count</code> <code>a_list.count(item)</code> Returns the number of occurrences of <code>item</code> <code>remove</code> <code>a_list.remove(item)</code> Removes the first occurrence of <code>item</code> Activity: 1.8.2.2 Examples of List Methods<pre><code>my_list = [1024, 3, True, 6.5]\nmy_list.append(False)\nprint(my_list)\nmy_list.insert(2,4.5)\nprint(my_list)\nprint(my_list.pop())\nprint(my_list)\nprint(my_list.pop(1))\nprint(my_list)\nmy_list.pop(2)\nprint(my_list)\nmy_list.sort()\nprint(my_list)\nmy_list.reverse()\nprint(my_list)\nprint(my_list.count(6.5))\nprint(my_list.index(4.5))\nmy_list.remove(6.5)\nprint(my_list)\ndel my_list[0]\nprint(my_list)\n</code></pre> <p>You can see that some of the methods, such as <code>pop</code>, return a value and also modify the list. Others, such as <code>reverse</code>, simply modify the list with no return value. <code>pop</code> will default to the end of the list but can also remove and return a specific item. The index range starting from 0 is again used for these methods. You should also notice the familiar \u201cdot\u201d notation for asking an object to invoke a method. <code>my_list.append(False)</code> can be read as \u201cask the object <code>my_list</code> to perform its <code>append</code> method and send it the value <code>False</code>.\u201d Even simple data objects such as integers can invoke methods in this way.</p> <pre><code>&gt;&gt;&gt; (54).__add__(21)\n75\n</code></pre> <p>In this fragment we are asking the integer object <code>54</code> to execute its <code>add</code> method (called <code>__add__</code> in Python) and passing it <code>21</code> as the value to add. The result is the sum, <code>75</code>. Of course, we usually write this as <code>54+21</code>. We will say much more about these methods later in this section.</p> <p>One common Python function that is often discussed in conjunction with lists is the <code>range</code> function. <code>range</code> produces a range object that represents a sequence of values. By using the <code>list</code> function, it is possible to see the value of the range object as a list. This is illustrated below.</p> <pre><code>&gt;&gt;&gt; range(10)\nrange(0, 10)\n&gt;&gt;&gt; list(range(10))\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n&gt;&gt;&gt; range(5, 10)\nrange(5, 10)\n&gt;&gt;&gt; list(range(5, 10))\n[5, 6, 7, 8, 9]\n&gt;&gt;&gt; list(range(5, 10, 2))\n[5, 7, 9]\n&gt;&gt;&gt; list(range(10, 1, -1))\n[10, 9, 8, 7, 6, 5, 4, 3, 2]\n</code></pre> <p>The range object represents a sequence of integers. By default, it will start with 0. If you provide more parameters, it will start and end at particular points and can even skip items. In our first example, <code>range(10)</code>, the sequence starts with 0 and goes up to but does not include 10. In our second example, <code>range(5, 10)</code> starts at 5 and goes up to but does not include 10. <code>range(5, 10, 2)</code> performs similarly but skips by twos (again, 10 is not included).</p>"},{"location":"c1/s8/#strings","title":"Strings","text":"\u4e2d\u6587\u82f1\u6587 <p>\u5b57\u7b26\u4e32(Strings)\u662f\u96f6\u4e2a\u6216\u591a\u4e2a\u5b57\u6bcd\u3001\u6570\u5b57\u548c\u5176\u4ed6\u7b26\u53f7\u7684\u8fde\u7eed\u96c6\u5408\u3002 \u6211\u4eec\u5c06\u8fd9\u4e9b\u5b57\u6bcd\u3001\u6570\u5b57\u548c\u5176\u4ed6\u7b26\u53f7\u79f0\u4e3a\u5b57\u7b26\u3002 \u6587\u5b57\u5b57\u7b26\u4e32\u503c\u901a\u8fc7\u4f7f\u7528\u5f15\u53f7\uff08\u5355\u5f15\u53f7\u6216\u53cc\u5f15\u53f7\uff09\u4e0e\u6807\u8bc6\u7b26\u533a\u5206\u5f00\u6765\u3002</p> <pre><code>&gt;&gt;&gt; \"David\"\n'David'\n&gt;&gt;&gt; my_name = \"David\"\n&gt;&gt;&gt; my_name[3]\n'i'\n&gt;&gt;&gt; my_name * 2\n'DavidDavid'\n&gt;&gt;&gt; len(my_name)\n5\n</code></pre> <p>\u7531\u4e8e\u5b57\u7b26\u4e32\u662f\u5e8f\u5217\uff0c\u56e0\u6b64\u4e0a\u8ff0\u6240\u6709\u5e8f\u5217\u64cd\u4f5c\u90fd\u6309\u60a8\u7684\u9884\u671f\u5de5\u4f5c\u3002 \u6b64\u5916\uff0c\u5b57\u7b26\u4e32\u8fd8\u6709\u8bb8\u591a\u65b9\u6cd5\uff0c\u5176\u4e2d\u4e00\u4e9b\u65b9\u6cd5\u5982\u201c\u8868 4\u201d\u6240\u793a\u3002</p> <p>\u8868 4\uff1aPython \u4e2d\u5b57\u7b26\u4e32\u63d0\u4f9b\u7684\u65b9\u6cd5</p> \u65b9\u6cd5\u540d\u79f0 \u7528\u6cd5 \u89e3\u91ca <code>center</code> <code>a_string.center(w)</code> \u8fd4\u56de\u4ee5\u5927\u5c0f\u4e3a<code>w</code>\u7684\u5b57\u6bb5\u4e3a\u4e2d\u5fc3\u7684\u5b57\u7b26\u4e32 <code>count</code> <code>a_string.count(item)</code> \u8fd4\u56de\u5b57\u7b26\u4e32\u4e2d<code>item</code>\u51fa\u73b0\u7684\u6b21\u6570 <code>ljust</code> <code>a_string.ljust(w)</code> \u8fd4\u56de\u5728\u5927\u5c0f\u4e3a<code>w</code>\u7684\u5b57\u6bb5\u4e2d\u5de6\u5bf9\u9f50\u7684\u5b57\u7b26\u4e32 <code>lower</code> <code>a_string.lower()</code> \u8fd4\u56de\u5168\u5c0f\u5199\u7684\u5b57\u7b26\u4e32 <code>rjust</code> <code>a_string.rjust(w)</code> \u8fd4\u56de\u5728\u5927\u5c0f\u4e3a<code>w</code>\u7684\u5b57\u6bb5\u4e2d\u53f3\u5bf9\u9f50\u7684\u5b57\u7b26\u4e32 <code>find</code> <code>a_string.find(item)</code> \u8fd4\u56de\u7b2c\u4e00\u6b21\u51fa\u73b0<code>item</code>\u7684\u7d22\u5f15 <code>split</code> <code>a_string.split(s_char)</code> \u5c06\u5b57\u7b26\u4e32\u62c6\u5206\u4e3a <code>s_char</code> \u5904\u7684\u5b50\u5b57\u7b26\u4e32 <p>\u5176\u4e2d\uff0c<code>split</code>\u5bf9\u4e8e\u5904\u7406\u6570\u636e\u975e\u5e38\u6709\u7528\u3002 <code>split</code> \u5c06\u63a5\u53d7\u4e00\u4e2a\u5b57\u7b26\u4e32\u5e76\u4f7f\u7528\u5206\u5272\u5b57\u7b26\u4f5c\u4e3a\u5206\u5272\u70b9\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\u5217\u8868\u3002 \u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c<code>v</code>\u662f\u5212\u5206\u70b9\u3002 \u5982\u679c\u672a\u6307\u5b9a\u9664\u6cd5\uff0c\u5219 <code>split</code> \u65b9\u6cd5\u5c06\u67e5\u627e\u7a7a\u767d\u5b57\u7b26\uff0c\u4f8b\u5982\u5236\u8868\u7b26\u3001\u6362\u884c\u7b26\u548c\u7a7a\u683c\u3002</p> <pre><code>&gt;&gt;&gt; my_name\n'David'\n&gt;&gt;&gt; my_name.upper()\n'DAVID'\n&gt;&gt;&gt; my_name.center(10)\n'  David   '\n&gt;&gt;&gt; my_name.find(\"v\")\n2\n&gt;&gt;&gt; my_name.split(\"v\")\n['Da', 'id']\n</code></pre> <p>\u5217\u8868\u548c\u5b57\u7b26\u4e32\u4e4b\u95f4\u7684\u4e3b\u8981\u533a\u522b\u662f\u5217\u8868\u53ef\u4ee5\u4fee\u6539\uff0c\u800c\u5b57\u7b26\u4e32\u5219\u4e0d\u80fd\u3002 \u8fd9\u79f0\u4e3a\u53ef\u53d8\u6027\u3002 \u5217\u8868\u662f\u53ef\u53d8\u7684\uff1b \u5b57\u7b26\u4e32\u662f\u4e0d\u53ef\u53d8\u7684\u3002 \u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u7d22\u5f15\u548c\u5206\u914d\u6765\u66f4\u6539\u5217\u8868\u4e2d\u7684\u9879\u76ee\u3002 \u5bf9\u4e8e\u4e0d\u5141\u8bb8\u66f4\u6539\u7684\u5b57\u7b26\u4e32\uff0c\u5982\u4e0b\u6240\u793a\u3002</p> <pre><code>&gt;&gt;&gt; my_list\n[1, 3, True, 6.5]\n&gt;&gt;&gt; my_list[0] = 2 ** 10\n&gt;&gt;&gt; my_list\n[1024, 3, True, 6.5]\n&gt;&gt;&gt;\n&gt;&gt;&gt; my_name\n'David'\n&gt;&gt;&gt; my_name[0] = \"X\"\nTraceback (most recent call last):\nFile \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: 'str' object does not support item assignment\n</code></pre> <p>Strings are sequential collections of zero or more letters, numbers, and other symbols. We call these letters, numbers, and other symbols characters. Literal string values are differentiated from identifiers by using quotation marks (either single or double).</p> <pre><code>&gt;&gt;&gt; \"David\"\n'David'\n&gt;&gt;&gt; my_name = \"David\"\n&gt;&gt;&gt; my_name[3]\n'i'\n&gt;&gt;&gt; my_name * 2\n'DavidDavid'\n&gt;&gt;&gt; len(my_name)\n5\n</code></pre> <p>Since strings are sequences, all of the sequence operations described above work as you would expect. In addition, strings have a number of methods, some of which are shown in <code>Table\u00a04</code>.</p> <p>Table 4: Methods Provided by Strings in Python</p> Method Name Use Explanation <code>center</code> <code>a_string.center(w)</code> Returns a string centered in a field of size <code>w</code> <code>count</code> <code>a_string.count(item)</code> Returns the number of occurrences of <code>item</code> in the string <code>ljust</code> <code>a_string.ljust(w)</code> Returns a string left-justified in a field of size <code>w</code> <code>lower</code> <code>a_string.lower()</code> Returns a string in all lowercase <code>rjust</code> <code>a_string.rjust(w)</code> Returns a string right-justified in a field of size <code>w</code> <code>find</code> <code>a_string.find(item)</code> Returns the index of the first occurrence of <code>item</code> <code>split</code> <code>a_string.split(s_char)</code> Splits a string into substrings at <code>s_char</code> <p>Of these, <code>split</code> will be very useful for processing data. <code>split</code> will take a string and return a list of strings using the split character as a division point. In the example below, \u201cv\u201d is the division point. If no division is specified, the split method looks for whitespace characters such as tab, newline, and space.</p> <pre><code>&gt;&gt;&gt; my_name\n'David'\n&gt;&gt;&gt; my_name.upper()\n'DAVID'\n&gt;&gt;&gt; my_name.center(10)\n'  David   '\n&gt;&gt;&gt; my_name.find(\"v\")\n2\n&gt;&gt;&gt; my_name.split(\"v\")\n['Da', 'id']\n</code></pre> <p>A major difference between lists and strings is that lists can be modified while strings cannot. This is referred to as mutability. Lists are mutable; strings are immutable. For example, you can change an item in a list by using indexing and assignment. With a string that change is not allowed, as shown below.</p> <pre><code>&gt;&gt;&gt; my_list\n[1, 3, True, 6.5]\n&gt;&gt;&gt; my_list[0] = 2 ** 10\n&gt;&gt;&gt; my_list\n[1024, 3, True, 6.5]\n&gt;&gt;&gt;\n&gt;&gt;&gt; my_name\n'David'\n&gt;&gt;&gt; my_name[0] = \"X\"\nTraceback (most recent call last):\nFile \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: 'str' object does not support item assignment\n</code></pre>"},{"location":"c1/s8/#tuples","title":"Tuples","text":"\u4e2d\u6587\u82f1\u6587 <p>\u5143\u7ec4(Tuples)\u4e0e\u5217\u8868\u975e\u5e38\u76f8\u4f3c\uff0c\u56e0\u4e3a\u5b83\u4eec\u662f\u5f02\u6784\u6570\u636e\u5e8f\u5217\u3002 \u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u5143\u7ec4\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u5c31\u50cf\u5b57\u7b26\u4e32\u4e00\u6837\u3002 \u5143\u7ec4\u65e0\u6cd5\u66f4\u6539\u3002 \u5143\u7ec4\u88ab\u5199\u4e3a\u62ec\u5728\u62ec\u53f7\u4e2d\u7684\u9017\u53f7\u5206\u9694\u503c\u3002 \u4f5c\u4e3a\u5e8f\u5217\uff0c\u5b83\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e0a\u8ff0\u4efb\u4f55\u64cd\u4f5c\u3002 \u4f8b\u5982\uff0c</p> <pre><code>&gt;&gt;&gt; my_tuple = (2, True, 4.96)\n&gt;&gt;&gt; my_tuple\n(2, True, 4.96)\n&gt;&gt;&gt; len(my_tuple)\n3\n&gt;&gt;&gt; my_tuple[0]\n2\n&gt;&gt;&gt; my_tuple * 3\n(2, True, 4.96, 2, True, 4.96, 2, True, 4.96)\n&gt;&gt;&gt; my_tuple[0:2]\n(2, True)\n</code></pre> <p>\u4f46\u662f\uff0c\u5982\u679c\u60a8\u5c1d\u8bd5\u66f4\u6539\u5143\u7ec4\u4e2d\u7684\u9879\u76ee\uff0c\u5219\u4f1a\u6536\u5230\u9519\u8bef\u3002 \u8bf7\u6ce8\u610f\uff0c\u9519\u8bef\u6d88\u606f\u63d0\u4f9b\u4e86\u95ee\u9898\u7684\u4f4d\u7f6e\u548c\u539f\u56e0\u3002</p> <pre><code>&gt;&gt;&gt; my_tuple[1] = False\nTraceback (most recent call last):\nFile \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: 'tuple' object does not support item assignment\n</code></pre> <p>Tuples are very similar to lists in that they are heterogeneous sequences of data. The difference is that a tuple is immutable, like a string. A tuple cannot be changed. Tuples are written as comma-delimited values enclosed in parentheses. As sequences, they can use any operation described above. For example,</p> <pre><code>&gt;&gt;&gt; my_tuple = (2, True, 4.96)\n&gt;&gt;&gt; my_tuple\n(2, True, 4.96)\n&gt;&gt;&gt; len(my_tuple)\n3\n&gt;&gt;&gt; my_tuple[0]\n2\n&gt;&gt;&gt; my_tuple * 3\n(2, True, 4.96, 2, True, 4.96, 2, True, 4.96)\n&gt;&gt;&gt; my_tuple[0:2]\n(2, True)\n</code></pre> <p>However, if you try to change an item in a tuple, you will get an error. Note that the error message provides the location and reason for the problem.</p> <pre><code>&gt;&gt;&gt; my_tuple[1] = False\nTraceback (most recent call last):\nFile \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: 'tuple' object does not support item assignment\n</code></pre>"},{"location":"c1/s8/#set","title":"set","text":"\u4e2d\u6587\u82f1\u6587 <p>\u96c6\u5408(set) \u662f\u96f6\u4e2a\u6216\u591a\u4e2a\u4e0d\u53ef\u53d8 Python \u6570\u636e\u5bf9\u8c61\u7684\u65e0\u5e8f\u96c6\u5408\u3002 \u96c6\u5408\u4e0d\u5141\u8bb8\u91cd\u590d\uff0c\u5e76\u4e14\u88ab\u5199\u4e3a\u7528\u5927\u62ec\u53f7\u62ec\u8d77\u6765\u7684\u9017\u53f7\u5206\u9694\u503c\u3002 \u7a7a\u96c6\u7531<code>set()</code>\u8868\u793a\u3002 \u96c6\u5408\u662f\u5f02\u6784\u7684\uff0c\u96c6\u5408\u53ef\u4ee5\u5206\u914d\u7ed9\u53d8\u91cf\uff0c\u5982\u4e0b\u6240\u793a\u3002</p> <pre><code>&gt;&gt;&gt; {3, 6, \"cat\", 4.5, False}\n{False, 3, 4.5, 6, 'cat'}\n&gt;&gt;&gt; my_set = {3, 6, \"cat\", 4.5, False}\n&gt;&gt;&gt; my_set\n{False, 3, 4.5, 6, 'cat'}\n</code></pre> <p>\u5c3d\u7ba1\u96c6\u5408\u4e0d\u88ab\u8ba4\u4e3a\u662f\u8fde\u7eed\u7684\uff0c\u4f46\u5b83\u4eec\u786e\u5b9e\u652f\u6301\u524d\u9762\u4ecb\u7ecd\u7684\u4e00\u4e9b\u719f\u6089\u7684\u64cd\u4f5c\u3002 <code>\u8868 5</code> \u56de\u987e\u4e86\u8fd9\u4e9b\u64cd\u4f5c\uff0c\u4e0b\u9762\u7684\u4f1a\u8bae\u7ed9\u51fa\u4e86\u5b83\u4eec\u7684\u4f7f\u7528\u793a\u4f8b\u3002</p> <p>\u8868 5\uff1aPython \u4e2d\u96c6\u5408\u7684\u64cd\u4f5c</p> \u8fd0\u7b97\u7b26\u540d\u79f0 \u8fd0\u7b97\u7b26 \u89e3\u91ca \u9879 <code>in</code> \u65f6\u5019\u4e3a\u96c6\u5408\u4e2d\u7684\u9879 \u957f\u5ea6 <code>len</code> \u8fd4\u56de\u96c6\u5408\u7684\u957f\u5ea6 <code>|</code> <code>a_set                                                          | other_set</code> \u8fd4\u56de\u4e00\u4e2a\u65b0\u96c6\u5408\uff0c\u5176\u4e2d\u5305\u542b\u4e24\u4e2a\u96c6\u5408\u4e2d\u7684\u6240\u6709\u5143\u7d20 <code>&amp;</code> <code>a_set &amp; other_set</code> \u8fd4\u56de\u4e00\u4e2a\u65b0\u96c6\u5408\uff0c\u5176\u4e2d\u4ec5\u5305\u542b\u4e24\u4e2a\u96c6\u5408\u5171\u6709\u7684\u5143\u7d20 <code>-</code> <code>a_set - other_set</code> \u8fd4\u56de\u4e00\u4e2a\u65b0\u96c6\u5408\uff0c\u5176\u4e2d\u5305\u542b\u7b2c\u4e00\u4e2a\u96c6\u5408\u4e2d\u4e0d\u5c5e\u4e8e\u7b2c\u4e8c\u4e2a\u96c6\u5408\u4e2d\u7684\u6240\u6709\u9879\u76ee <code>&lt;=</code> <code>a_set &lt;= other_set</code> \u8be2\u95ee\u7b2c\u4e00\u4e2a\u96c6\u5408\u7684\u6240\u6709\u5143\u7d20\u662f\u5426\u90fd\u5728\u7b2c\u4e8c\u4e2a\u96c6\u5408\u4e2d <pre><code>&gt;&gt;&gt; my_set\n{False, 3, 4.5, 6, 'cat'}\n&gt;&gt;&gt; len(my_set)\n5\n&gt;&gt;&gt; False in my_set\nTrue\n&gt;&gt;&gt; \"dog\" in my_set\nFalse\n</code></pre> <p>\u96c6\u5408\u652f\u6301\u8bb8\u591a\u65b9\u6cd5\uff0c\u90a3\u4e9b\u5728\u6570\u5b66\u73af\u5883\u4e2d\u4f7f\u7528\u8fc7\u96c6\u5408\u7684\u4eba\u5e94\u8be5\u719f\u6089\u8fd9\u4e9b\u65b9\u6cd5\u3002 \u8868 6 \u63d0\u4f9b\u4e86\u6458\u8981\u3002 \u5b83\u4eec\u7684\u4f7f\u7528\u793a\u4f8b\u5982\u4e0b\u3002 \u8bf7\u6ce8\u610f\uff0c<code>union</code>\u3001<code>intersection</code>\u3001<code>issubset</code>\u548c<code>difference</code>\u90fd\u5177\u6709\u53ef\u4ee5\u4f7f\u7528\u7684\u8fd0\u7b97\u7b26\u3002</p> <p>\u8868 6\uff1aPython \u4e2d\u96c6\u5408\u63d0\u4f9b\u7684\u65b9\u6cd5</p> \u65b9\u6cd5\u540d\u79f0 \u7528\u6cd5 \u89e3\u91ca <code>union</code> <code>a_set.union(other_set)</code> \u8fd4\u56de\u4e00\u4e2a\u65b0\u96c6\u5408\uff0c\u5176\u4e2d\u5305\u542b\u4e24\u4e2a\u96c6\u5408\u4e2d\u7684\u6240\u6709\u5143\u7d20 <code>intersection</code> <code>a_set.intersection(other_set)</code> \u8fd4\u56de\u4e00\u4e2a\u65b0\u96c6\u5408\uff0c\u5176\u4e2d\u4ec5\u5305\u542b\u4e24\u4e2a\u96c6\u5408\u5171\u6709\u7684\u5143\u7d20 <code>difference</code> <code>a_set.difference(other_set)</code> \u8fd4\u56de\u4e00\u4e2a\u65b0\u96c6\u5408\uff0c\u5176\u4e2d\u5305\u542b\u7b2c\u4e00\u4e2a\u96c6\u5408\u4e2d\u4e0d\u5c5e\u4e8e\u7b2c\u4e8c\u4e2a\u96c6\u5408\u4e2d\u7684\u6240\u6709\u9879\u76ee <code>issubset</code> <code>a_set.issubset(othe_rset)</code> \u8be2\u95ee\u4e00\u4e2a\u96c6\u5408\u7684\u6240\u6709\u5143\u7d20\u662f\u5426\u90fd\u5728\u53e6\u4e00\u4e2a\u96c6\u5408\u4e2d <code>add</code> <code>a_set.add(item)</code> \u5c06\u9879\u76ee\u6dfb\u52a0\u5230\u96c6\u5408\u4e2d <code>remove</code> <code>a_set.remove(item)</code> \u4ece\u96c6\u5408\u4e2d\u5220\u9664\u9879\u76ee <code>pop</code> <code>a_set.pop()</code> \u4ece\u96c6\u5408\u4e2d\u5220\u9664\u4efb\u610f\u5143\u7d20 <code>clear</code> <code>a_set.clear()</code> \u4ece\u96c6\u5408\u4e2d\u5220\u9664\u6240\u6709\u5143\u7d20 <pre><code>&gt;&gt;&gt; my_set\n{False, 3, 4.5, 6, 'cat'}\n&gt;&gt;&gt; your_set = {99, 3, 100}\n&gt;&gt;&gt; my_set.union(your_set)\n{False, 3, 4.5, 'cat', 6, 99, 100}\n&gt;&gt;&gt; my_set | your_set\n{False, 3, 4.5, 'cat', 6, 99, 100}\n&gt;&gt;&gt; my_set.intersection(your_set)\n{3}\n&gt;&gt;&gt; my_set &amp; your_set\n{3}\n&gt;&gt;&gt; my_set.difference(your_set)\n{False, 'cat', 4.5, 6}\n&gt;&gt;&gt; my_set - your_set\n{False, 'cat', 4.5, 6}\n&gt;&gt;&gt; {3, 100}.issubset(your_set)\nTrue\n&gt;&gt;&gt; {3, 100} &lt;= your_set\nTrue\n&gt;&gt;&gt; my_set.add(\"house\")\n&gt;&gt;&gt; my_set\n{False, 'house', 3, 4.5, 6, 'cat'}\n&gt;&gt;&gt; my_set.remove(4.5)\n&gt;&gt;&gt; my_set\n{False, 'house', 3, 6, 'cat'}\n&gt;&gt;&gt; my_set.pop()\nFalse\n&gt;&gt;&gt; my_set\n{'house', 3, 6, 'cat'}\n&gt;&gt;&gt; my_set.clear()\n&gt;&gt;&gt; my_set\nset()\n</code></pre> <p>\u6211\u4eec\u6700\u7ec8\u7684 Python \u96c6\u5408\u662f\u4e00\u4e2a\u65e0\u5e8f\u7ed3\u6784\uff0c\u79f0\u4e3a \u5b57\u5178\u3002 \u5b57\u5178\u662f\u76f8\u5173\u9879\u76ee\u5bf9\u7684\u96c6\u5408\uff0c\u5176\u4e2d\u6bcf\u5bf9\u90fd\u5305\u542b\u4e00\u4e2a\u952e\u548c\u4e00\u4e2a\u503c\u3002 \u8be5\u952e\u503c\u5bf9\u901a\u5e38\u5199\u4e3a\u952e\uff1a\u503c\u3002 \u5b57\u5178\u4ee5\u9017\u53f7\u5206\u9694\u7684\u952e\uff1a\u503c\u5bf9\u5f62\u5f0f\u7f16\u5199\uff0c\u5e76\u62ec\u5728\u5927\u62ec\u53f7\u4e2d\u3002 \u4f8b\u5982\uff0c</p> <pre><code>&gt;&gt;&gt; capitals = {\"Iowa\": \"Des Moines\", \"Wisconsin\": \"Madison\"}\n&gt;&gt;&gt; capitals\n{'Iowa': 'Des Moines', 'Wisconsin': 'Madison'}\n</code></pre> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u952e\u8bbf\u95ee\u503c\u6216\u6dfb\u52a0\u53e6\u4e00\u4e2a\u952e\u503c\u5bf9\u6765\u64cd\u4f5c\u5b57\u5178\u3002 \u8bbf\u95ee\u7684\u8bed\u6cd5\u770b\u8d77\u6765\u5f88\u50cf\u5e8f\u5217\u8bbf\u95ee\uff0c\u53ea\u4e0d\u8fc7\u6211\u4eec\u4e0d\u4f7f\u7528\u9879\u76ee\u7684\u7d22\u5f15\uff0c\u800c\u662f\u4f7f\u7528\u952e\u503c\u3002 \u6dfb\u52a0\u65b0\u503c\u4e5f\u662f\u7c7b\u4f3c\u7684\u3002</p> Using a Dictionary<pre><code>capitals = {\"Iowa\": \"Des Moines\", \"Wisconsin\": \"Madison\"}\nprint(capitals[\"Iowa\"])\ncapitals[\"Utah\"] = \"Salt Lake City\"\nprint(capitals)\ncapitals[\"California\"] = \"Sacramento\"\nprint(len(capitals))\nfor k in capitals:\n    print(capitals[k],\"is the capital of\", k)\n</code></pre> <p>\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5728 Python 3.6 \u4e4b\u524d\uff0c\u5b57\u5178\u7684\u7ef4\u62a4\u987a\u5e8f\u4e0e\u952e\u6ca1\u6709\u7279\u5b9a\u7684\u987a\u5e8f\u3002 \u6dfb\u52a0\u7684\u7b2c\u4e00\u5bf9 (<code>\"Utah\":</code> <code>\"Salt Lake City\"</code>) \u5c06\u653e\u5728\u5b57\u5178\u4e2d\u7684\u7b2c\u4e00\u4f4d\uff0c\u6dfb\u52a0\u7684\u7b2c\u4e8c\u5bf9 (<code>\"California\":</code> <code>\"Sacramento\"</code>) \u5c06\u653e\u5728\u6700\u540e\u3002 \u952e\u7684\u653e\u7f6e\u53d6\u51b3\u4e8e \u6563\u5217 \u7684\u601d\u60f3\uff0c\u8fd9\u5c06\u5728\u7b2c 5 \u7ae0\u4e2d\u66f4\u8be6\u7ec6\u5730\u89e3\u91ca\u3002\u81ea Python 3.6 \u4ee5\u6765\uff0c\u5b57\u5178\u786e\u5b9e\u4fdd\u6301\u987a\u5e8f\uff0c\u56e0\u6b64\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u5bf9\u6309\u7167\u5b83\u4eec\u5728\u5b57\u5178\u4e2d\u51fa\u73b0\u7684\u987a\u5e8f\u51fa\u73b0\u3002 \u6dfb\u52a0\u3002 \u6211\u4eec\u8fd8\u5c55\u793a\u4e86\u957f\u5ea6\u51fd\u6570\uff0c\u5176\u4f5c\u7528\u4e0e\u5176\u4ed6\u96c6\u5408\u76f8\u540c\u3002</p> <p>\u5b57\u5178\u65e2\u6709\u65b9\u6cd5\u53c8\u6709\u8fd0\u7b97\u7b26\u3002 \u201c\u8868 7\u201d\u548c\u201c\u8868 8\u201d\u5bf9\u5b83\u4eec\u8fdb\u884c\u4e86\u63cf\u8ff0\uff0c\u4f1a\u8bae\u5c55\u793a\u4e86\u5b83\u4eec\u7684\u5b9e\u9645\u5e94\u7528\u3002 <code>keys</code>\u3001<code>values</code>\u548c<code>items</code>\u65b9\u6cd5\u90fd\u8fd4\u56de\u5305\u542b\u611f\u5174\u8da3\u503c\u7684\u5bf9\u8c61\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528<code>list</code>\u51fd\u6570\u5c06\u5b83\u4eec\u8f6c\u6362\u4e3a\u5217\u8868\u3002 \u60a8\u8fd8\u5c06\u770b\u5230<code>get</code>\u65b9\u6cd5\u6709\u4e24\u79cd\u53d8\u4f53\u3002 \u5982\u679c\u5b57\u5178\u4e2d\u4e0d\u5b58\u5728\u8be5\u952e\uff0c<code>get</code>\u5c06\u8fd4\u56de<code>None</code>\u3002 \u4f46\u662f\uff0c\u7b2c\u4e8c\u4e2a\u53ef\u9009\u53c2\u6570\u53ef\u4ee5\u6307\u5b9a\u8fd4\u56de\u503c\u3002</p> <p>\u8868 7\uff1aPython \u4e2d\u5b57\u5178\u63d0\u4f9b\u7684\u8fd0\u7b97\u7b26</p> \u8fd0\u7b97\u7b26 \u7528\u6cd5 \u89e3\u91ca <code>[]</code> <code>a_dict[k]</code> \u8fd4\u56de\u4e0e<code>k</code>\u5173\u8054\u7684\u503c\uff0c\u5426\u5219\u9519\u8bef <code>in</code> <code>key in a_dict</code> \u5982\u679c\u952e\u5728\u5b57\u5178\u4e2d\u5219\u8fd4\u56de<code>True</code>\uff0c\u5426\u5219\u8fd4\u56de<code>False</code> <code>del</code> del <code>a_dict[key]</code> \u4ece\u5b57\u5178\u4e2d\u5220\u9664\u6761\u76ee <p>\u8868 8\uff1aPython \u4e2d\u5b57\u5178\u63d0\u4f9b\u7684\u65b9\u6cd5</p> \u65b9\u6cd5\u540d\u79f0 \u7528\u6cd5 \u89e3\u91ca <code>keys</code> <code>a_dict.keys()</code> \u8fd4\u56de dict_keys \u5bf9\u8c61\u4e2d\u5b57\u5178\u7684\u952e <code>values</code> <code>a_dict.values()</code> \u8fd4\u56de dict_values \u5bf9\u8c61\u4e2d\u5b57\u5178\u7684\u503c <code>items</code> <code>a_dict.items()</code> \u8fd4\u56de dict_items \u5bf9\u8c61\u4e2d\u7684\u952e\u503c\u5bf9 <code>get</code> <code>a_dict.get(k)</code> \u8fd4\u56de\u4e0e<code>k</code>\u76f8\u5173\u7684\u503c\uff0c\u5426\u5219\u8fd4\u56de<code>None</code> <code>get</code> <code>a_dict.get(k, alt)</code> \u5426\u5219\u8fd4\u56de\u4e0e<code>k</code>\u3001<code>alt</code>\u5173\u8054\u7684\u503c <pre><code>&gt;&gt;&gt; phone_ext={\"david\": 1410, \"brad\": 1137, \"roman\": 1171}\n&gt;&gt;&gt; phone_ext\n{'david': 1410, 'brad': 1137, 'roman': 1171}\n&gt;&gt;&gt; phone_ext.keys()\ndict_keys(['david', 'brad', 'roman'])\n&gt;&gt;&gt; list(phone_ext.keys())\n['david', 'brad', 'roman']\n&gt;&gt;&gt; phone_ext.values()\ndict_values([1410, 1137, 1171])\n&gt;&gt;&gt; list(phone_ext.values())\n[1410, 1137, 1171]\n&gt;&gt;&gt; phone_ext.items()\ndict_items([('david', 1410), ('brad', 1137), ('roman', 1171)])\n&gt;&gt;&gt; list(phone_ext.items())\n[('david', 1410), ('brad', 1137), ('roman', 1171)]\n&gt;&gt;&gt; phone_ext.get(\"kent\")\n&gt;&gt;&gt; phone_ext.get(\"kent\", \"NO ENTRY\")\n'NO ENTRY'\n</code></pre> <p>A set is an unordered collection of zero or more immutable Python data objects. Sets do not allow duplicates and are written as comma-delimited values enclosed in curly braces. The empty set is represented by <code>set()</code>. Sets are heterogeneous, and the collection can be assigned to a variable as below.</p> <pre><code>&gt;&gt;&gt; {3, 6, \"cat\", 4.5, False}\n{False, 3, 4.5, 6, 'cat'}\n&gt;&gt;&gt; my_set = {3, 6, \"cat\", 4.5, False}\n&gt;&gt;&gt; my_set\n{False, 3, 4.5, 6, 'cat'}\n</code></pre> <p>Even though sets are not considered to be sequential, they do support a few of the familiar operations presented earlier. <code>Table\u00a05</code> reviews these operations and the following session gives examples of their use.</p> <p>Table 5: Operations on a Set in Python</p> Operation Name Operator Explanation membership <code>in</code> Set membership length <code>len</code> Returns the cardinality of the set <code>|</code> <code>a_set                                                                | other_set</code> Returns a new set with all elements from both sets <code>&amp;</code> <code>a_set &amp; other_set</code> Returns a new set with only those elements common to both sets <code>-</code> <code>a_set - other_set</code> Returns a new set with all items from the first set not in the second <code>&lt;=</code> <code>a_set &lt;= other_set</code> Asks whether all elements of  the first set are in the second <pre><code>&gt;&gt;&gt; my_set\n{False, 3, 4.5, 6, 'cat'}\n&gt;&gt;&gt; len(my_set)\n5\n&gt;&gt;&gt; False in my_set\nTrue\n&gt;&gt;&gt; \"dog\" in my_set\nFalse\n</code></pre> <p>Sets support a number of methods that should be familiar to those who have worked with them in a mathematics setting. <code>Table\u00a06</code> provides a summary. Examples of their use follow. Note that <code>union</code>, <code>intersection</code>, <code>issubset</code>, and <code>difference</code> all have operators that can be used as well.</p> <p>Table 6: Methods Provided by Sets in Python</p> Method Name Use Explanation <code>union</code> <code>a_set.union(other_set)</code> Returns a new set with all elements from both sets <code>intersection</code> <code>a_set.intersection(other_set)</code> Returns a new set with only those elements common to both sets <code>difference</code> <code>a_set.difference(other_set)</code> Returns a new set with all items from the first set not in the second <code>issubset</code> <code>a_set.issubset(othe_rset)</code> Asks whether all elements of one set are in the other <code>add</code> <code>a_set.add(item)</code> Adds item to the set <code>remove</code> <code>a_set.remove(item)</code> Removes item from the set <code>pop</code> <code>a_set.pop()</code> Removes an arbitrary element from the set <code>clear</code> <code>a_set.clear()</code> Removes all elements from the set <pre><code>&gt;&gt;&gt; my_set\n{False, 3, 4.5, 6, 'cat'}\n&gt;&gt;&gt; your_set = {99, 3, 100}\n&gt;&gt;&gt; my_set.union(your_set)\n{False, 3, 4.5, 'cat', 6, 99, 100}\n&gt;&gt;&gt; my_set | your_set\n{False, 3, 4.5, 'cat', 6, 99, 100}\n&gt;&gt;&gt; my_set.intersection(your_set)\n{3}\n&gt;&gt;&gt; my_set &amp; your_set\n{3}\n&gt;&gt;&gt; my_set.difference(your_set)\n{False, 'cat', 4.5, 6}\n&gt;&gt;&gt; my_set - your_set\n{False, 'cat', 4.5, 6}\n&gt;&gt;&gt; {3, 100}.issubset(your_set)\nTrue\n&gt;&gt;&gt; {3, 100} &lt;= your_set\nTrue\n&gt;&gt;&gt; my_set.add(\"house\")\n&gt;&gt;&gt; my_set\n{False, 'house', 3, 4.5, 6, 'cat'}\n&gt;&gt;&gt; my_set.remove(4.5)\n&gt;&gt;&gt; my_set\n{False, 'house', 3, 6, 'cat'}\n&gt;&gt;&gt; my_set.pop()\nFalse\n&gt;&gt;&gt; my_set\n{'house', 3, 6, 'cat'}\n&gt;&gt;&gt; my_set.clear()\n&gt;&gt;&gt; my_set\nset()\n</code></pre> <p>Our final Python collection is an unordered structure called a dictionary. Dictionaries are collections of associated pairs of items where each pair consists of a key and a value. This key-value pair is typically written as key:value. Dictionaries are written as comma-delimited key:value pairs enclosed in curly braces. For example,</p> <pre><code>&gt;&gt;&gt; capitals = {\"Iowa\": \"Des Moines\", \"Wisconsin\": \"Madison\"}\n&gt;&gt;&gt; capitals\n{'Iowa': 'Des Moines', 'Wisconsin': 'Madison'}\n</code></pre> <p>We can manipulate a dictionary by accessing a value via its key or by adding another key-value pair. The syntax for access looks much like a sequence access except that instead of using the index of the item, we use the key value. To add a new value is similar.</p> Using a Dictionary<pre><code>capitals = {\"Iowa\": \"Des Moines\", \"Wisconsin\": \"Madison\"}\nprint(capitals[\"Iowa\"])\ncapitals[\"Utah\"] = \"Salt Lake City\"\nprint(capitals)\ncapitals[\"California\"] = \"Sacramento\"\nprint(len(capitals))\nfor k in capitals:\n    print(capitals[k],\"is the capital of\", k)\n</code></pre> <p>It is important to note that prior to Python 3.6 dictionaries were maintained in no particular order with respect to the keys. The first pair added (<code>\"Utah\":</code> <code>\"Salt Lake City\"</code>) would be placed first in the dictionary and the second pair added (<code>\"California\":</code> <code>\"Sacramento\"</code>) would be placed last. The placement of a key is dependent on the idea of hashing, which will be explained in more detail in Chapter 5. Dictionaries do maintain the order since Python 3.6, so in the example above the pairs appear in the dictionary in the order they were added. We also show the length function performing the same role as with other collections.</p> <p>Dictionaries have both methods and operators. <code>Table\u00a07</code> and <code>Table 8</code> describe them, and the session shows them in action. The <code>keys</code>, <code>values</code>, and <code>items</code> methods all return objects that contain the values of interest. You can use the <code>list</code> function to convert them to lists. You will also see that there are two variations on the <code>get</code> method. If the key is not present in the dictionary, <code>get</code> will return <code>None</code>. However, a second, optional parameter can specify a return value instead.</p> <p>Table 7: Operators Provided by Dictionaries in Python</p> Operator Use Explanation <code>[]</code> <code>a_dict[k]</code> Returns the value associated with <code>k</code>, otherwise its an error <code>in</code> <code>key in a_dict</code> Returns <code>True</code> if key is in the   dictionary, <code>False</code> otherwise <code>del</code> del <code>a_dict[key]</code> Removes the entry from the dictionary <p>Table 8: Methods Provided by Dictionaries in Python</p> Method Name Use Explanation <code>keys</code> <code>a_dict.keys()</code> Returns the keys of the dictionary in a dict_keys object <code>values</code> <code>a_dict.values()</code> Returns the values of the dictionary in a dict_values object <code>items</code> <code>a_dict.items()</code> Returns the key-value pairs in a dict_items object <code>get</code> <code>a_dict.get(k)</code> Returns the value associated with <code>k</code>, <code>None</code> otherwise <code>get</code> <code>a_dict.get(k, alt)</code> Returns the value associated with <code>k</code>, <code>alt</code> otherwise <pre><code>&gt;&gt;&gt; phone_ext={\"david\": 1410, \"brad\": 1137, \"roman\": 1171}\n&gt;&gt;&gt; phone_ext\n{'david': 1410, 'brad': 1137, 'roman': 1171}\n&gt;&gt;&gt; phone_ext.keys()\ndict_keys(['david', 'brad', 'roman'])\n&gt;&gt;&gt; list(phone_ext.keys())\n['david', 'brad', 'roman']\n&gt;&gt;&gt; phone_ext.values()\ndict_values([1410, 1137, 1171])\n&gt;&gt;&gt; list(phone_ext.values())\n[1410, 1137, 1171]\n&gt;&gt;&gt; phone_ext.items()\ndict_items([('david', 1410), ('brad', 1137), ('roman', 1171)])\n&gt;&gt;&gt; list(phone_ext.items())\n[('david', 1410), ('brad', 1137), ('roman', 1171)]\n&gt;&gt;&gt; phone_ext.get(\"kent\")\n&gt;&gt;&gt; phone_ext.get(\"kent\", \"NO ENTRY\")\n'NO ENTRY'\n</code></pre>"},{"location":"c1/s9/","title":"1.9. \u8f93\u5165\u548c\u8f93\u51fa","text":"<p>1.9. Input and Output</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u7ecf\u5e38\u9700\u8981\u4e0e\u7528\u6237\u4ea4\u4e92\uff0c\u8981\u4e48\u83b7\u53d6\u6570\u636e\uff0c\u8981\u4e48\u63d0\u4f9b\u67d0\u79cd\u7ed3\u679c\u3002 \u5982\u4eca\uff0c\u5927\u591a\u6570\u7a0b\u5e8f\u90fd\u4f7f\u7528\u5bf9\u8bdd\u6846\u6765\u8981\u6c42\u7528\u6237\u63d0\u4f9b\u67d0\u79cd\u7c7b\u578b\u7684\u8f93\u5165\u3002 \u867d\u7136 Python \u786e\u5b9e\u6709\u4e00\u79cd\u521b\u5efa\u5bf9\u8bdd\u6846\u7684\u65b9\u6cd5\uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u66f4\u7b80\u5355\u7684\u51fd\u6570\u3002 Python \u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u51fd\u6570\uff0c\u5141\u8bb8\u6211\u4eec\u8981\u6c42\u7528\u6237\u8f93\u5165\u4e00\u4e9b\u6570\u636e\u5e76\u4ee5\u5b57\u7b26\u4e32\u7684\u5f62\u5f0f\u8fd4\u56de\u5bf9\u6570\u636e\u7684\u5f15\u7528\u3002 \u8be5\u51fd\u6570\u79f0\u4e3a<code>input</code>\u3002</p> <p>Python \u7684\u51fd\u6570<code>input</code>\u63a5\u53d7\u4e00\u4e2a\u5b57\u7b26\u4e32\u53c2\u6570\u3002 \u8be5\u5b57\u7b26\u4e32\u901a\u5e38\u79f0\u4e3a \u63d0\u793a(prompt)\uff0c\u56e0\u4e3a\u5b83\u5305\u542b\u4e00\u4e9b\u6709\u7528\u7684\u6587\u672c\uff0c\u63d0\u793a\u7528\u6237\u8f93\u5165\u67d0\u4e9b\u5185\u5bb9\u3002 \u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u6309\u5982\u4e0b\u65b9\u5f0f\u8c03\u7528\u8f93\u5165\uff1a</p> <pre><code>a_name = input(\"Please enter your name: \")\n</code></pre> <p>\u73b0\u5728\uff0c\u65e0\u8bba\u7528\u6237\u5728\u63d0\u793a\u540e\u8f93\u5165\u4ec0\u4e48\u5185\u5bb9\uff0c\u90fd\u5c06\u5b58\u50a8\u5728<code>a_name</code>\u53d8\u91cf\u4e2d\u3002 \u4f7f\u7528<code>input</code>\u51fd\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u7f16\u5199\u6307\u4ee4\uff0c\u63d0\u793a\u7528\u6237\u8f93\u5165\u6570\u636e\uff0c\u7136\u540e\u5c06\u8be5\u6570\u636e\u5408\u5e76\u5230\u8fdb\u4e00\u6b65\u5904\u7406\u4e2d\u3002 \u4f8b\u5982\uff0c\u5728\u4ee5\u4e0b\u4e24\u4e2a\u8bed\u53e5\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u8bed\u53e5\u8be2\u95ee\u7528\u6237\u7684\u59d3\u540d\uff0c\u7b2c\u4e8c\u4e2a\u8bed\u53e5\u6839\u636e\u63d0\u4f9b\u7684\u5b57\u7b26\u4e32\u6253\u5370\u4e00\u4e9b\u7b80\u5355\u5904\u7406\u7684\u7ed3\u679c\u3002</p> The input Function Returns a String<pre><code>a_name = input(\"Please enter your name: \")\nprint(\"Your name in all capitals is\", a_name.upper(),\n        \"and has length\", len(a_name))\n</code></pre> <p>\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u4ece<code>input</code>\u51fd\u6570\u8fd4\u56de\u7684\u503c\u5c06\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8868\u793a\u5728\u63d0\u793a\u540e\u8f93\u5165\u7684\u786e\u5207\u5b57\u7b26\u3002 \u5982\u679c\u60a8\u5e0c\u671b\u5c06\u6b64\u5b57\u7b26\u4e32\u89e3\u91ca\u4e3a\u53e6\u4e00\u79cd\u7c7b\u578b\uff0c\u5219\u5fc5\u987b\u663e\u5f0f\u63d0\u4f9b\u7c7b\u578b\u8f6c\u6362\u3002 \u5728\u4e0b\u9762\u7684\u8bed\u53e5\u4e2d\uff0c\u7528\u6237\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u88ab\u8f6c\u6362\u4e3a\u6d6e\u70b9\u6570\uff0c\u4ee5\u4fbf\u53ef\u4ee5\u7528\u4e8e\u8fdb\u4e00\u6b65\u7684\u7b97\u672f\u5904\u7406\u3002</p> <pre><code>&gt;&gt;&gt; s_radius = input(\"Please enter the radius of the circle \")\nPlease enter the radius of the circle 10\n&gt;&gt;&gt; s_radius\n'10'\n&gt;&gt;&gt; radius = float(s_radius)\n&gt;&gt;&gt; radius\n10.0\n&gt;&gt;&gt; diameter = 2 * radius\n&gt;&gt;&gt; diameter\n20.0\n</code></pre> <p>We often have a need to interact with users, either to get data or to provide some sort of result. Most programs today use a dialog box as a way of asking the user to provide some type of input. While Python does have a way to create dialog boxes, there is a much simpler function that we can use. Python provides us with a function that allows us to ask a user to enter some data and returns a reference to the data in the form of a string. The function is called <code>input</code>.</p> <p>Python\u2019s function <code>input</code> takes a single parameter that is a string. This string is often called the prompt because it contains some helpful text prompting the user to enter something. For example, you might call input as follows:</p> <pre><code>a_name = input(\"Please enter your name: \")\n</code></pre> <p>Now whatever the user types after the prompt will be stored in the <code>a_name</code> variable. Using the <code>input</code> function, we can easily write instructions that will prompt the user to enter data and then incorporate that data into further processing. For example, in the following two statements, the first asks the user for their name and the second prints the result of some simple processing based on the string that is provided.</p> The input Function Returns a String<pre><code>a_name = input(\"Please enter your name: \")\nprint(\"Your name in all capitals is\", a_name.upper(),\n        \"and has length\", len(a_name))\n</code></pre> <p>It is important to note that the value returned from the <code>input</code> function will be a string representing the exact characters that were entered after the prompt. If you want this string interpreted as another type, you must provide the type conversion explicitly. In the statements below, the string that is entered by the user is converted to a float so that it can be used in further arithmetic processing.</p> <pre><code>&gt;&gt;&gt; s_radius = input(\"Please enter the radius of the circle \")\nPlease enter the radius of the circle 10\n&gt;&gt;&gt; s_radius\n'10'\n&gt;&gt;&gt; radius = float(s_radius)\n&gt;&gt;&gt; radius\n10.0\n&gt;&gt;&gt; diameter = 2 * radius\n&gt;&gt;&gt; diameter\n20.0\n</code></pre>"},{"location":"c1/s9/#191-\u5b57\u7b26\u4e32\u683c\u5f0f\u5316","title":"1.9.1. \u5b57\u7b26\u4e32\u683c\u5f0f\u5316","text":"<p>1.9.1. String Formatting</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u5df2\u7ecf\u770b\u5230\uff0c<code>print</code>\u51fd\u6570\u63d0\u4f9b\u4e86\u4e00\u79cd\u975e\u5e38\u7b80\u5355\u7684\u65b9\u6cd5\u6765\u4ece Python \u7a0b\u5e8f\u8f93\u51fa\u503c\u3002 <code>print</code> \u63a5\u53d7\u96f6\u4e2a\u6216\u591a\u4e2a\u53c2\u6570\uff0c\u5e76\u4f7f\u7528\u5355\u4e2a\u7a7a\u683c\u4f5c\u4e3a\u9ed8\u8ba4\u5206\u9694\u7b26\u6765\u663e\u793a\u5b83\u4eec\u3002 \u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e<code>sep</code>\u53c2\u6570\u6765\u66f4\u6539\u5206\u9694\u7b26\u3002 \u6b64\u5916\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6bcf\u6b21\u6253\u5370\u90fd\u4f1a\u4ee5\u6362\u884c\u7b26\u7ed3\u5c3e\u3002 \u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e <code>end</code> \u53c2\u6570\u6765\u66f4\u6539\u6b64\u884c\u4e3a\u3002 \u8fd9\u4e9b\u53d8\u5316\u663e\u793a\u5728\u4ee5\u4e0b\u4f1a\u8bdd\u4e2d\uff1a</p> <pre><code>&gt;&gt;&gt; print(\"Hello\")\nHello\n&gt;&gt;&gt; print(\"Hello\", \"World\")\nHello World\n&gt;&gt;&gt; print(\"Hello\", \"World\", sep=\"***\")\nHello***World\n&gt;&gt;&gt; print(\"Hello\", \"World\", end=\"***\")\nHello World***&gt;&gt;&gt;\n</code></pre> <p>\u5bf9\u8f93\u51fa\u7684\u5916\u89c2\u8fdb\u884c\u66f4\u591a\u63a7\u5236\u901a\u5e38\u5f88\u6709\u7528\u3002 \u5e78\u8fd0\u7684\u662f\uff0cPython \u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u79cd\u66ff\u4ee3\u65b9\u6848\uff0c\u79f0\u4e3a \u683c\u5f0f\u5316\u5b57\u7b26\u4e32(formatted strings)\u3002 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u662f\u4e00\u4e2a\u6a21\u677f\uff0c\u5176\u4e2d\u4fdd\u6301\u4e0d\u53d8\u7684\u5355\u8bcd\u6216\u7a7a\u683c\u4e0e\u5c06\u63d2\u5165\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u53d8\u91cf\u7684\u5360\u4f4d\u7b26\u7ec4\u5408\u5728\u4e00\u8d77\u3002 \u4f8b\u5982\uff0c\u58f0\u660e</p> <pre><code>&gt;&gt;&gt; print(a_name, \"is\", age, \"years old.\")\n</code></pre> <p>\u5305\u542b\u5355\u8bcd<code>is</code>\u548c<code>years old</code>\uff0c\u4f46\u662f\u540d\u5b57\u548c\u5e74\u9f84\u4f1a\u6839\u636e\u6267\u884c\u65f6\u7684\u53d8\u91cf\u503c\u800c\u6539\u53d8\u3002 \u4f7f\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff0c\u6211\u4eec\u5c06\u524d\u9762\u7684\u8bed\u53e5\u5199\u4e3a</p> <pre><code>&gt;&gt;&gt; print(\"%s is %d years old.\" % (a_name, age))\n</code></pre> <p>\u8fd9\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\u8bf4\u660e\u4e86\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32\u8868\u8fbe\u5f0f\u3002 <code>%</code> \u8fd0\u7b97\u7b26\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u8fd0\u7b97\u7b26\uff0c\u79f0\u4e3a \u683c\u5f0f\u8fd0\u7b97\u7b26(format operator)\u3002 \u8868\u8fbe\u5f0f\u7684\u5de6\u4fa7\u4fdd\u5b58\u6a21\u677f\u6216\u683c\u5f0f\u5b57\u7b26\u4e32\uff0c\u53f3\u4fa7\u4fdd\u5b58\u5c06\u66ff\u6362\u5230\u683c\u5f0f\u5b57\u7b26\u4e32\u4e2d\u7684\u503c\u7684\u96c6\u5408\u3002 \u8bf7\u6ce8\u610f\uff0c\u53f3\u4fa7\u96c6\u5408\u4e2d\u503c\u7684\u6570\u91cf\u4e0e\u683c\u5f0f\u5b57\u7b26\u4e32\u4e2d<code>%</code>\u5b57\u7b26\u7684\u6570\u91cf\u76f8\u5bf9\u5e94\u3002 \u4ece\u96c6\u5408\u4e2d\u6309\u987a\u5e8f\u4ece\u5de6\u5230\u53f3\u83b7\u53d6\u503c\u5e76\u5c06\u5176\u63d2\u5165\u5230\u683c\u5f0f\u5b57\u7b26\u4e32\u4e2d\u3002</p> <p>\u8ba9\u6211\u4eec\u66f4\u8be6\u7ec6\u5730\u770b\u770b\u8fd9\u4e2a\u683c\u5f0f\u5316\u8868\u8fbe\u5f0f\u7684\u4e24\u8fb9\u3002 \u683c\u5f0f\u5b57\u7b26\u4e32\u53ef\u4ee5\u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2a\u8f6c\u6362\u89c4\u8303\u3002 \u8f6c\u6362\u5b57\u7b26\u544a\u8bc9\u683c\u5f0f\u8fd0\u7b97\u7b26\u4ec0\u4e48\u7c7b\u578b\u7684\u503c\u5c06\u88ab\u63d2\u5165\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u8be5\u4f4d\u7f6e\u3002 \u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c<code>%s</code>\u6307\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u800c<code>%d</code>\u6307\u5b9a\u4e00\u4e2a\u6574\u6570\u3002 \u5176\u4ed6\u53ef\u80fd\u7684\u7c7b\u578b\u89c4\u8303\u5305\u62ec<code>i</code>\u3001<code>u</code>\u3001<code>f</code>\u3001<code>e</code>\u3001<code>g</code>\u3001<code>c</code>\u6216<code>%</code>\u3002 \u201c\u8868 9\u201d\u603b\u7ed3\u4e86\u6240\u6709\u5404\u79cd\u7c7b\u578b\u7684\u89c4\u683c\u3002</p> <p>\u8868 9\uff1a\u5b57\u7b26\u4e32\u683c\u5f0f\u8f6c\u6362\u5b57\u7b26</p> \u8f6c\u6362\u5b57\u7b26 \u8f93\u51fa\u683c\u5f0f <code>d</code>, <code>i</code> \u6574\u6570 <code>u</code> \u65e0\u7b26\u53f7\u6574\u6570 <code>f</code> \u6d6e\u70b9\u6570\u4e3a m.ddddd <code>e</code> \u6d6e\u70b9\u6570\u4e3a m.ddddde\u00b1xx <code>E</code> \u6d6e\u70b9\u4e3a m.dddddE\u00b1xx <code>g</code> \u5bf9\u4e8e\u5c0f\u4e8e<code>-4</code>\u6216\u5927\u4e8e<code>+5</code>\u7684\u6307\u6570\u4f7f\u7528<code>%e</code>\uff0c\u5426\u5219\u4f7f\u7528<code>%f</code> <code>c</code> \u5355\u4e2a\u5b57\u7b26 <code>s</code> \u5b57\u7b26\u4e32\uff0c\u6216\u4efb\u4f55\u53ef\u4ee5\u4f7f\u7528<code>str</code>\u51fd\u6570\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u7684Python\u6570\u636e\u5bf9\u8c61 <code>%</code> \u63d2\u5165\u6587\u5b57 <code>%</code> \u5b57\u7b26 <p>\u9664\u4e86\u683c\u5f0f\u5b57\u7b26\u4e4b\u5916\uff0c\u60a8\u8fd8\u53ef\u4ee5\u5728<code>%</code>\u548c\u683c\u5f0f\u5b57\u7b26\u4e4b\u95f4\u5305\u542b\u683c\u5f0f\u4fee\u9970\u7b26\u3002 \u683c\u5f0f\u4fee\u9970\u7b26\u53ef\u7528\u4e8e\u5de6\u5bf9\u9f50\u6216\u53f3\u5bf9\u9f50\u5177\u6709\u6307\u5b9a\u5b57\u6bb5\u5bbd\u5ea6\u7684\u503c\u3002 \u4fee\u9970\u7b26\u8fd8\u53ef\u7528\u4e8e\u6307\u5b9a\u5b57\u6bb5\u5bbd\u5ea6\u4ee5\u53ca\u5c0f\u6570\u70b9\u540e\u7684\u4f4d\u6570\u3002 <code>\u8868 10</code> \u89e3\u91ca\u4e86\u8fd9\u4e9b\u683c\u5f0f\u4fee\u9970\u7b26\u3002</p> <p>\u8868 10\uff1a\u5176\u4ed6\u683c\u5f0f\u9009\u9879</p> \u4fee\u9970\u7b26 \u4f8b\u5b50 \u63cf\u8ff0 number <code>%20d</code> \u5c06\u503c\u653e\u5165\u5bbd\u5ea6\u4e3a 20 \u7684\u5b57\u6bb5\u4e2d <code>-</code> <code>%-20d</code> \u5c06\u503c\u653e\u5165 20 \u4e2a\u5b57\u7b26\u5bbd\u7684\u5b57\u6bb5\u4e2d\uff0c\u5de6\u5bf9\u9f50 <code>+</code> <code>%+20d</code> \u5c06\u503c\u653e\u5165 20 \u4e2a\u5b57\u7b26\u5bbd\u7684\u5b57\u6bb5\u4e2d\uff0c\u53f3\u5bf9\u9f50 <code>0</code> <code>%020d</code> \u5c06\u503c\u653e\u5165 20 \u4e2a\u5b57\u7b26\u5bbd\u7684\u5b57\u6bb5\u4e2d\uff0c\u5e76\u7528\u524d\u5bfc\u96f6\u586b\u5145 <code>.</code> <code>%20.2f</code> \u5c06\u503c\u653e\u5165 20 \u4e2a\u5b57\u7b26\u5bbd\u3001\u5c0f\u6570\u70b9\u53f3\u4fa7 2 \u4e2a\u5b57\u7b26\u7684\u5b57\u6bb5\u4e2d <code>(name)</code> <code>%(name)d</code> \u4f7f\u7528<code>name</code>\u4f5c\u4e3a\u952e\u4ece\u63d0\u4f9b\u7684\u5b57\u5178\u4e2d\u83b7\u53d6\u503c <p>\u5982\u524d\u6240\u8ff0\uff0c\u683c\u5f0f\u8fd0\u7b97\u7b26\u7684\u53f3\u4fa7\u662f\u5c06\u63d2\u5165\u5230\u683c\u5f0f\u5b57\u7b26\u4e32\u4e2d\u7684\u503c\u7684\u96c6\u5408\u3002 \u8be5\u96c6\u5408\u53ef\u4ee5\u662f\u5143\u7ec4\u6216\u5b57\u5178\u3002 \u5982\u679c\u96c6\u5408\u662f\u5143\u7ec4\uff0c\u5219\u6309\u4f4d\u7f6e\u987a\u5e8f\u63d2\u5165\u503c\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5143\u7ec4\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u5bf9\u5e94\u4e8e\u683c\u5f0f\u5b57\u7b26\u4e32\u4e2d\u7684\u7b2c\u4e00\u4e2a\u683c\u5f0f\u5b57\u7b26\u3002 \u5982\u679c\u96c6\u5408\u662f\u5b57\u5178\uff0c\u5219\u6839\u636e\u952e\u63d2\u5165\u503c\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6240\u6709\u683c\u5f0f\u5b57\u7b26\u5fc5\u987b\u4f7f\u7528<code>(name)</code>\u4fee\u9970\u7b26\u6765\u6307\u5b9a\u952e\u7684\u540d\u79f0\u3002</p> <pre><code>&gt;&gt;&gt; price = 24\n&gt;&gt;&gt; item = \"banana\"\n&gt;&gt;&gt; print(\"The %s costs %d cents\" % (item, price))\nThe banana costs 24 cents\n&gt;&gt;&gt; print(\"The %+10s costs %5.2f cents\" % (item, price))\nThe     banana costs 24.00 cents\n&gt;&gt;&gt; print(\"The %+10s costs %10.2f cents\" % (item, price))\nThe     banana costs      24.00 cents\n&gt;&gt;&gt; itemdict = {\"item\": \"banana\", \"cost\": 24}\n&gt;&gt;&gt; print(\"The %(item)s costs %(cost)7.1f cents\" % itemdict)\nThe banana costs    24.0 cents\n</code></pre> <p>\u9664\u4e86\u4f7f\u7528\u683c\u5f0f\u5b57\u7b26\u548c\u683c\u5f0f\u4fee\u9970\u7b26\u7684\u683c\u5f0f\u5b57\u7b26\u4e32\u4e4b\u5916\uff0cPython \u5b57\u7b26\u4e32\u8fd8\u5305\u542b\u4e00\u4e2a<code>format</code>\u65b9\u6cd5\uff0c\u53ef\u4ee5\u4e0e\u65b0\u7684<code>Formatter</code>\u7c7b\u7ed3\u5408\u4f7f\u7528\u6765\u5b9e\u73b0\u590d\u6742\u7684\u5b57\u7b26\u4e32\u683c\u5f0f\u5316\u3002 \u6709\u5173\u8fd9\u4e9b\u529f\u80fd\u7684\u66f4\u591a\u4fe1\u606f\u53ef\u4ee5\u5728 Python \u5e93\u53c2\u8003\u624b\u518c\u4e2d\u627e\u5230\u3002</p> <pre><code>&gt;&gt;&gt; print(\"The {} costs {} cents\".format(item, price))\nThe banana costs 24 cents\n&gt;&gt;&gt; print(\"The {:s} costs {:d} cents\".format(item, price))\nThe banana costs 24 cents\n</code></pre> <p>Python 3.6 \u5f15\u5165\u4e86 f-strings\uff0c\u8fd9\u662f\u4e00\u79cd\u4f7f\u7528\u6b63\u786e\u7684\u53d8\u91cf\u540d\u79f0\u800c\u4e0d\u662f\u5360\u4f4d\u7b26\u7684\u65b9\u6cd5\u3002 \u683c\u5f0f\u5316\u8f6c\u6362\u7b26\u53f7\u4ecd\u7136\u53ef\u4ee5\u5728 f \u5b57\u7b26\u4e32\u5185\u4f7f\u7528\uff0c\u4f46\u5bf9\u9f50\u7b26\u53f7\u4e0e\u5360\u4f4d\u7b26\u4e2d\u4f7f\u7528\u7684\u5bf9\u9f50\u7b26\u53f7\u4e0d\u540c\uff08\u8bf7\u53c2\u9605\u201c\u8868 11\u201d\uff09\u3002 \u6211\u4eec\u5c06\u5bf9\u6587\u672c\u7684\u5176\u4f59\u90e8\u5206\u4f7f\u7528\u8fd9\u79cd\u683c\u5f0f\u8bbe\u7f6e\u65b9\u6cd5\u3002</p> <p>\u8868 11\uff1af-string\u683c\u5f0f\u9009\u9879</p> \u4fee\u9970\u7b26 \u4f8b\u5b50 \u63cf\u8ff0 number <code>:20d</code> \u5c06\u503c\u653e\u5165\u5bbd\u5ea6\u4e3a 20 \u7684\u5b57\u6bb5\u4e2d <code>&lt;</code> <code>:&lt;20d</code> \u5c06\u503c\u653e\u5165 20 \u4e2a\u5b57\u7b26\u5bbd\u7684\u5b57\u6bb5\u4e2d\uff0c\u5de6\u5bf9\u9f50 <code>&gt;</code> <code>:&gt;20d</code> \u5c06\u503c\u653e\u5165 20 \u4e2a\u5b57\u7b26\u5bbd\u7684\u5b57\u6bb5\u4e2d\uff0c\u53f3\u5bf9\u9f50 <code>^</code> <code>:^20d</code> \u5c06\u503c\u653e\u5165 20 \u4e2a\u5b57\u7b26\u5bbd\u3001\u5c45\u4e2d\u5bf9\u9f50\u7684\u5b57\u6bb5\u4e2d <code>0</code> <code>:020d</code> \u5c06\u503c\u653e\u5165 20 \u4e2a\u5b57\u7b26\u5bbd\u7684\u5b57\u6bb5\u4e2d\uff0c\u5e76\u7528\u524d\u5bfc\u96f6\u586b\u5145\u3002 <code>.</code> <code>:20.2f</code> \u5c06\u503c\u653e\u5165 20 \u4e2a\u5b57\u7b26\u5bbd\u3001\u5c0f\u6570\u70b9\u53f3\u4fa7 2 \u4e2a\u5b57\u7b26\u7684\u5b57\u6bb5\u4e2d\u3002 <pre><code>&gt;&gt;&gt; print(f\"The {item:10} costs {price:10.2f} cents\")\nThe banana     costs      24.00 cents\n&gt;&gt;&gt; print(f\"The {item:&lt;10} costs {price:&lt;10.2f} cents\")\nThe banana     costs 24.00      cents\n&gt;&gt;&gt; print(f\"The {item:^10} costs {price:^10.2f} cents\")\nThe   banana   costs   24.00    cents\n&gt;&gt;&gt; print(f\"The {item:&gt;10} costs {price:&gt;10.2f} cents\")\nThe     banana costs      24.00 cents\n&gt;&gt;&gt; print(f\"The {item:&gt;10} costs {price:&gt;010.2f} cents\")\nThe     banana costs 0000024.00 cents\n&gt;&gt;&gt; itemdict = {\"item\": \"banana\", \"price\": 24}\n&gt;&gt;&gt; print(f\"Item:{itemdict['item']:.&gt;10}\\n\" +\n... f\"Price:{'$':.&gt;4}{itemdict['price']:5.2f}\")\nItem:....banana\nPrice:...$24.00\n</code></pre> <p>\u6709\u5173\u8fd9\u4e9b\u529f\u80fd\u7684\u66f4\u591a\u4fe1\u606f\u53ef\u4ee5\u5728 Python \u5e93\u53c2\u8003\u624b\u518c\u4e2d\u627e\u5230\u3002</p> <p>We have already seen that the <code>print</code> function provides a very simple way to output values from a Python program. <code>print</code> takes zero or more parameters and displays them using a single blank as the default separator. It is possible to change the separator character by setting the <code>sep</code> argument. In addition, each print ends with a newline character by default. This behavior can be changed by setting the <code>end</code> argument. These variations are shown in the following session:</p> <pre><code>&gt;&gt;&gt; print(\"Hello\")\nHello\n&gt;&gt;&gt; print(\"Hello\", \"World\")\nHello World\n&gt;&gt;&gt; print(\"Hello\", \"World\", sep=\"***\")\nHello***World\n&gt;&gt;&gt; print(\"Hello\", \"World\", end=\"***\")\nHello World***&gt;&gt;&gt;\n\u2035\u2035`\n\nIt is often useful to have more control over the look of your output. Fortunately, Python provides us with an alternative called **formatted strings**. A formatted string is a template in which words or spaces that will remain constant are combined with placeholders for variables that will be inserted into the string. For example, the statement\n\n```pycon\n&gt;&gt;&gt; print(a_name, \"is\", age, \"years old.\")\n\u2035\u2035`\n\ncontains the words ``is`` and ``years old``, but the name and the age will change depending on the variable values at the time of execution. Using a formatted string, we write the previous statement as\n\n```pycon\n&gt;&gt;&gt; print(\"%s is %d years old.\" % (a_name, age))\n\u2035\u2035`\n\nThis simple example illustrates a new string expression. The ``%`` operator is a string operator called the **format operator**. The left side of the expression holds the template or format string, and the right side holds a collection of values that will be substituted into the format string. Note that the number of values in the collection on the right side corresponds with the number of ``%`` characters in the format string. Values are taken\u2014in order, left to right\u2014from the collection and inserted into the format string.\n\nLet\u2019s look at both sides of this formatting expression in more detail. The format string may contain one or more conversion specifications. A conversion character tells the format operator what type of value is going to be inserted into that position in the string. In the example above, the ``%s`` specifies a string, while the ``%d`` specifies an integer. Other possible type specifications include ``i``, ``u``, ``f``, ``e``, ``g``, ``c``, or ``%``. `Table\u00a09` summarizes all of the\nvarious type specifications.\n\n**Table 9: String Formatting Conversion Characters**\n\n| **Character** | **Output Format**                                                                                 |\n| ------------- | ------------------------------------------------------------------------------------------------- |\n| ``d``, ``i``  | Integer                                                                                           |\n| ``u``         | Unsigned integer                                                                                  |\n| ``f``         | Floating point as m.ddddd                                                                         |\n| ``e``         | Floating point as m.ddddde+/-xx                                                                   |\n| ``E``         | Floating point as m.dddddE+/-xx                                                                   |\n| ``g``         | Use ``%e`` for exponents less than :math:`-4` or greater than :math:`+5`, otherwise use ``%f``    |\n| ``c``         | Single character                                                                                  |\n| ``s``         | String, or any Python data object that can be converted to a string by using the ``str`` function |\n| ``%``         | Insert a literal ``%`` character                                                                  |\n\nIn addition to the format character, you can also include a format modifier between the ``%`` and the format character. Format modifiers may be used to left-justify or right-justify the value with a specified field width. Modifiers can also be used to specify the field width along with a number of digits after the decimal point. :ref:`Table\u00a010 &lt;tab_fmtaddsa&gt;` explains these format modifiers.\n\n**Table 10: Additional formatting options**\n\n\n| **Modifier** | **Example**  | **Description**                                                                                 |\n| ------------ | ------------ | ----------------------------------------------------------------------------------------------- |\n| number       | ``%20d``     | Put the value in a field width of 20                                                            |\n| ``-``        | ``%-20d``    | Put the value in a field 20 characters wide, left-justified                                     |\n| ``+``        | ``%+20d``    | Put the value in a field 20 characters wide, right-justified                                    |\n| ``0``        | ``%020d``    | Put the value in a field 20 characters wide, fill in with leading zeros                         |\n| ``.``        | ``%20.2f``   | Put the value in a field 20 characters wide with 2 characters to the right of the decimal point |\n| ``(name)``   | ``%(name)d`` | Get the value from the supplied dictionary using ``name`` as the key                            |\n\nAs mentioned, the right side of the format operator is a collection of values that will be inserted into the format string. The collection will be either a tuple or a dictionary. If the collection is a tuple, the values are inserted in order of position. That is, the first element in the tuple corresponds to the first format character in the format string. If the collection is a dictionary, the values are inserted according to their keys. In this case all format characters must use the ``(name)`` modifier to specify the name of the key.\n\n```pycon\n&gt;&gt;&gt; price = 24\n&gt;&gt;&gt; item = \"banana\"\n&gt;&gt;&gt; print(\"The %s costs %d cents\" % (item, price))\nThe banana costs 24 cents\n&gt;&gt;&gt; print(\"The %+10s costs %5.2f cents\" % (item, price))\nThe     banana costs 24.00 cents\n&gt;&gt;&gt; print(\"The %+10s costs %10.2f cents\" % (item, price))\nThe     banana costs      24.00 cents\n&gt;&gt;&gt; itemdict = {\"item\": \"banana\", \"cost\": 24}\n&gt;&gt;&gt; print(\"The %(item)s costs %(cost)7.1f cents\" % itemdict)\nThe banana costs    24.0 cents\n</code></pre> <p>In addition to format strings that use format characters and format modifiers, Python strings also include a <code>format</code> method that can be used in conjunction with a new <code>Formatter</code> class to implement complex string formatting. More about these features can be found in the Python library reference manual.</p> <pre><code>&gt;&gt;&gt; print(\"The {} costs {} cents\".format(item, price))\nThe banana costs 24 cents\n&gt;&gt;&gt; print(\"The {:s} costs {:d} cents\".format(item, price))\nThe banana costs 24 cents\n</code></pre> <p>Python 3.6 introduced f-strings, a way to use proper variable names instead of placeholders. Formatting conversion symbols can still be used inside an f-string, but the alignment symbols are different from those used with placeholders (see <code>Table\u00a011</code>). We are going to use this formatting method for the rest of the text.</p> <p>Table 11: f-string Formatting Options</p> Modifier Example Description number <code>:20d</code> Put the value in a field width of 20 <code>&lt;</code> <code>:&lt;20d</code> Put the value in a field 20 characters wide, left-aligned <code>&gt;</code> <code>:&gt;20d</code> Put the value in a field 20 characters wide, right-aligned <code>^</code> <code>:^20d</code> Put the value in a field 20 characters wide, center-aligned <code>0</code> <code>:020d</code> Put the value in a field 20 characters wide, fill in with leading zeros. <code>.</code> <code>:20.2f</code> Put the value in a field 20 characters wide with 2 characters to the right of the decimal point. <pre><code>&gt;&gt;&gt; print(f\"The {item:10} costs {price:10.2f} cents\")\nThe banana     costs      24.00 cents\n&gt;&gt;&gt; print(f\"The {item:&lt;10} costs {price:&lt;10.2f} cents\")\nThe banana     costs 24.00      cents\n&gt;&gt;&gt; print(f\"The {item:^10} costs {price:^10.2f} cents\")\nThe   banana   costs   24.00    cents\n&gt;&gt;&gt; print(f\"The {item:&gt;10} costs {price:&gt;10.2f} cents\")\nThe     banana costs      24.00 cents\n&gt;&gt;&gt; print(f\"The {item:&gt;10} costs {price:&gt;010.2f} cents\")\nThe     banana costs 0000024.00 cents\n&gt;&gt;&gt; itemdict = {\"item\": \"banana\", \"price\": 24}\n&gt;&gt;&gt; print(f\"Item:{itemdict['item']:.&gt;10}\\n\" +\n... f\"Price:{'$':.&gt;4}{itemdict['price']:5.2f}\")\nItem:....banana\nPrice:...$24.00\n</code></pre> <p>More about these features can be found in the Python library reference manual.</p>"},{"location":"c2/","title":"2. \u7b97\u6cd5\u5206\u6790","text":"<p>2. Algorithm Analysis</p> \u4e2d\u6587\u82f1\u6587 <ul> <li>2.1. \u76ee\u6807 </li> <li>2.2. \u4ec0\u4e48\u662f\u7b97\u6cd5\u5206\u6790\uff1f </li> <li>2.3. \u5927O\u7b26\u53f7 </li> <li>2.4. \u4e00\u4e2a\u5b57\u8c1c\u68c0\u6d4b\u4f8b\u5b50 <ul> <li>2.4.1. \u89e3\u51b3\u65b9\u68481\uff1a\u5b57\u8c1c\u68c0\u6d4b\u9010\u4e00\u68c0\u67e5 </li> <li>2.4.2. \u89e3\u51b3\u65b9\u68482\uff1a\u6392\u5e8f\u548c\u6bd4\u8f83 </li> <li>2.4.3. \u89e3\u51b3\u65b9\u68483\uff1a\u66b4\u529b\u7834\u89e3 </li> <li>2.4.4. \u89e3\u51b3\u65b9\u68484\uff1a\u8ba1\u6570\u548c\u6bd4\u8f83 </li> </ul> </li> <li>2.5. Python\u6570\u636e\u7ed3\u6784\u7684\u6027\u80fd </li> <li>2.6. \u5217\u8868 </li> <li>2.7. \u5b57\u5178 </li> <li>2.8. \u603b\u7ed3 </li> <li>2.9. \u5173\u952e\u672f\u8bed </li> <li>2.10. \u7ec3\u4e60</li> </ul> <ul> <li>2.1. Objectives</li> <li>2.2. What Is Algorithm Analysis?</li> <li>2.3. Big O Notation</li> <li>2.4. An Anagram Detection Example<ul> <li>2.4.1. Solution 1: Anagram Detection Checking Off</li> <li>2.4.2. Anagram Detection Solution 2: Sort and Compare</li> <li>2.4.3. Anagram Detection Solution 3: Brute Force</li> <li>2.4.4. Anagram Detection Solution 4: Count and Compare</li> </ul> </li> <li>2.5. Performance of Python Data Structures</li> <li>2.6. Lists</li> <li>2.7. Dictionaries</li> <li>2.8. Summary</li> <li>2.9. Key Terms</li> <li>2.10. Exercises</li> </ul>"},{"location":"c2/s1/","title":"2.1. \u76ee\u6807","text":"<p>2.1. Objectives</p> \u4e2d\u6587\u82f1\u6587 <ul> <li>\u7406\u89e3\u4e3a\u4f55\u7b97\u6cd5\u5206\u6790\u5982\u6b64\u91cd\u8981\u3002</li> <li>\u80fd\u591f\u4f7f\u7528\u5927O\u6765\u63cf\u8ff0\u6267\u884c\u65f6\u95f4\u3002</li> <li>\u4e86\u89e3Python\u5217\u8868\u548c\u8bcd\u5178\u4e0a\u5e38\u89c1\u64cd\u4f5c\u7684\u5927\u91cfO\u6267\u884c\u65f6\u95f4\u3002</li> <li>\u4e86\u89e3 Python \u5173\u4e8e\u6570\u636e\u7684\u5b9e\u73b0\u5982\u4f55\u5f71\u54cd\u7b97\u6cd5\u5206\u6790\u3002</li> <li>\u4e86\u89e3\u5982\u4f55\u5bf9\u7b80\u5355\u7684 Python \u7a0b\u5e8f\u8fdb\u884c\u57fa\u51c6\u6d4b\u8bd5\u3002</li> </ul> <ul> <li>To understand why algorithm analysis is important.</li> <li>To be able to use Big O to describe execution time.</li> <li>To understand the Big O execution time of common operations on Python lists and dictionaries.</li> <li>To understand how the implementation of Python data impacts algorithm analysis.</li> <li>To understand how to benchmark simple Python programs.</li> </ul>"},{"location":"c2/s10/","title":"2.10. \u7ec3\u4e60","text":"<p>2.10. Exercises</p> \u4e2d\u6587\u82f1\u6587 <ol> <li> <p>Give the Big O performance of the following code fragment:</p> <pre><code>for i in range(n):\n    for j in range(n):\n        k = 2 + 2\n</code></pre> </li> <li> <p>Give the Big O performance of the following code fragment:</p> <pre><code>    for i in range(n):\n            k = 2 + 2\n</code></pre> </li> <li> <p>Give the Big O performance of the following code fragment:</p> <pre><code>    i = n\n    while i &gt; 0:\n        k = 2 + 2\n        i = i // 2\n</code></pre> </li> <li> <p>Give the Big O performance of the following code fragment:</p> <pre><code>    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                k = 2 + 2\n</code></pre> </li> <li> <p>Give the Big O performance of the following code fragment:</p> <pre><code>    for i in range(n):\n        k = 2 + 2\n    for j in range(n):\n        k = 2 + 2\n    for k in range(n):\n        k = 2 + 2\n</code></pre> </li> <li> <p>Devise an experiment to verify that the <code>list index</code> operator is \\(O(1)\\).</p> </li> <li> <p>Devise an experiment to verify that <code>get item</code> and <code>set item</code> are \\(O(1)\\) for dictionaries.</p> </li> <li> <p>Devise an experiment that compares the performance of the <code>del</code> operator on lists and dictionaries.</p> </li> <li> <p>Given a list of numbers in random order, write an algorithm that works in \\(O(n\\log(n))\\) to find the \\(k\\) th smallest number in the list.</p> </li> <li> <p>Can you improve the algorithm from the previous problem to be linear? Explain.</p> </li> </ol> <ol> <li> <p>Give the Big O performance of the following code fragment:</p> <pre><code>for i in range(n):\n    for j in range(n):\n        k = 2 + 2\n</code></pre> </li> <li> <p>Give the Big O performance of the following code fragment:</p> <pre><code>    for i in range(n):\n            k = 2 + 2\n</code></pre> </li> <li> <p>Give the Big O performance of the following code fragment:</p> <pre><code>    i = n\n    while i &gt; 0:\n        k = 2 + 2\n        i = i // 2\n</code></pre> </li> <li> <p>Give the Big O performance of the following code fragment:</p> <pre><code>    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                k = 2 + 2\n</code></pre> </li> <li> <p>Give the Big O performance of the following code fragment:</p> <pre><code>    for i in range(n):\n        k = 2 + 2\n    for j in range(n):\n        k = 2 + 2\n    for k in range(n):\n        k = 2 + 2\n</code></pre> </li> <li> <p>Devise an experiment to verify that the <code>list index</code> operator is \\(O(1)\\).</p> </li> <li> <p>Devise an experiment to verify that <code>get item</code> and <code>set item</code> are \\(O(1)\\) for dictionaries.</p> </li> <li> <p>Devise an experiment that compares the performance of the <code>del</code> operator on lists and dictionaries.</p> </li> <li> <p>Given a list of numbers in random order, write an algorithm that works in \\(O(n\\log(n))\\) to find the \\(k\\) th smallest number in the list.</p> </li> <li> <p>Can you improve the algorithm from the previous problem to be linear? Explain.</p> </li> </ol>"},{"location":"c2/s2/","title":"2.2. \u4ec0\u4e48\u662f\u7b97\u6cd5\u5206\u6790\uff1f","text":"<p>2.2. What Is Algorithm Analysis?</p> \u4e2d\u6587\u82f1\u6587 <p>\u5bf9\u4e8e\u521a\u5f00\u59cb\u8ba1\u7b97\u673a\u79d1\u5b66\u4e13\u4e1a\u7684\u5b66\u751f\u6765\u8bf4\uff0c\u76f8\u4e92\u6bd4\u8f83\u4ed6\u4eec\u7684\u7a0b\u5e8f\u662f\u5f88\u5e38\u89c1\u7684\u3002 \u60a8\u53ef\u80fd\u8fd8\u6ce8\u610f\u5230\uff0c\u8ba1\u7b97\u673a\u7a0b\u5e8f\u770b\u8d77\u6765\u975e\u5e38\u76f8\u4f3c\u662f\u5f88\u5e38\u89c1\u7684\uff0c\u5c24\u5176\u662f\u7b80\u5355\u7684\u7a0b\u5e8f\u3002 \u7ecf\u5e38\u4f1a\u51fa\u73b0\u4e00\u4e2a\u6709\u8da3\u7684\u95ee\u9898\u3002 \u5f53\u4e24\u4e2a\u7a0b\u5e8f\u89e3\u51b3\u76f8\u540c\u7684\u95ee\u9898\u4f46\u770b\u8d77\u6765\u4e0d\u540c\u65f6\uff0c\u4e00\u4e2a\u7a0b\u5e8f\u6bd4\u53e6\u4e00\u4e2a\u66f4\u597d\u5417\uff1f</p> <p>\u4e3a\u4e86\u56de\u7b54\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u9700\u8981\u8bb0\u4f4f\u7a0b\u5e8f\u548c\u7a0b\u5e8f\u6240\u4ee3\u8868\u7684\u5e95\u5c42\u7b97\u6cd5\u4e4b\u95f4\u5b58\u5728\u91cd\u8981\u533a\u522b\u3002 \u6b63\u5982\u6211\u4eec\u5728\u7b2c\u4e00\u7ae0\u4e2d\u6240\u8ff0\uff0c\u7b97\u6cd5\u662f\u7528\u4e8e\u89e3\u51b3\u95ee\u9898\u7684\u901a\u7528\u7684\u3001\u9010\u6b65\u7684\u6307\u4ee4\u5217\u8868\u3002 \u5b83\u662f\u4e00\u79cd\u89e3\u51b3\u95ee\u9898\u7684\u4efb\u4f55\u5b9e\u4f8b\u7684\u65b9\u6cd5\uff0c\u4ee5\u4fbf\u7ed9\u5b9a\u7279\u5b9a\u8f93\u5165\uff0c\u7b97\u6cd5\u4ea7\u751f\u6240\u9700\u7684\u7ed3\u679c\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u7a0b\u5e8f\u662f\u4e00\u79cd\u5df2\u7f16\u7801\u4e3a\u67d0\u79cd\u7f16\u7a0b\u8bed\u8a00\u7684\u7b97\u6cd5\u3002 \u540c\u4e00\u7b97\u6cd5\u53ef\u80fd\u6709\u8bb8\u591a\u7a0b\u5e8f\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u7a0b\u5e8f\u5458\u548c\u6240\u4f7f\u7528\u7684\u7f16\u7a0b\u8bed\u8a00\u3002</p> <p>\u4e3a\u4e86\u8fdb\u4e00\u6b65\u63a2\u7d22\u8fd9\u79cd\u5dee\u5f02\uff0c\u8bf7\u8003\u8651\u201cActiveCode 1\u201d\u4e2d\u663e\u793a\u7684\u51fd\u6570\u3002 \u8be5\u51fd\u6570\u89e3\u51b3\u4e86\u4e00\u4e2a\u719f\u6089\u7684\u95ee\u9898\uff0c\u8ba1\u7b97\u524d n \u4e2a\u6574\u6570\u7684\u603b\u548c\u3002 \u8be5\u7b97\u6cd5\u4f7f\u7528\u521d\u59cb\u5316\u4e3a 0 \u7684\u7d2f\u52a0\u5668\u53d8\u91cf\u7684\u601d\u60f3\u3002\u7136\u540e\uff0c\u8be5\u89e3\u51b3\u65b9\u6848\u8fed\u4ee3 n \u4e2a\u6574\u6570\uff0c\u5c06\u6bcf\u4e2a\u6574\u6570\u6dfb\u52a0\u5230\u7d2f\u52a0\u5668\u4e2d\u3002</p> \u524d n \u4e2a\u6574\u6570\u7684\u6c42\u548c<pre><code>def sum_of_n(n):\n    the_sum = 0\n    for i in range(1, n + 1):\n        the_sum = the_sum + i\n\n    return the_sum\n\nprint(sum_of_n(10))\n</code></pre> <p>\u73b0\u5728\u770b\u770b\u201cActiveCode 2\u201d\u4e2d\u7684\u51fd\u6570\u3002 \u4e4d\u4e00\u770b\uff0c\u5b83\u53ef\u80fd\u770b\u8d77\u6765\u5f88\u5947\u602a\uff0c\u4f46\u7ecf\u8fc7\u8fdb\u4e00\u6b65\u68c0\u67e5\uff0c\u60a8\u4f1a\u53d1\u73b0\u8be5\u51fd\u6570\u672c\u8d28\u4e0a\u4e0e\u524d\u4e00\u4e2a\u51fd\u6570\u6267\u884c\u76f8\u540c\u7684\u64cd\u4f5c\u3002 \u8fd9\u4e0d\u660e\u663e\u7684\u539f\u56e0\u662f\u7f16\u7801\u4e0d\u4f73\u3002 \u6211\u4eec\u6ca1\u6709\u4f7f\u7528\u597d\u7684\u6807\u8bc6\u7b26\u540d\u79f0\u6765\u63d0\u9ad8\u53ef\u8bfb\u6027\uff0c\u5e76\u4e14\u6211\u4eec\u4f7f\u7528\u4e86\u5728\u7d2f\u79ef\u6b65\u9aa4\u4e2d\u5e76\u4e0d\u662f\u771f\u6b63\u5fc5\u8981\u7684\u989d\u5916\u8d4b\u503c\u8bed\u53e5\u3002</p> \u524d n \u4e2a\u6574\u6570\u7684\u53e6\u4e00\u4e2a\u6c42\u548c<pre><code>def foo(tom):\n    fred = 0\n    for bill in range(1, tom + 1):\n        barney = bill\n        fred = fred + barney\n\n    return fred\n\nprint(foo(10))\n</code></pre> <p>\u6211\u4eec\u4e4b\u524d\u63d0\u51fa\u7684\u95ee\u9898\u662f\u4e00\u4e2a\u51fd\u6570\u662f\u5426\u6bd4\u53e6\u4e00\u4e2a\u51fd\u6570\u66f4\u597d\u3002 \u7b54\u6848\u53d6\u51b3\u4e8e\u60a8\u7684\u6807\u51c6\u3002 \u5982\u679c\u60a8\u5173\u5fc3\u53ef\u8bfb\u6027\uff0c\u51fd\u6570\u201csum_of_n\u201d\u80af\u5b9a\u6bd4\u51fd\u6570\u201cfoo\u201d\u66f4\u597d\u3002 \u4e8b\u5b9e\u4e0a\uff0c\u60a8\u53ef\u80fd\u5728\u5165\u95e8\u7f16\u7a0b\u8bfe\u7a0b\u4e2d\u770b\u5230\u8fc7\u8bb8\u591a\u8fd9\u6837\u7684\u793a\u4f8b\uff0c\u56e0\u4e3a\u5176\u4e2d\u7684\u76ee\u6807\u4e4b\u4e00\u662f\u5e2e\u52a9\u60a8\u7f16\u5199\u6613\u4e8e\u9605\u8bfb\u548c\u7406\u89e3\u7684\u7a0b\u5e8f\u3002 \u7136\u800c\uff0c\u5728\u672c\u8bfe\u7a0b\u4e2d\uff0c\u6211\u4eec\u4e5f\u5bf9\u7b97\u6cd5\u672c\u8eab\u7684\u7279\u5f81\u611f\u5174\u8da3\u3002 \uff08\u6211\u4eec\u5f53\u7136\u5e0c\u671b\u60a8\u7ee7\u7eed\u52aa\u529b\u7f16\u5199\u53ef\u8bfb\u3001\u53ef\u7406\u89e3\u7684\u4ee3\u7801\u3002\uff09</p> <p>\u7b97\u6cd5\u5206\u6790\u6d89\u53ca\u6839\u636e\u6bcf\u79cd\u7b97\u6cd5\u4f7f\u7528\u7684\u8ba1\u7b97\u8d44\u6e90\u91cf\u6765\u6bd4\u8f83\u7b97\u6cd5\u3002 \u6211\u4eec\u5e0c\u671b\u80fd\u591f\u8003\u8651\u4e24\u79cd\u7b97\u6cd5\uff0c\u5e76\u8bf4\u5176\u4e2d\u4e00\u79cd\u6bd4\u53e6\u4e00\u79cd\u66f4\u597d\uff0c\u56e0\u4e3a\u5b83\u5728\u4f7f\u7528\u8fd9\u4e9b\u8d44\u6e90\u65b9\u9762\u66f4\u6709\u6548\uff0c\u6216\u8005\u53ef\u80fd\u53ea\u662f\u56e0\u4e3a\u5b83\u4f7f\u7528\u7684\u8d44\u6e90\u66f4\u5c11\u3002 \u4ece\u8fd9\u4e2a\u89d2\u5ea6\u6765\u770b\uff0c\u4e0a\u9762\u4e24\u4e2a\u51fd\u6570\u770b\u8d77\u6765\u975e\u5e38\u76f8\u4f3c\u3002 \u5b83\u4eec\u672c\u8d28\u4e0a\u90fd\u4f7f\u7528\u76f8\u540c\u7684\u7b97\u6cd5\u6765\u89e3\u51b3\u6c42\u548c\u95ee\u9898\u3002</p> <p>\u6b64\u65f6\uff0c\u91cd\u8981\u7684\u662f\u8981\u66f4\u591a\u5730\u601d\u8003\u8ba1\u7b97\u8d44\u6e90\u7684\u771f\u6b63\u542b\u4e49\u3002 \u6709\u4e24\u79cd\u4e0d\u540c\u7684\u65b9\u5f0f\u6765\u770b\u5f85\u8fd9\u4e2a\u95ee\u9898\u3002 \u4e00\u79cd\u65b9\u6cd5\u662f\u8003\u8651\u7b97\u6cd5\u89e3\u51b3\u95ee\u9898\u6240\u9700\u7684\u7a7a\u95f4\u6216\u5185\u5b58\u91cf\u3002 \u95ee\u9898\u89e3\u51b3\u65b9\u6848\u6240\u9700\u7684\u7a7a\u95f4\u91cf\u901a\u5e38\u7531\u95ee\u9898\u5b9e\u4f8b\u672c\u8eab\u51b3\u5b9a\u3002 \u7136\u800c\uff0c\u65f6\u5e38\u6709\u4e00\u4e9b\u7b97\u6cd5\u6709\u975e\u5e38\u5177\u4f53\u7684\u7a7a\u95f4\u8981\u6c42\uff0c\u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4f1a\u975e\u5e38\u5c0f\u5fc3\u5730\u89e3\u91ca\u8fd9\u4e9b\u53d8\u5316\u3002</p> <p>\u4f5c\u4e3a\u7a7a\u95f4\u8981\u6c42\u7684\u66ff\u4ee3\u65b9\u6848\uff0c\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u7b97\u6cd5\u6240\u9700\u7684\u6267\u884c\u65f6\u95f4\u6765\u5206\u6790\u548c\u6bd4\u8f83\u7b97\u6cd5\u3002 \u6b64\u5ea6\u91cf\u6709\u65f6\u79f0\u4e3a\u7b97\u6cd5\u7684\u201c\u6267\u884c\u65f6\u95f4(execution time)\u201d\u6216\u201c\u8fd0\u884c\u65f6\u95f4(running time)\u201d\u3002 \u6211\u4eec\u6d4b\u91cf\u51fd\u6570<code>sum_of_n</code>\u6267\u884c\u65f6\u95f4\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u8fdb\u884c\u57fa\u51c6\u5206\u6790(benchmark analysis)\u3002 \u8fd9\u610f\u5473\u7740\u6211\u4eec\u5c06\u8ddf\u8e2a\u7a0b\u5e8f\u8ba1\u7b97\u5176\u7ed3\u679c\u6240\u9700\u7684\u5b9e\u9645\u65f6\u95f4\u3002 \u5728Python\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8bb0\u5f55\u6211\u4eec\u6b63\u5728\u4f7f\u7528\u7684\u7cfb\u7edf\u5185\u7684\u5f00\u59cb\u65f6\u95f4\u548c\u7ed3\u675f\u65f6\u95f4\u6765\u5bf9\u51fd\u6570\u8fdb\u884c\u57fa\u51c6\u6d4b\u8bd5\u3002 \u5728<code>time</code>\u6a21\u5757\u4e2d\uff0c\u6709\u4e00\u4e2a\u540d\u4e3a<code>time</code>\u7684\u51fd\u6570\uff0c\u5b83\u5c06\u8fd4\u56de\u81ea\u67d0\u4e2a\u4efb\u610f\u8d77\u70b9\u4ee5\u6765\u7684\u5f53\u524d\u7cfb\u7edf\u65f6\u949f\u65f6\u95f4\uff08\u4ee5\u79d2\u4e3a\u5355\u4f4d\uff09\u3002 \u901a\u8fc7\u5728\u5f00\u59cb\u548c\u7ed3\u675f\u65f6\u8c03\u7528\u8be5\u51fd\u6570\u4e24\u6b21\uff0c\u7136\u540e\u8ba1\u7b97\u5dee\u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u83b7\u5f97\u6267\u884c\u7684\u7cbe\u786e\u79d2\u6570\uff08\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u662f\u5206\u6570\uff09\u3002</p> <pre><code>import time\n\ndef sum_of_n_2(n):\n    start = time.time()\n\n    the_sum = 0\n    for i in range(1, n + 1):\n        the_sum = the_sum + i\n\n    end = time.time()\n\n    return the_sum, end - start\n</code></pre> <p>\u201c\u6e05\u5355 1\u201d\u663e\u793a\u4e86\u539f\u59cb\u7684<code>sum_of_n</code>\u51fd\u6570\uff0c\u5176\u4e2d\u5728\u6c42\u548c\u4e4b\u524d\u548c\u4e4b\u540e\u5d4c\u5165\u4e86\u5b9a\u65f6\u8c03\u7528\u3002 \u8be5\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u7531\u7ed3\u679c\u548c\u8ba1\u7b97\u6240\u9700\u7684\u65f6\u95f4\uff08\u4ee5\u79d2\u4e3a\u5355\u4f4d\uff09\u7ec4\u6210\u7684\u5143\u7ec4\u3002 \u5982\u679c\u6211\u4eec\u5bf9\u8be5\u51fd\u6570\u6267\u884c\u4e94\u6b21\u8c03\u7528\uff0c\u6bcf\u6b21\u8c03\u7528\u8ba1\u7b97\u524d 10,000 \u4e2a\u6574\u6570\u7684\u603b\u548c\uff0c\u6211\u4eec\u5c06\u5f97\u5230\u4ee5\u4e0b\u7ed3\u679c\uff1a</p> <pre><code>&gt;&gt;&gt; for i in range(5):\n...     print(\"Sum is %d required %10.7f seconds\" % sum_of_n_2(10000))\n... \nSum is 50005000 required  0.0018950 seconds\nSum is 50005000 required  0.0018620 seconds\nSum is 50005000 required  0.0019171 seconds\nSum is 50005000 required  0.0019162 seconds\nSum is 50005000 required  0.0019360 seconds\n&gt;&gt;&gt;\n</code></pre> <p>\u6211\u4eec\u53d1\u73b0\u65f6\u95f4\u76f8\u5f53\u4e00\u81f4\uff0c\u6267\u884c\u8be5\u4ee3\u7801\u5e73\u5747\u9700\u8981\u5927\u7ea6 0.0019 \u79d2\u3002 \u5982\u679c\u6211\u4eec\u8fd0\u884c\u6dfb\u52a0\u524d 100,000 \u4e2a\u6574\u6570\u7684\u51fd\u6570\u4f1a\u600e\u6837\uff1f</p> <pre><code>&gt;&gt;&gt; for i in range(5):\n...     print(\"Sum is %d required %10.7f seconds\" % sum_of_n_2(100000))\n... \nSum is 5000050000 required  0.0199420 seconds\nSum is 5000050000 required  0.0180972 seconds\nSum is 5000050000 required  0.0194821 seconds\nSum is 5000050000 required  0.0178988 seconds\nSum is 5000050000 required  0.0188949 seconds\n&gt;&gt;&gt;\n</code></pre> <p>\u540c\u6837\uff0c\u6bcf\u6b21\u8fd0\u884c\u6240\u9700\u7684\u65f6\u95f4\u867d\u7136\u8f83\u957f\uff0c\u4f46\u975e\u5e38\u4e00\u81f4\uff0c\u5e73\u5747\u5927\u7ea6\u591a\u51fa 10 \u500d\u79d2\u3002 \u5f53\u201cn\u201d\u7b49\u4e8e 1,000,000 \u65f6\uff0c\u6211\u4eec\u5f97\u5230\uff1a</p> <pre><code>&gt;&gt;&gt; for i in range(5):\n...     print(\"Sum is %d required %10.7f seconds\" % sum_of_n_2(1000000))\n...\nSum is 500000500000 required  0.1948988 seconds\nSum is 500000500000 required  0.1850290 seconds\nSum is 500000500000 required  0.1809771 seconds\nSum is 500000500000 required  0.1729250 seconds\nSum is 500000500000 required  0.1646299 seconds\n&gt;&gt;&gt;\n</code></pre> <p>\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5e73\u5747\u503c\u518d\u6b21\u7ea6\u4e3a\u4e4b\u524d\u5b9e\u9a8c\u7684 10 \u500d\u3002</p> <p>\u73b0\u5728\u8003\u8651\u201cActiveCode 3\u201d\uff0c\u5b83\u5c55\u793a\u4e86\u89e3\u51b3\u6c42\u548c\u95ee\u9898\u7684\u4e0d\u540c\u65b9\u6cd5\u3002 \u6b64\u51fd\u6570\u201csum_of_n_3\u201d\u5229\u7528\u95ed\u65b9\u7a0b \\(\\sum_{i=1}^{n} i = \\frac {(n)(n+1)}{2}\\) \u6765\u8ba1\u7b97\u603b\u548c\u524d\u201cn\u201d\u4e2a\u6574\u6570\uff0c\u65e0\u9700\u8fed\u4ee3\u3002</p> \u4e0d\u8fed\u4ee3\u6c42\u548c<pre><code>def sum_of_n_3(n):\n    return (n * (n + 1)) / 2\n\n\nprint(sum_of_n_3(10))\n</code></pre> <p>\u5982\u679c\u6211\u4eec\u5bf9\u201csum_of_n_3\u201d\u8fdb\u884c\u76f8\u540c\u7684\u57fa\u51c6\u6d4b\u91cf\uff0c\u4f7f\u7528\u4e94\u4e2a\u4e0d\u540c\u7684\u201cn\u201d\u503c\uff0810,000\u3001100,000\u30011,000,000\u300110,000,000 \u548c 100,000,000\uff09\uff0c\u6211\u4eec\u4f1a\u5f97\u5230\u4ee5\u4e0b\u7ed3\u679c\uff1a</p> <pre><code>Sum is 50005000 required 0.00000095 seconds\nSum is 5000050000 required 0.00000191 seconds\nSum is 500000500000 required 0.00000095 seconds\nSum is 50000005000000 required 0.00000095 seconds\nSum is 5000000050000000 required 0.00000119 seconds\n</code></pre> <p>\u5173\u4e8e\u6b64\u8f93\u51fa\uff0c\u6709\u4e24\u4ef6\u91cd\u8981\u7684\u4e8b\u60c5\u9700\u8981\u6ce8\u610f\u3002 \u9996\u5148\uff0c\u4e0a\u9762\u8bb0\u5f55\u7684\u65f6\u95f4\u6bd4\u524d\u9762\u7684\u4efb\u4f55\u4f8b\u5b50\u90fd\u77ed\u3002 \u5176\u6b21\uff0c\u65e0\u8bba\u201cn\u201d\u7684\u503c\u662f\u591a\u5c11\uff0c\u5b83\u4eec\u90fd\u975e\u5e38\u4e00\u81f4\u3002 \u770b\u6765\u201csum_of_n_3\u201d\u51e0\u4e4e\u4e0d\u53d7\u6dfb\u52a0\u7684\u6574\u6570\u6570\u91cf\u7684\u5f71\u54cd\u3002</p> <p>\u4f46\u8fd9\u4e2a\u57fa\u51c6\u6d4b\u8bd5\u771f\u6b63\u544a\u8bc9\u6211\u4eec\u4ec0\u4e48\uff1f \u76f4\u89c2\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u8fed\u4ee3\u89e3\u51b3\u65b9\u6848\u4f3c\u4e4e\u505a\u4e86\u66f4\u591a\u7684\u5de5\u4f5c\uff0c\u56e0\u4e3a\u67d0\u4e9b\u7a0b\u5e8f\u6b65\u9aa4\u6b63\u5728\u91cd\u590d\u3002 \u8fd9\u53ef\u80fd\u662f\u9700\u8981\u66f4\u957f\u65f6\u95f4\u7684\u539f\u56e0\u3002 \u6b64\u5916\uff0c\u968f\u7740\u6211\u4eec\u589e\u52a0\u201cn\u201d\u7684\u503c\uff0c\u8fed\u4ee3\u89e3\u51b3\u65b9\u6848\u6240\u9700\u7684\u65f6\u95f4\u4f3c\u4e4e\u4e5f\u4f1a\u589e\u52a0\u3002 \u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u5728\u4e0d\u540c\u7684\u8ba1\u7b97\u673a\u4e0a\u8fd0\u884c\u76f8\u540c\u7684\u51fd\u6570\u6216\u4f7f\u7528\u4e0d\u540c\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u5f97\u5230\u4e0d\u540c\u7684\u7ed3\u679c\u3002 \u5982\u679c\u8ba1\u7b97\u673a\u8f83\u65e7\uff0c\u5219\u6267\u884c\u201csum_of_n_3\u201d\u53ef\u80fd\u9700\u8981\u66f4\u957f\u7684\u65f6\u95f4\u3002</p> <p>\u6211\u4eec\u9700\u8981\u4e00\u79cd\u66f4\u597d\u7684\u65b9\u6cd5\u6765\u63cf\u8ff0\u8fd9\u4e9b\u7b97\u6cd5\u5728\u6267\u884c\u65f6\u95f4\u65b9\u9762\u7684\u7279\u5f81\u3002 \u57fa\u51c6\u6d4b\u8bd5\u6280\u672f\u8ba1\u7b97\u5b9e\u9645\u6267\u884c\u65f6\u95f4\u3002 \u5b83\u5e76\u6ca1\u6709\u771f\u6b63\u4e3a\u6211\u4eec\u63d0\u4f9b\u6709\u7528\u7684\u6d4b\u91cf\uff0c\u56e0\u4e3a\u5b83\u4f9d\u8d56\u4e8e\u7279\u5b9a\u7684\u673a\u5668\u3001\u7a0b\u5e8f\u3001\u4e00\u5929\u4e2d\u7684\u65f6\u95f4\u3001\u7f16\u8bd1\u5668\u548c\u7f16\u7a0b\u8bed\u8a00\u3002 \u76f8\u53cd\uff0c\u6211\u4eec\u5e0c\u671b\u62e5\u6709\u72ec\u7acb\u4e8e\u6240\u4f7f\u7528\u7684\u7a0b\u5e8f\u6216\u8ba1\u7b97\u673a\u7684\u7279\u5f81\u3002 \u8fd9\u79cd\u6d4b\u91cf\u5bf9\u4e8e\u5355\u72ec\u5224\u65ad\u7b97\u6cd5\u5f88\u6709\u7528\uff0c\u5e76\u4e14\u53ef\u4ee5\u7528\u4e8e\u6bd4\u8f83\u8de8\u5b9e\u73b0\u7684\u7b97\u6cd5\u3002</p> <p>What Is Algorithm Analysis?</p> <p>It is very common for beginning computer science students to compare their programs with one another. You may also have noticed that it is common for computer programs to look very similar, especially the simple ones. An interesting question often arises. When two programs solve the same problem but look different, is one program better than the other?</p> <p>In order to answer this question, we need to remember that there is an important difference between a program and the underlying algorithm that the program is representing. As we stated in Chapter 1, an algorithm is a generic, step-by-step list of instructions for solving a problem. It is a method for solving any instance of the problem so that given a particular input, the algorithm produces the desired result. A program, on the other hand, is an algorithm that has been encoded into some programming language. There may be many programs for the same algorithm, depending on the programmer and the programming language being used.</p> <p>To explore this difference further, consider the function shown in <code>ActiveCode 1</code>. This function solves a familiar problem, computing the sum of the first n integers. The algorithm uses the idea of an accumulator variable that is initialized to 0. The solution then iterates through the n integers, adding each to the accumulator.</p> Summation of the First n Integers<pre><code>def sum_of_n(n):\n    the_sum = 0\n    for i in range(1, n + 1):\n        the_sum = the_sum + i\n\n    return the_sum\n\nprint(sum_of_n(10))\n</code></pre> <p>Now look at the function in <code>ActiveCode 2</code>. At first glance it may look strange, but upon further inspection you can see that this function is essentially doing the same thing as the previous one. The reason this is not obvious is poor coding. We did not use good identifier names to assist with readability, and we used an extra assignment statement that was not really necessary during the accumulation step.</p> Another Summation of the First n Integers<pre><code>def foo(tom):\n    fred = 0\n    for bill in range(1, tom + 1):\n        barney = bill\n        fred = fred + barney\n\n    return fred\n\nprint(foo(10))\n</code></pre> <p>The question we raised earlier asked whether one function is better than another. The answer depends on your criteria. The function <code>sum_of_n</code> is certainly better than the function <code>foo</code> if you are concerned with readability. In fact, you have probably seen many examples of this in your introductory programming course since one of the goals there is to help you write programs that are easy to read and easy to understand. In this course, however, we are also interested in characterizing the algorithm itself. (We certainly hope that you will continue to strive to write readable, understandable code.)</p> <p>Algorithm analysis is concerned with comparing algorithms based upon the amount of computing resources that each algorithm uses. We want to be able to consider two algorithms and say that one is better than the other because it is more efficient in its use of those resources or perhaps because it simply uses fewer. From this perspective, the two functions above seem very similar. They both use essentially the same algorithm to solve the summation problem.</p> <p>At this point, it is important to think more about what we really mean by computing resources. There are two different ways to look at this. One way is to consider the amount of space or memory an algorithm requires to solve the problem. The amount of space required by a problem solution is typically dictated by the problem instance itself. Every so often, however, there are algorithms that have very specific space requirements, and in those cases we will be very careful to explain the variations.</p> <p>As an alternative to space requirements, we can analyze and compare algorithms based on the amount of time they require to execute. This measure is sometimes referred to as the execution time or running time of the algorithm. One way we can measure the execution time for the function <code>sum_of_n</code> is to do a benchmark analysis. This means that we will track the actual time required for the program to compute its result. In Python, we can benchmark a function by noting the starting time and ending time within the system we are using. In the <code>time</code> module there is a function called <code>time</code> that will return the current system clock time in seconds since some arbitrary starting point. By calling this function twice, at the beginning and at the end, and then computing the difference, we can get an exact number of seconds (fractions in most cases) for execution.</p> <pre><code>import time\n\ndef sum_of_n_2(n):\n    start = time.time()\n\n    the_sum = 0\n    for i in range(1, n + 1):\n        the_sum = the_sum + i\n\n    end = time.time()\n\n    return the_sum, end - start\n</code></pre> <p><code>Listing 1</code> shows the original <code>sum_of_n</code> function with the timing calls embedded before and after the summation. The function returns a tuple consisting of the result and the amount of time (in seconds) required for the calculation. If we perform five invocations of the function, each computing the sum of the first 10,000 integers, we get the following:</p> <pre><code>&gt;&gt;&gt; for i in range(5):\n...     print(\"Sum is %d required %10.7f seconds\" % sum_of_n_2(10000))\n... \nSum is 50005000 required  0.0018950 seconds\nSum is 50005000 required  0.0018620 seconds\nSum is 50005000 required  0.0019171 seconds\nSum is 50005000 required  0.0019162 seconds\nSum is 50005000 required  0.0019360 seconds\n&gt;&gt;&gt;\n</code></pre> <p>We discover that the time is fairly consistent and it takes on average about 0.0019 seconds to execute that code. What if we run the function adding the first 100,000 integers?</p> <pre><code>&gt;&gt;&gt; for i in range(5):\n...     print(\"Sum is %d required %10.7f seconds\" % sum_of_n_2(100000))\n... \nSum is 5000050000 required  0.0199420 seconds\nSum is 5000050000 required  0.0180972 seconds\nSum is 5000050000 required  0.0194821 seconds\nSum is 5000050000 required  0.0178988 seconds\nSum is 5000050000 required  0.0188949 seconds\n&gt;&gt;&gt;\n</code></pre> <p>Again, the time required for each run, although longer, is very consistent, averaging about 10 times more seconds. For <code>n</code> equal to 1,000,000 we get:</p> <pre><code>&gt;&gt;&gt; for i in range(5):\n...     print(\"Sum is %d required %10.7f seconds\" % sum_of_n_2(1000000))\n...\nSum is 500000500000 required  0.1948988 seconds\nSum is 500000500000 required  0.1850290 seconds\nSum is 500000500000 required  0.1809771 seconds\nSum is 500000500000 required  0.1729250 seconds\nSum is 500000500000 required  0.1646299 seconds\n&gt;&gt;&gt;\n</code></pre> <p>In this case, the average again turns out to be about 10 times the previous experiment.</p> <p>Now consider <code>ActiveCode 3</code>, which shows a different means of solving the summation problem. This function, <code>sum_of_n_3</code>, takes advantage of a closed equation \\(`\\sum_{i=1}^{n} i = \\frac {(n)(n+1)}{2}\\) to compute the sum of the first <code>n</code> integers without iterating.</p> Summation Without Iteration<pre><code>def sum_of_n_3(n):\n    return (n * (n + 1)) / 2\n\n\nprint(sum_of_n_3(10))\n</code></pre> <p>If we do the same benchmark measurement for <code>sum_of_n_3</code>, using five different values for <code>n</code> (10,000, 100,000, 1,000,000, 10,000,000, and 100,000,000), we get the following results:</p> <pre><code>Sum is 50005000 required 0.00000095 seconds\nSum is 5000050000 required 0.00000191 seconds\nSum is 500000500000 required 0.00000095 seconds\nSum is 50000005000000 required 0.00000095 seconds\nSum is 5000000050000000 required 0.00000119 seconds\n</code></pre> <p>There are two important things to notice about this output. First, the times recorded above are shorter than any of the previous examples. Second, they are very consistent no matter what the value of <code>n</code>. It appears that <code>sum_of_n_3</code> is hardly impacted by the number of integers being added.</p> <p>But what does this benchmark really tell us? Intuitively, we can see that the iterative solutions seem to be doing more work since some program steps are being repeated. This is likely the reason it is taking longer. Also, the time required for the iterative solution seems to increase as we increase the value of <code>n</code>. However, if we ran the same function on a different computer or used a different programming language, we would likely get different results. It could take even longer to perform <code>sum_of_n_3</code> if the computer were older.</p> <p>We need a better way to characterize these algorithms with respect to execution time. The benchmark technique computes the actual time to execute. It does not really provide us with a useful measurement because it is dependent on a particular machine, program, time of day, compiler, and programming language. Instead, we would like to have a characterization that is independent of the program or computer being used. This measure would then be useful for judging the algorithm alone and could be used to compare algorithms across implementations.</p>"},{"location":"c2/s3/","title":"2.3. \u5927O\u8868\u793a\u6cd5","text":"<p>2.3. Big O Notation</p> \u4e2d\u6587\u82f1\u6587 <p>\u5f53\u8bd5\u56fe\u5728\u72ec\u7acb\u4e8e\u4efb\u4f55\u7279\u5b9a\u7a0b\u5e8f\u6216\u8ba1\u7b97\u673a\u7684\u6267\u884c\u65f6\u95f4\u65b9\u9762\u8868\u5f81\u7b97\u6cd5\u7684\u6548\u7387\u65f6\uff0c\u91cf\u5316\u7b97\u6cd5\u6240\u9700\u7684\u64cd\u4f5c\u6216\u6b65\u9aa4\u7684\u6570\u91cf\u975e\u5e38\u91cd\u8981\u3002 \u5982\u679c\u5c06\u8fd9\u4e9b\u6b65\u9aa4\u4e2d\u7684\u6bcf\u4e00\u4e2a\u90fd\u89c6\u4e3a\u8ba1\u7b97\u7684\u57fa\u672c\u5355\u5143\uff0c\u5219\u7b97\u6cd5\u7684\u6267\u884c\u65f6\u95f4\u53ef\u4ee5\u8868\u793a\u4e3a\u89e3\u51b3\u95ee\u9898\u6240\u9700\u7684\u6b65\u9aa4\u6570\u3002 \u51b3\u5b9a\u9002\u5f53\u7684\u57fa\u672c\u8ba1\u7b97\u5355\u4f4d\u53ef\u80fd\u662f\u4e00\u4e2a\u590d\u6742\u7684\u95ee\u9898\uff0c\u5e76\u4e14\u53d6\u51b3\u4e8e\u7b97\u6cd5\u7684\u5b9e\u73b0\u65b9\u5f0f\u3002</p> <p>\u7528\u4e8e\u6bd4\u8f83\u524d\u9762\u6240\u793a\u7684\u6c42\u548c\u7b97\u6cd5\u7684\u4e00\u4e2a\u5f88\u597d\u7684\u57fa\u672c\u8ba1\u7b97\u5355\u4f4d\u53ef\u80fd\u662f\u4e3a\u8ba1\u7b97\u603b\u548c\u800c\u6267\u884c\u7684\u8d4b\u503c\u8bed\u53e5\u7684\u6570\u91cf\u3002 \u5728\u51fd\u6570<code>sum_of_n</code>\u4e2d\uff0c\u8d4b\u503c\u8bed\u53e5\u7684\u6570\u91cf\u4e3a 1 (\\(the\\_sum = 0\\)) \u52a0\u4e0a n \u7684\u503c\uff08\u6211\u4eec\u6267\u884c\u7684\u6b21\u6570 \\(the\\_sum = the\\_sum + i\\) \uff09\u3002 \u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a\u51fd\u6570\u6765\u8868\u793a\u5b83\uff0c\u79f0\u4e4b\u4e3a\\(T\\)\uff0c\u5176\u4e2d\\(T(n) = 1 + n\\)\u3002 \u53c2\u6570 n \u901a\u5e38\u88ab\u79f0\u4e3a \u201c\u95ee\u9898\u7684\u5927\u5c0f\u201d\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u7406\u89e3\u4e3a\u201c\\(T(n)\\) \u662f\u89e3\u51b3\u5927\u5c0f\u4e3a \\(n\\) \u7684\u95ee\u9898\u6240\u9700\u7684\u65f6\u95f4\uff0c\u5373 \\(1 + n\\) \u4e2a\u6b65\u9aa4\u3002\u201d</p> <p>\u5728\u4e0a\u9762\u7ed9\u51fa\u7684\u6c42\u548c\u51fd\u6570\u4e2d\uff0c\u4f7f\u7528\u6c42\u548c\u4e2d\u7684\u9879\u6570\u6765\u8868\u793a\u95ee\u9898\u7684\u5927\u5c0f\u662f\u6709\u610f\u4e49\u7684\u3002 \u7136\u540e\u6211\u4eec\u53ef\u4ee5\u8bf4\u524d 100,000 \u4e2a\u6574\u6570\u7684\u603b\u548c\u662f\u6bd4\u524d 1,000 \u4e2a\u6574\u6570\u7684\u603b\u548c\u66f4\u5927\u7684\u6c42\u548c\u95ee\u9898\u5b9e\u4f8b\u3002 \u56e0\u6b64\uff0c\u89e3\u51b3\u8f83\u5927\u6848\u4ef6\u6240\u9700\u7684\u65f6\u95f4\u6bd4\u89e3\u51b3\u8f83\u5c0f\u6848\u4ef6\u6240\u9700\u7684\u65f6\u95f4\u66f4\u957f\u4f3c\u4e4e\u662f\u5408\u7406\u7684\u3002 \u6211\u4eec\u7684\u76ee\u6807\u662f\u5c55\u793a\u7b97\u6cd5\u7684\u6267\u884c\u65f6\u95f4\u5982\u4f55\u968f\u7740\u95ee\u9898\u7684\u5927\u5c0f\u800c\u53d8\u5316\u3002</p> <p>\u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6\u66f4\u613f\u610f\u5c06\u8fd9\u79cd\u5206\u6790\u6280\u672f\u66f4\u8fdb\u4e00\u6b65\u3002 \u4e8b\u5b9e\u8bc1\u660e\uff0c\u786e\u5207\u7684\u64cd\u4f5c\u6b21\u6570\u5e76\u4e0d\u50cf\u786e\u5b9a \\(T(n)\\) \u51fd\u6570\u4e2d\u6700\u4e3b\u8981\u7684\u90e8\u5206\u90a3\u4e48\u91cd\u8981\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u968f\u7740\u95ee\u9898\u53d8\u5f97\u8d8a\u6765\u8d8a\u5927\uff0c\\(T(n)\\) \u51fd\u6570\u7684\u67d0\u4e9b\u90e8\u5206\u5f80\u5f80\u4f1a\u538b\u5012\u5176\u4f59\u90e8\u5206\u3002 \u8fd9\u4e2a\u4e3b\u5bfc\u672f\u8bed\u6700\u7ec8\u662f\u7528\u6765\u8fdb\u884c\u6bd4\u8f83\u7684\u3002 \u6570\u91cf\u7ea7 \u51fd\u6570\u63cf\u8ff0\u4e86\u968f\u7740 n \u503c\u7684\u589e\u52a0\u800c\u589e\u52a0\u6700\u5feb\u7684 \\(T(n)\\) \u90e8\u5206\u3002 \u6570\u91cf\u7ea7\u901a\u5e38\u79f0\u4e3a Big O \u8868\u793a\u6cd5\uff08\u4ee3\u8868 order\uff09\u5e76\u5199\u4e3a \\(O(f(n))\\)\u3002 \u5b83\u63d0\u4f9b\u4e86\u8ba1\u7b97\u4e2d\u5b9e\u9645\u6b65\u9aa4\u6570\u7684\u6709\u7528\u8fd1\u4f3c\u503c\u3002 \u51fd\u6570 \\(f(n)\\) \u63d0\u4f9b\u4e86\u539f\u59cb \\(T(n)\\) \u7684\u4e3b\u8981\u90e8\u5206\u7684\u7b80\u5355\u8868\u793a\u3002</p> <p>\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\\(T(n) = 1 + n\\)\u3002 \u968f\u7740 n \u53d8\u5927\uff0c\u5e38\u6570 1 \u5bf9\u6700\u7ec8\u7ed3\u679c\u7684\u91cd\u8981\u6027\u5c06\u53d8\u5f97\u8d8a\u6765\u8d8a\u5c0f\u3002 \u5982\u679c\u6211\u4eec\u6b63\u5728\u5bfb\u627e \\(T(n)\\) \u7684\u8fd1\u4f3c\u503c\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u53bb\u6389 1 \u5e76\u7b80\u5355\u5730\u8bf4\u8fd0\u884c\u65f6\u95f4\u662f \\(O(n)\\)\u3002 \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c1 \u5bf9\u4e8e \\(T(n)\\) \u6765\u8bf4\u80af\u5b9a\u5f88\u91cd\u8981\u3002 \u7136\u800c\uff0c\u968f\u7740 n \u53d8\u5927\uff0c\u6211\u4eec\u7684\u8fd1\u4f3c\u503c\u5728\u6ca1\u6709\u5b83\u7684\u60c5\u51b5\u4e0b\u4e5f\u5c06\u540c\u6837\u51c6\u786e\u3002</p> <p>\u518d\u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5047\u8bbe\u5bf9\u4e8e\u67d0\u4e9b\u7b97\u6cd5\uff0c\u786e\u5207\u7684\u6b65\u9aa4\u6570\u662f \\(T(n)=5n^{2} + 27n + 1005\\)\u3002 \u5f53 n \u5f88\u5c0f\u65f6\uff0c\u4f8b\u5982 1 \u6216 2\uff0c\u5e38\u6570 1005 \u4f3c\u4e4e\u662f\u51fd\u6570\u7684\u4e3b\u8981\u90e8\u5206\u3002 \u7136\u800c\uff0c\u968f\u7740 n \u53d8\u5927\uff0c\\(n^{2}\\) \u9879\u53d8\u5f97\u6700\u91cd\u8981\u3002 \u4e8b\u5b9e\u4e0a\uff0c\u5f53 n \u975e\u5e38\u5927\u65f6\uff0c\u5176\u4ed6\u4e24\u9879\u5728\u786e\u5b9a\u6700\u7ec8\u7ed3\u679c\u4e2d\u6240\u8d77\u7684\u4f5c\u7528\u5c31\u53d8\u5f97\u5fae\u4e0d\u8db3\u9053\u4e86\u3002 \u540c\u6837\uff0c\u5f53 n \u53d8\u5927\u65f6\uff0c\u4e3a\u4e86\u8fd1\u4f3c \\(T(n)\\)\uff0c\u6211\u4eec\u53ef\u4ee5\u5ffd\u7565\u5176\u4ed6\u9879\u5e76\u4e13\u6ce8\u4e8e \\(5n^{2}\\)\u3002 \u6b64\u5916\uff0c\u968f\u7740 n \u53d8\u5927\uff0c\u7cfb\u6570 \\(5\\) \u53d8\u5f97\u5fae\u4e0d\u8db3\u9053\u3002 \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8bf4\u51fd\u6570 \\(T(n)\\) \u7684\u6570\u91cf\u7ea7\u4e3a \\(f(n) = n^{2}\\)\uff0c\u6216\u8005\u7b80\u5355\u5730\u8bf4\u5b83\u662f \\(O(n^{2})\\)\u3002</p> <p>\u5c3d\u7ba1\u6211\u4eec\u5728\u6c42\u548c\u793a\u4f8b\u4e2d\u6ca1\u6709\u770b\u5230\u8fd9\u4e00\u70b9\uff0c\u4f46\u6709\u65f6\u7b97\u6cd5\u7684\u6027\u80fd\u53d6\u51b3\u4e8e\u6570\u636e\u7684\u7cbe\u786e\u503c\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u95ee\u9898\u7684\u5927\u5c0f\u3002 \u5bf9\u4e8e\u8fd9\u4e9b\u7c7b\u578b\u7684\u7b97\u6cd5\uff0c\u6211\u4eec\u9700\u8981\u6839\u636e\u6700\u4f73\u60c5\u51b5\u3001\u6700\u574f\u60c5\u51b5\u6216\u5e73\u5747\u60c5\u51b5\u6027\u80fd\u6765\u8868\u5f81\u5176\u6027\u80fd\u3002 \u6700\u574f\u60c5\u51b5\u6027\u80fd\u662f\u6307\u7b97\u6cd5\u6027\u80fd\u7279\u522b\u5dee\u7684\u7279\u5b9a\u6570\u636e\u96c6\uff0c\u800c\u5b8c\u5168\u76f8\u540c\u7b97\u6cd5\u7684\u4e0d\u540c\u6570\u636e\u96c6\u53ef\u80fd\u5177\u6709\u975e\u5e38\u597d\u7684\uff08\u6700\u4f73\u60c5\u51b5\uff09\u6027\u80fd\u3002 \u7136\u800c\uff0c\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u7b97\u6cd5\u7684\u6027\u80fd\u4ecb\u4e8e\u8fd9\u4e24\u4e2a\u6781\u7aef\u4e4b\u95f4\uff08\u5e73\u5747\u60c5\u51b5\u6027\u80fd\uff09\u3002 \u5bf9\u4e8e\u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6\u6765\u8bf4\uff0c\u7406\u89e3\u8fd9\u4e9b\u533a\u522b\u975e\u5e38\u91cd\u8981\uff0c\u8fd9\u6837\u4ed6\u4eec\u5c31\u4e0d\u4f1a\u88ab\u67d0\u4e00\u7279\u5b9a\u6848\u4f8b\u8bef\u5bfc\u3002</p> <p>\u5f53\u60a8\u7814\u7a76\u7b97\u6cd5\u65f6\uff0c\u8bb8\u591a\u975e\u5e38\u5e38\u89c1\u7684\u6570\u91cf\u7ea7\u51fd\u6570\u4f1a\u53cd\u590d\u51fa\u73b0\u3002 \u8fd9\u4e9b\u5982\u201c\u8868 1\u201d\u6240\u793a\u3002 \u4e3a\u4e86\u786e\u5b9a\u8fd9\u4e9b\u51fd\u6570\u4e2d\u7684\u54ea\u4e00\u4e2a\u662f\u4efb\u4f55 \\(T(n)\\) \u51fd\u6570\u7684\u4e3b\u5bfc\u90e8\u5206\uff0c\u6211\u4eec\u5fc5\u987b\u4e86\u89e3\u5f53 n \u53d8\u5927\u65f6\u5b83\u4eec\u5982\u4f55\u76f8\u4e92\u6bd4\u8f83\u3002</p> <p>\u8868 1: \u5927 O \u7684\u5e38\u7528\u51fd\u6570</p> f(n) \u540d\u79f0 \\(1\\) \u5e38\u91cf(Constant) \\(\\log n\\) \u5bf9\u6570(Logarithmic) \\(n\\) \u7ebf\u6027(Linear) \\(n\\log n\\) \u5bf9\u6570\u7ebf\u6027(Log linear) \\(n^{2}\\) \u4e8c\u6b21\u65b9(Quadratic) \\(n^{3}\\) \u7acb\u65b9(Cubic) \\(2^{n}\\) \u6307\u6570(Exponential) <p>\u201c\u56fe 1\u201d\u663e\u793a\u4e86\u201c\u8868 1\u201d\u4e2d\u5e38\u89c1\u529f\u80fd\u7684\u56fe\u8868\u3002 \u8bf7\u6ce8\u610f\uff0c\u5f53 n \u5f88\u5c0f\u65f6\uff0c\u51fd\u6570\u4e4b\u95f4\u7684\u5b9a\u4e49\u4e0d\u662f\u5f88\u597d\u3002 \u5f88\u96be\u8bf4\u54ea\u4e2a\u5360\u4e3b\u5bfc\u5730\u4f4d\u3002 \u7136\u800c\uff0c\u968f\u7740 n \u7684\u589e\u957f\uff0c\u5b58\u5728\u7740\u660e\u786e\u7684\u5173\u7cfb\uff0c\u5e76\u4e14\u5f88\u5bb9\u6613\u770b\u51fa\u5b83\u4eec\u5982\u4f55\u76f8\u4e92\u6bd4\u8f83\u3002</p> <p> \u56fe 1: \u5e38\u89c1\u5927 O \u51fd\u6570\u56fe </p> <p>\u4f5c\u4e3a\u6700\u540e\u4e00\u4e2a\u793a\u4f8b\uff0c\u5047\u8bbe\u6211\u4eec\u6709\u201c\u6e05\u5355 2\u201d\u4e2d\u6240\u793a\u7684 Python \u4ee3\u7801\u7247\u6bb5\u3002 \u5c3d\u7ba1\u8fd9\u4e2a\u7a0b\u5e8f\u5b9e\u9645\u4e0a\u5e76\u6ca1\u6709\u505a\u4efb\u4f55\u4e8b\u60c5\uff0c\u4f46\u4e86\u89e3\u6211\u4eec\u5982\u4f55\u83b7\u53d6\u5b9e\u9645\u4ee3\u7801\u5e76\u5206\u6790\u6027\u80fd\u8fd8\u662f\u5f88\u6709\u542f\u53d1\u6027\u7684\u3002</p> <p>\u6e05\u5355 2</p> <pre><code>a = 5\nb = 6\nc = 10\nfor i in range(n):\n    for j in range(n):\n        x = i * i\n        y = j * j\n        z = i * j\nfor k in range(n):\n    w = a * k + 45\n    v = b * b\nd = 33\n</code></pre> <p>\u8d4b\u503c\u8fd0\u7b97\u7684\u6b21\u6570\u662f\u56db\u9879\u4e4b\u548c\u3002 \u7b2c\u4e00\u9879\u662f\u5e38\u91cf 3\uff0c\u4ee3\u8868\u7247\u6bb5\u5f00\u5934\u7684\u4e09\u4e2a\u8d4b\u503c\u8bed\u53e5\u3002 \u7b2c\u4e8c\u9879\u662f \\(3n^{2}\\)\uff0c\u56e0\u4e3a\u7531\u4e8e\u5d4c\u5957\u8fed\u4ee3\uff0c\u8bed\u6709 3 \u4e2a\u53e5\u88ab\u6267\u884c\u4e86 \\(n^{2}\\) \u6b21\u3002 \u7b2c\u4e09\u9879\u662f \\(2n\\)\uff0c\u4e24\u6761\u8bed\u53e5\u8fed\u4ee3 n \u6b21\u3002 \u6700\u540e\uff0c\u7b2c\u56db\u9879\u662f\u5e38\u65701\uff0c\u4ee3\u8868\u6700\u7ec8\u7684\u8d4b\u503c\u8bed\u53e5\u3002 \u8fd9\u7ed9\u6211\u4eec\\(T(n) = 3 + 3n^{2} + 2n + 1 = 3n^{2} + 2n + 4\\)\u3002 \u901a\u8fc7\u67e5\u770b\u6307\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u770b\u51fa \\(n^{2}\\) \u9879\u5c06\u5360\u4e3b\u5bfc\u5730\u4f4d\uff0c\u56e0\u6b64\u8fd9\u6bb5\u4ee3\u7801\u662f \\(O(n^{2})\\)\u3002 \u8bf7\u6ce8\u610f\uff0c\u968f\u7740 n \u53d8\u5927\uff0c\u6240\u6709\u5176\u4ed6\u9879\u4ee5\u53ca\u4e3b\u9879\u7684\u7cfb\u6570\u90fd\u53ef\u4ee5\u5ffd\u7565\u3002</p> <p> \u56fe 2\uff1a\\(T(n)\\) \u4e0e\u5e38\u89c1 \u5927 O \u51fd\u6570\u7684\u6bd4\u8f83 </p> <p><code>\u56fe 2</code> \u663e\u793a\u4e86\u4e00\u4e9b\u5e38\u89c1\u7684 \u5927 O \u51fd\u6570\u4e0e\u4e0a\u9762\u8ba8\u8bba\u7684 \\(T(n)\\) \u51fd\u6570\u7684\u6bd4\u8f83\u3002 \u8bf7\u6ce8\u610f\uff0c\\(T(n)\\) \u6700\u521d\u5927\u4e8e\u4e09\u6b21\u51fd\u6570\u3002 \u7136\u800c\uff0c\u968f\u7740 n \u7684\u589e\u957f\uff0c\u4e09\u6b21\u51fd\u6570\u5f88\u5feb\u5c31\u4f1a\u8d85\u8fc7 \\(T(n)\\)\u3002 \u5f88\u5bb9\u6613\u770b\u51fa\uff0c\u968f\u7740 \\(n\\) \u7ee7\u7eed\u589e\u957f\uff0c\\(T(n)\\) \u9075\u5faa\u4e8c\u6b21\u51fd\u6570\u3002</p> <p>\u81ea\u68c0</p> <p>\u7f16\u5199\u4e24\u4e2a Python \u51fd\u6570\u6765\u67e5\u627e\u5217\u8868\u4e2d\u7684\u6700\u5c0f\u6570\u5b57\u3002 \u7b2c\u4e00\u4e2a\u51fd\u6570\u5e94\u8be5\u5c06\u6bcf\u4e2a\u6570\u5b57\u4e0e\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5176\u4ed6\u6570\u5b57\u8fdb\u884c\u6bd4\u8f83\u3002 \\(O(n^2)\\)\u3002 \u7b2c\u4e8c\u4e2a\u51fd\u6570\u5e94\u8be5\u662f\u7ebf\u6027\u7684\\(O(n)\\)\u3002</p> <p></p> <p>Big O Notation</p> <p>When trying to characterize an algorithm\u2019s efficiency in terms of execution time, independent of any particular program or computer, it is important to quantify the number of operations or steps that the algorithm will require. If each of these steps is considered to be a basic unit of computation, then the execution time for an algorithm can be expressed as the number of steps required to solve the problem. Deciding on an appropriate basic unit of computation can be a complicated problem and will depend on how the algorithm is implemented.</p> <p>A good basic unit of computation for comparing the summation algorithms shown earlier might be the number of assignment statements performed to compute the sum. In the function <code>sum_of_n</code>, the number of assignment statements is 1 (\\(the\\_sum = 0\\)) plus the value of n (the number of times we perform \\(the\\_sum = the\\_sum + i\\)). We can denote this by a function, call it \\(T\\), where \\(T(n) = 1 + n\\). The parameter n is often referred to as the \u201csize of the problem,\u201d and we can read this as \u201c\\(T(n)\\) is the time it takes to solve a problem of size \\(n\\), namely \\(1 + n\\) steps.\u201d</p> <p>In the summation functions given above, it makes sense to use the number of terms in the summation to denote the size of the problem. We can then say that the sum of the first 100,000 integers is a bigger instance of the summation problem than the sum of the first 1,000. Because of this, it might seem reasonable that the time required to solve the larger case would be greater than for the smaller case. Our goal then is to show how the algorithm\u2019s execution time changes with respect to the size of the problem.</p> <p>Computer scientists prefer to take this analysis technique one step further. It turns out that the exact number of operations is not as important as determining the most dominant part of the \\(T(n)\\) function. In other words, as the problem gets larger, some portion of the \\(T(n)\\) function tends to overpower the rest. This dominant term is what, in the end, is used for comparison. The order of magnitude function describes the part of \\(T(n)\\) that increases the fastest as the value of n increases. Order of magnitude is often called Big O notation (for order) and written as \\(O(f(n))\\). It provides a useful approximation of the actual number of steps in the computation. The function \\(f(n)\\) provides a simple representation of the dominant part of the original \\(T(n)\\).</p> <p>In the above example, \\(T(n) = 1 + n\\). As n gets larger, the constant 1 will become less and less significant to the final result. If we are looking for an approximation for \\(T(n)\\), then we can drop the 1 and simply say that the running time is \\(O(n)\\). It is important to note that the 1 is certainly significant for \\(T(n)\\). However, as n gets large, our approximation will be just as accurate without it.</p> <p>As another example, suppose that for some algorithm, the exact number of steps is \\(T(n)=5n^{2} + 27n + 1005\\). When n is small, say 1 or 2, the constant 1005 seems to be the dominant part of the function. However, as n gets larger, the \\(n^{2}\\) term becomes the most important. In fact, when n is really large, the other two terms become insignificant in the role that they play in determining the final result. Again, to approximate \\(T(n)\\) as n gets large, we can ignore the other terms and focus on \\(5n^{2}\\). In addition, the coefficient \\(5\\) becomes insignificant as n gets large. We would say then that the function \\(T(n)\\) has an order of magnitude \\(f(n) = n^{2}\\), or simply that it is \\(O(n^{2})\\).</p> <p>Although we do not see this in the summation example, sometimes the performance of an algorithm depends on the exact values of the data rather than simply the size of the problem. For these kinds of algorithms we need to characterize their performance in terms of best-case, worst-case, or average-case performance. The worst-case performance refers to a particular data set where the algorithm performs especially poorly, whereas a different data set for the exact same algorithm might have extraordinarily good (best-case) performance. However, in most cases the algorithm performs somewhere in between these two extremes (average-case performance). It is important for a computer scientist to understand these distinctions so they are not misled by one particular case.</p> <p>A number of very common order of magnitude functions will come up over and over as you study algorithms. These are shown in <code>Table 1</code>. In order to decide which of these functions is the dominant part of any \\(T(n)\\) function, we must see how they compare with one another as n gets large.</p> <p>Table 1: Common Functions for Big O</p> f(n) Name \\(1\\) Constant \\(\\log n\\) Logarithmic \\(n\\) Linear \\(n\\log n\\) Log linear \\(n^{2}\\) Quadratic \\(n^{3}\\) Cubic \\(2^{n}\\) Exponential <p><code>Figure 1</code> shows graphs of the common functions from <code>Table 1</code>. Notice that when n is small, the functions are not very well defined with respect to one another. It is hard to tell which is dominant. However, as n grows, there is a definite relationship and it is easy to see how they compare with one another.</p> <p> Figure 1: Plot of Common Big O Functions </p> <p>As a final example, suppose that we have the fragment of Python code shown in <code>Listing 2</code>. Although this program does not really do anything, it is instructive to see how we can take actual code and analyze performance.</p> <p>Listing 2</p> <pre><code>a = 5\nb = 6\nc = 10\nfor i in range(n):\n    for j in range(n):\n        x = i * i\n        y = j * j\n        z = i * j\nfor k in range(n):\n    w = a * k + 45\n    v = b * b\nd = 33\n</code></pre> <p>The number of assignment operations is the sum of four terms. The first term is the constant 3, representing the three assignment statements at the start of the fragment. The second term is \\(3n^{2}\\), since there are three statements that are performed \\(n^{2}\\) times due to the nested iteration. The third term is \\(2n\\), two statements iterated n times. Finally, the fourth term is the constant 1, representing the final assignment statement. This gives us \\(T(n) = 3 + 3n^{2} + 2n + 1 = 3n^{2} + 2n + 4\\). By looking at the exponents, we can easily see that the \\(n^{2}\\) term will be dominant and therefore this fragment of code is \\(O(n^{2})\\). Note that all of the other terms as well as the coefficient on the dominant term can be ignored as n grows larger.</p> <p> Figure 2: Comparing \\(T(n)\\) with Common Big O Functions </p> <p><code>Figure 2 &lt;fig_graphfigure2&gt;</code> shows a few of the common Big O functions as they compare with the \\(T(n)\\) function discussed above. Note that \\(T(n)\\) is initially larger than the cubic function. However, as n grows, the cubic function quickly overtakes \\(T(n)\\). It is easy to see that \\(T(n)\\) then follows the quadratic function as \\(n\\) continues to grow.</p> <p>Self Check</p> <p>Write two Python functions to find the minimum number in a list.  The first function should compare each number to every other number on the list. \\(O(n^2)\\).  The second function should be linear \\(O(n)\\).</p> <p></p>"},{"location":"c2/s4/","title":"2.4. \u4e00\u4e2a\u5b57\u8c1c\u68c0\u6d4b\u4f8b\u5b50","text":"<p>2.4. An Anagram Detection Example</p> \u4e2d\u6587\u82f1\u6587 <p>A good example problem for showing algorithms with different orders of magnitude is the classic anagram detection problem for strings. One string is an anagram of another if the second is simply a rearrangement of the first. For example, <code>heart</code> and <code>earth</code> are anagrams. The strings <code>python</code> and <code>typhon</code> are anagrams as well. For the sake of simplicity, we will assume that the two strings in question are of equal length and that they are made up of symbols from the set of 26 lowercase alphabetic characters. Our goal is to write a boolean function that will take two strings and return whether they are anagrams.</p> <p>A good example problem for showing algorithms with different orders of magnitude is the classic anagram detection problem for strings. One string is an anagram of another if the second is simply a rearrangement of the first. For example, <code>heart</code> and <code>earth</code> are anagrams. The strings <code>python</code> and <code>typhon</code> are anagrams as well. For the sake of simplicity, we will assume that the two strings in question are of equal length and that they are made up of symbols from the set of 26 lowercase alphabetic characters. Our goal is to write a boolean function that will take two strings and return whether they are anagrams.</p>"},{"location":"c2/s4/#241-\u89e3\u51b3\u65b9\u68481\u5b57\u8c1c\u68c0\u6d4b\u9010\u4e00\u68c0\u67e5","title":"2.4.1. \u89e3\u51b3\u65b9\u68481\uff1a\u5b57\u8c1c\u68c0\u6d4b\u9010\u4e00\u68c0\u67e5","text":"<p>2.4.1. Solution 1: Anagram Detection Checking Off</p> \u4e2d\u6587\u82f1\u6587 <p>Our first solution to the anagram problem will check the lengths of the strings and then check to see that each character in the first string actually occurs in the second. If it is possible to check off each character, then the two strings must be anagrams. Checking off a character will be accomplished by replacing it with the special Python value <code>None</code>. However, since strings in Python are immutable, the first step in the process will be to convert the second string to a list. Each character from the first string can be checked against the characters in the list and if found, checked off by replacement. <code>ActiveCode 1</code> shows this function.</p> Activity: 2.4.1.1 Checking Off<pre><code>def anagram_solution_1(s1, s2):\n    still_ok = True\n    if len(s1) != len(s2):\n        still_ok = False\n\n    a_list = list(s2)\n    pos_1 = 0\n\n    while pos_1 &lt; len(s1) and still_ok:\n        pos_2 = 0\n        found = False\n        while pos_2 &lt; len(a_list) and not found:\n            if s1[pos_1] == a_list[pos_2]:\n                found = True\n            else:\n                pos_2 = pos_2 + 1\n        if found:\n            a_list[pos_2] = None\n        else:\n            still_ok = False\n        pos_1 = pos_1 + 1\n\n    return still_ok\n\n\nprint(anagram_solution_1(\"apple\", \"pleap\"))  # expected: True\nprint(anagram_solution_1(\"abcd\", \"dcba\"))  # expected: True\nprint(anagram_solution_1(\"abcd\", \"dcda\"))  # expected: False\n</code></pre> <p>To analyze this algorithm, we need to note that each of the n characters in <code>s1</code> will cause an iteration through up to n characters in the list from <code>s2</code>. Each of the n positions in the list will be visited once to match a character from s1. The number of visits then becomes the sum of the integers from 1 to n. We stated earlier that this can be written as</p> \\[\\begin{align}    \\sum_{i=1}^{n} i &amp;= \\frac {n(n+1)}{2} \\\\ &amp;= \\frac {1}{2}n^{2} + \\frac {1}{2}n \\end{align}\\] <p>As \\(n\\) gets large, the \\(n^{2}\\) term will dominate the $n term and the \\(\\frac {1}{2}\\) can be ignored. Therefore, this solution is \\(O(n^{2})\\).</p> <p>Our first solution to the anagram problem will check the lengths of the strings and then check to see that each character in the first string actually occurs in the second. If it is possible to check off each character, then the two strings must be anagrams. Checking off a character will be accomplished by replacing it with the special Python value <code>None</code>. However, since strings in Python are immutable, the first step in the process will be to convert the second string to a list. Each character from the first string can be checked against the characters in the list and if found, checked off by replacement. <code>ActiveCode 1</code> shows this function.</p> Activity: 2.4.1.1 Checking Off<pre><code>def anagram_solution_1(s1, s2):\n    still_ok = True\n    if len(s1) != len(s2):\n        still_ok = False\n\n    a_list = list(s2)\n    pos_1 = 0\n\n    while pos_1 &lt; len(s1) and still_ok:\n        pos_2 = 0\n        found = False\n        while pos_2 &lt; len(a_list) and not found:\n            if s1[pos_1] == a_list[pos_2]:\n                found = True\n            else:\n                pos_2 = pos_2 + 1\n        if found:\n            a_list[pos_2] = None\n        else:\n            still_ok = False\n        pos_1 = pos_1 + 1\n\n    return still_ok\n\n\nprint(anagram_solution_1(\"apple\", \"pleap\"))  # expected: True\nprint(anagram_solution_1(\"abcd\", \"dcba\"))  # expected: True\nprint(anagram_solution_1(\"abcd\", \"dcda\"))  # expected: False\n</code></pre> <p>To analyze this algorithm, we need to note that each of the n characters in <code>s1</code> will cause an iteration through up to n characters in the list from <code>s2</code>. Each of the n positions in the list will be visited once to match a character from s1. The number of visits then becomes the sum of the integers from 1 to n. We stated earlier that this can be written as</p> \\[\\begin{align}    \\sum_{i=1}^{n} i &amp;= \\frac {n(n+1)}{2} \\\\ &amp;= \\frac {1}{2}n^{2} + \\frac {1}{2}n \\end{align}\\] <p>As \\(n\\) gets large, the \\(n^{2}\\) term will dominate the $n term and the \\(\\frac {1}{2}\\) can be ignored. Therefore, this solution is \\(O(n^{2})\\).</p>"},{"location":"c2/s4/#242-\u89e3\u51b3\u65b9\u68482\u6392\u5e8f\u548c\u6bd4\u8f83","title":"2.4.2. \u89e3\u51b3\u65b9\u68482\uff1a\u6392\u5e8f\u548c\u6bd4\u8f83","text":"<p>2.4.2. Anagram Detection Solution 2: Sort and Compare</p> \u4e2d\u6587\u82f1\u6587 <p>Another solution to the anagram problem will make use of the fact that even though <code>s1</code> and <code>s2</code> are different, they are anagrams only if they consist of exactly the same characters. So if we begin by sorting each string alphabetically from a to z, we will end up with the same string if the original two strings are anagrams. <code>ActiveCode 2</code> shows this solution. Again, in Python we can use the built-in <code>sort</code> method on lists by simply converting each string to a list at the start.</p> Activity: 2.4.2.1 Sort and Compare<pre><code>def anagram_solution_2(s1, s2):\n    a_list_1 = list(s1)\n    a_list_2 = list(s2)\n\n    a_list_1.sort()\n    a_list_2.sort()\n\n    pos = 0\n    matches = True\n\n    while pos &lt; len(s1) and matches:\n        if a_list_1[pos] == a_list_2[pos]:\n            pos = pos + 1\n        else:\n            matches = False\n\n    return matches\n\n\nprint(anagram_solution_2(\"apple\", \"pleap\"))  # expected: True\nprint(anagram_solution_2(\"abcd\", \"dcba\"))  # expected: True\nprint(anagram_solution_2(\"abcd\", \"dcda\"))  # expected: False\n</code></pre> <p>At first glance you may be tempted to think that this algorithm is \\(O(n)\\), since there is one simple iteration to compare the n characters after the sorting process. However, the two calls to the Python <code>sort</code> method are not without their own cost. As we will see in Chapter 5, sorting is typically either \\(O(n^{2})\\) or \\(O(n\\log n)\\), so the sorting operations dominate the iteration. In the end, this algorithm will have the same order of magnitude as that of the sorting process.</p> <p>Another solution to the anagram problem will make use of the fact that even though <code>s1</code> and <code>s2</code> are different, they are anagrams only if they consist of exactly the same characters. So if we begin by sorting each string alphabetically from a to z, we will end up with the same string if the original two strings are anagrams. <code>ActiveCode 2</code> shows this solution. Again, in Python we can use the built-in <code>sort</code> method on lists by simply converting each string to a list at the start.</p> Activity: 2.4.2.1 Sort and Compare<pre><code>def anagram_solution_2(s1, s2):\n    a_list_1 = list(s1)\n    a_list_2 = list(s2)\n\n    a_list_1.sort()\n    a_list_2.sort()\n\n    pos = 0\n    matches = True\n\n    while pos &lt; len(s1) and matches:\n        if a_list_1[pos] == a_list_2[pos]:\n            pos = pos + 1\n        else:\n            matches = False\n\n    return matches\n\n\nprint(anagram_solution_2(\"apple\", \"pleap\"))  # expected: True\nprint(anagram_solution_2(\"abcd\", \"dcba\"))  # expected: True\nprint(anagram_solution_2(\"abcd\", \"dcda\"))  # expected: False\n</code></pre> <p>At first glance you may be tempted to think that this algorithm is \\(O(n)\\), since there is one simple iteration to compare the n characters after the sorting process. However, the two calls to the Python <code>sort</code> method are not without their own cost. As we will see in Chapter 5, sorting is typically either \\(O(n^{2})\\) or \\(O(n\\log n)\\), so the sorting operations dominate the iteration. In the end, this algorithm will have the same order of magnitude as that of the sorting process.</p>"},{"location":"c2/s4/#243-\u89e3\u51b3\u65b9\u68483\u66b4\u529b\u7834\u89e3","title":"2.4.3. \u89e3\u51b3\u65b9\u68483\uff1a\u66b4\u529b\u7834\u89e3","text":"<p>2.4.3. Anagram Detection Solution 3: Brute Force</p> \u4e2d\u6587\u82f1\u6587 <p>A brute force technique for solving a problem typically tries to exhaust all possibilities. For the anagram detection problem, we can simply generate a list of all possible strings using the characters from s1 and then see if s2 occurs. However, there is a problem with this approach. When generating all possible strings from s1, there are n possible first characters, \\(n - 1\\) possible characters for the second position, \\(n - 2\\) for the third, and so on. The total number of candidate strings is \\(n \\cdot (n - 1) \\cdot (n - 2) \\cdot ... \\cdot 3 \\cdot 2 \\cdot 1\\), which is \\(n!\\). Although some of the strings may be duplicates, the program cannot know this ahead of time and so it will still generate \\(n!\\) different strings.</p> <p>It turns out that \\(n!\\) grows even faster than \\(2^{n}\\) as n gets large. In fact, if s1 were 20 characters long, there would be \\(20! = 2,432,902,008,176,640,000\\) possible candidate strings. If we processed one possibility every second, it would still take us 77,146,816,596 years to go through the entire list. This is probably not going to be a good solution.</p> <p>A brute force technique for solving a problem typically tries to exhaust all possibilities. For the anagram detection problem, we can simply generate a list of all possible strings using the characters from s1 and then see if s2 occurs. However, there is a problem with this approach. When generating all possible strings from s1, there are n possible first characters, \\(n - 1\\) possible characters for the second position, \\(n - 2\\) for the third, and so on. The total number of candidate strings is \\(n \\cdot (n - 1) \\cdot (n - 2) \\cdot ... \\cdot 3 \\cdot 2 \\cdot 1\\), which is \\(n!\\). Although some of the strings may be duplicates, the program cannot know this ahead of time and so it will still generate \\(n!\\) different strings.</p> <p>It turns out that \\(n!\\) grows even faster than \\(2^{n}\\) as n gets large. In fact, if s1 were 20 characters long, there would be \\(20! = 2,432,902,008,176,640,000\\) possible candidate strings. If we processed one possibility every second, it would still take us 77,146,816,596 years to go through the entire list. This is probably not going to be a good solution.</p>"},{"location":"c2/s4/#244-\u89e3\u51b3\u65b9\u68484\u8ba1\u6570\u548c\u6bd4\u8f83","title":"2.4.4. \u89e3\u51b3\u65b9\u68484\uff1a\u8ba1\u6570\u548c\u6bd4\u8f83","text":"<p>2.4.4. Anagram Detection Solution 4: Count and Compare</p> \u4e2d\u6587\u82f1\u6587 <p>Our final solution to the anagram problem takes advantage of the fact that any two anagrams will have the same number of a\u2019s, the same number of b\u2019s, the same number of c\u2019s, and so on. In order to decide whether two strings are anagrams, we will first count the number of times each character occurs. Since there are 26 possible characters, we can use a list of 26 counters, one for each possible character. Each time we see a particular character, we will increment the counter at that position. In the end, if the two lists of counters are identical, the strings must be anagrams. <code>ActiveCode 3</code> shows this solution.</p> Activity: 2.4.4.1 Count and Compare<pre><code>def anagram_solution_4(s1, s2):\n    c1 = [0] * 26\n    c2 = [0] * 26\n\n    for i in range(len(s1)):\n        pos = ord(s1[i]) - ord(\"a\")\n        c1[pos] = c1[pos] + 1\n\n    for i in range(len(s2)):\n        pos = ord(s2[i]) - ord(\"a\")\n        c2[pos] = c2[pos] + 1\n\n    j = 0\n    still_ok = True\n    while j &lt; 26 and still_ok:\n        if c1[j] == c2[j]:\n            j = j + 1\n        else:\n            still_ok = False\n\n    return still_ok\n\n\nprint(anagram_solution_4(\"apple\", \"pleap\"))  # expected: True\nprint(anagram_solution_4(\"abcd\", \"dcba\"))  # expected: True\nprint(anagram_solution_4(\"abcd\", \"dcda\"))  # expected: False\n</code></pre> <p>Again, the solution has a number of iterations. However, unlike the first solution, none of them are nested. The first two iterations used to count the characters are both based on n. The third iteration, comparing the two lists of counts, always takes 26 steps since there are 26 possible characters in the strings. Adding it all up gives us \\(T(n)=2n+26\\) steps. That is \\(O(n)\\). We have found a linear order of magnitude algorithm for solving this problem.</p> <p>Before leaving this example, we need to say something about space requirements. Although the last solution was able to run in linear time, it could only do so by using additional storage to keep the two lists of character counts. In other words, this algorithm sacrificed space in order to gain time.</p> <p>This is a common occurrence. On many occasions you will need to make decisions between time and space trade-offs. In this case, the amount of extra space is not significant. However, if the underlying alphabet had millions of characters, there would be more concern. As a computer scientist, when given a choice of algorithms, it will be up to you to determine the best use of computing resources given a particular problem.</p> <p>Self Check [Activity: 2.4.4.2 Multiple Choice]</p> <p>Q-4: Given the following code fragment, what is its Big O running time?</p> <pre><code>test = 0\nfor i in range(n):\n   for j in range(n):\n      test = test + i * j\n</code></pre> <ul> <li> A. O(n)</li> <li> B. O(n^2)</li> <li> C. O(log n)</li> <li> D. O(n^3)</li> </ul> <p>Self Check [Activity: 2.4.4.3 Multiple Choice]</p> <p>Q-5: Given the following code fragment what is its Big O running time?</p> <pre><code>test = 0\nfor i in range(n):\n   test = test + 1\n\nfor j in range(n):\n   test = test - 1\n</code></pre> <ul> <li> A. O(n)</li> <li> B. O(n^2)</li> <li> C. O(log n)</li> <li> D. O(n^3)</li> </ul> <p>Self Check [Activity: 2.4.4.4 Multiple Choice]</p> <p>Q-6: Given the following code fragment what is its Big O running time?</p> <pre><code>i = n\nwhile i &gt; 0:\n   k = 2 + 2\n   i = i // 2\n</code></pre> <ul> <li> A. O(n)</li> <li> B. O(n^2)</li> <li> C. O(log n)</li> <li> D. O(n^3)</li> </ul> <p>Our final solution to the anagram problem takes advantage of the fact that any two anagrams will have the same number of a\u2019s, the same number of b\u2019s, the same number of c\u2019s, and so on. In order to decide whether two strings are anagrams, we will first count the number of times each character occurs. Since there are 26 possible characters, we can use a list of 26 counters, one for each possible character. Each time we see a particular character, we will increment the counter at that position. In the end, if the two lists of counters are identical, the strings must be anagrams. <code>ActiveCode 3</code> shows this solution.</p> Activity: 2.4.4.1 Count and Compare<pre><code>def anagram_solution_4(s1, s2):\n    c1 = [0] * 26\n    c2 = [0] * 26\n\n    for i in range(len(s1)):\n        pos = ord(s1[i]) - ord(\"a\")\n        c1[pos] = c1[pos] + 1\n\n    for i in range(len(s2)):\n        pos = ord(s2[i]) - ord(\"a\")\n        c2[pos] = c2[pos] + 1\n\n    j = 0\n    still_ok = True\n    while j &lt; 26 and still_ok:\n        if c1[j] == c2[j]:\n            j = j + 1\n        else:\n            still_ok = False\n\n    return still_ok\n\n\nprint(anagram_solution_4(\"apple\", \"pleap\"))  # expected: True\nprint(anagram_solution_4(\"abcd\", \"dcba\"))  # expected: True\nprint(anagram_solution_4(\"abcd\", \"dcda\"))  # expected: False\n</code></pre> <p>Again, the solution has a number of iterations. However, unlike the first solution, none of them are nested. The first two iterations used to count the characters are both based on n. The third iteration, comparing the two lists of counts, always takes 26 steps since there are 26 possible characters in the strings. Adding it all up gives us \\(T(n)=2n+26\\) steps. That is \\(O(n)\\). We have found a linear order of magnitude algorithm for solving this problem.</p> <p>Before leaving this example, we need to say something about space requirements. Although the last solution was able to run in linear time, it could only do so by using additional storage to keep the two lists of character counts. In other words, this algorithm sacrificed space in order to gain time.</p> <p>This is a common occurrence. On many occasions you will need to make decisions between time and space trade-offs. In this case, the amount of extra space is not significant. However, if the underlying alphabet had millions of characters, there would be more concern. As a computer scientist, when given a choice of algorithms, it will be up to you to determine the best use of computing resources given a particular problem.</p> <p>Self Check [Activity: 2.4.4.2 Multiple Choice]</p> <p>Q-4: Given the following code fragment, what is its Big O running time?</p> <pre><code>test = 0\nfor i in range(n):\n   for j in range(n):\n      test = test + i * j\n</code></pre> <ul> <li> A. O(n)</li> <li> B. O(n^2)</li> <li> C. O(log n)</li> <li> D. O(n^3)</li> </ul> <p>Self Check [Activity: 2.4.4.3 Multiple Choice]</p> <p>Q-5: Given the following code fragment what is its Big O running time?</p> <pre><code>test = 0\nfor i in range(n):\n   test = test + 1\n\nfor j in range(n):\n   test = test - 1\n</code></pre> <ul> <li> A. O(n)</li> <li> B. O(n^2)</li> <li> C. O(log n)</li> <li> D. O(n^3)</li> </ul> <p>Self Check [Activity: 2.4.4.4 Multiple Choice]</p> <p>Q-6: Given the following code fragment what is its Big O running time?</p> <pre><code>i = n\nwhile i &gt; 0:\n   k = 2 + 2\n   i = i // 2\n</code></pre> <ul> <li> A. O(n)</li> <li> B. O(n^2)</li> <li> C. O(log n)</li> <li> D. O(n^3)</li> </ul>"},{"location":"c2/s5/","title":"2.5. Python\u6570\u636e\u7ed3\u6784\u7684\u6027\u80fd","text":"<p>2.5. Performance of Python Data Structures</p> \u4e2d\u6587\u82f1\u6587 <p>Now that you have a general idea of Big O notation and the differences between the different functions, our goal in this section is to tell you about the Big O performance for the operations on Python lists and dictionaries. We will then show you some timing experiments that illustrate the costs and benefits of using certain operations on each data structure. It is important for you to understand the efficiency of these Python data structures because they are the building blocks we will use as we implement other data structures in the remainder of the book. In this section we are not going to explain why the performance is what it is. In later chapters you will see some possible implementations of both lists and dictionaries and how the performance depends on the implementation.</p> <p>Now that you have a general idea of Big O notation and the differences between the different functions, our goal in this section is to tell you about the Big O performance for the operations on Python lists and dictionaries. We will then show you some timing experiments that illustrate the costs and benefits of using certain operations on each data structure. It is important for you to understand the efficiency of these Python data structures because they are the building blocks we will use as we implement other data structures in the remainder of the book. In this section we are not going to explain why the performance is what it is. In later chapters you will see some possible implementations of both lists and dictionaries and how the performance depends on the implementation.</p>"},{"location":"c2/s6/","title":"2.6. \u5217\u8868","text":"<p>2.6. Lists</p> \u4e2d\u6587\u82f1\u6587 <p>The designers of Python had many choices to make when they implemented the list data structure. Each of these choices could have an impact on how fast list operations perform. To help them make the right choices they looked at the ways that people would most commonly use the list data structure, and they optimized their implementation of a list so that the most common operations were very fast. Of course they also tried to make the less common operations fast, but when a trade-off had to be made the performance of a less common operation was often sacrificed in favor of the more common operation.</p> <p>Two common operations are indexing and assigning to an index position. Both of these operations take the same amount of time no matter how large the list becomes. When an operation like this is independent of the size of the list, it is \\(O(1)\\).</p> <p>Another very common programming task is to grow a list. There are two ways to create a longer list. You can use the append method or the concatenation operator. The <code>append</code> method is \\(O(1)\\). However, the concatenation operator is \\(O(k)\\) where \\(k\\) is the size of the list that is being concatenated. This is important for you to know because it can help you make your own programs more efficient by choosing the right tool for the job.</p> <p>Let's look at four different ways we might generate a list of <code>n</code> numbers starting with 0. First we\u2019ll try a <code>for</code> loop and create the list by concatenation, then we\u2019ll use <code>append</code> rather than concatenation. Next, we\u2019ll try creating the list using list comprehension and finally, and perhaps the most obvious way, using the range function wrapped by a call to the list constructor. <code>Listing 3</code> shows the code for making our list four different ways.</p> Listing 3<pre><code>def test1():\n    l = []\n    for i in range(1000):\n        l = l + [i]\n\n\ndef test2():\n    l = []\n    for i in range(1000):\n        l.append(i)\n\n\ndef test3():\n    l = [i for i in range(1000)]\n\n\ndef test4():\n    l = list(range(1000))\n</code></pre> <p>To capture the time it takes for each of our functions to execute we will use Python\u2019s <code>timeit</code> module. The <code>timeit</code> module is designed to allow Python developers to make cross-platform timing measurements by running functions in a consistent environment and using timing mechanisms that are as similar as possible across operating systems.</p> <p>To use <code>timeit</code> you create a <code>Timer</code> object whose parameters are two Python statements. The first parameter is a Python statement that you want to time; the second parameter is a statement that will run once to set up the test. The <code>timeit</code> module will then time how long it takes to execute the statement some number of times. By default <code>timeit</code> will try to run the statement one million times. When it's done it returns the time as a floating-point value representing the total number of seconds. However, since it executes the statement a million times, you can read the result as the number of microseconds to execute the test one time. You can also pass <code>timeit</code> a named parameter called <code>number</code> that allows you to specify how many times the test statement is executed. The following session shows how long it takes to run each of our test functions a thousand times.</p> <pre><code>from timeit import Timer\n\n\nt1 = Timer(\"test1()\", \"from __main__ import test1\")\nprint(f\"concatenation: {t1.timeit(number=1000):15.2f} milliseconds\")\nt2 = Timer(\"test2()\", \"from __main__ import test2\")\nprint(f\"appending: {t2.timeit(number=1000):19.2f} milliseconds\")\nt3 = Timer(\"test3()\", \"from __main__ import test3\")\nprint(f\"list comprehension: {t3.timeit(number=1000):10.2f} milliseconds\")\nt4 = Timer(\"test4()\", \"from __main__ import test4\")\nprint(f\"list range: {t4.timeit(number=1000):18.2f} milliseconds\")\n\nconcatenation:           6.54 milliseconds\nappending:               0.31 milliseconds\nlist comprehension:      0.15 milliseconds\nlist range:              0.07 milliseconds\n</code></pre> <p>In the experiment above the statement that we are timing is the function call to <code>test1()</code>, <code>test2()</code>, and so on. The setup statement may look very strange to you, so let\u2019s consider it in more detail. You are probably very familiar with the <code>from...import</code> statement, but this is usually used at the beginning of a Python program file. In this case the statement <code>from __main__ import test1</code> imports the function <code>test1</code> from the <code>__main__</code> namespace into the namespace that <code>timeit</code> sets up for the timing experiment. The <code>timeit</code> module does this because it wants to run the timing tests in an environment that is uncluttered by any stray variables you may have created that may interfere with your function\u2019s performance in some unforeseen way.</p> <p>From the experiment above it is clear that the <code>append</code> operation at 0.31 milliseconds is much faster than concatenation at 6.54 milliseconds. We also show the times for two additional methods for creating a list: using the list constructor with a call to <code>range</code> and a list comprehension. It is interesting to note that the list comprehension is twice as fast as a <code>for</code> loop with an <code>append</code> operation.</p> <p>One final observation about this little experiment is that all of the times that you see above include some overhead for actually calling the test function, but we can assume that the function call overhead is identical in all four cases so we still get a meaningful comparison of the operations. So it would not be accurate to say that the concatenation operation takes 6.54 milliseconds but rather the concatenation test function takes 6.54 milliseconds. As an exercise you could test the time it takes to call an empty function and subtract that from the numbers above.</p> <p>Now that we have seen how performance can be measured concretely, you can look at <code>Table 2</code> to see the Big O efficiency of all the basic list operations. After thinking carefully about <code>Table 2</code>, you may be wondering about the two different times for <code>pop</code>. When <code>pop</code> is called on the end of the list it takes \\(O(1)\\), but when <code>pop</code> is called on the first element in the list---or anywhere in the middle it---is \\(O(n)\\) The reason for this lies in how Python chooses to implement lists. When an item is taken from the front of the list, all the other elements in the list are shifted one position closer to the beginning. This may seem silly to you now, but if you look at <code>Table 2</code> you will see that this implementation also allows the index operation to be \\(O(1)\\). This is a tradeoff that the Python designers thought was a good one.</p> <p>Table 2: Big O Efficiency of Python List Operators</p> Operation Big O Efficiency <code>index []</code> O(1) <code>index assignment</code> O(1) <code>append</code> O(1) <code>pop()</code> O(1) <code>pop(i)</code> O(n) <code>insert(i, item)</code> O(n) <code>del operator</code> O(n) <code>iteration</code> O(n) <code>contains (in)</code> O(n) <code>get slice [x:y]</code> O(k) <code>del slice</code> O(n) <code>set slice</code> O(n+k) <code>reverse</code> O(n) <code>concatenate</code> O(k) <code>sort</code> O(n log n) <code>multiply</code> O(nk) <p>As a way of demonstrating this difference in performance, let\u2019s do another experiment using the <code>timeit</code> module. Our goal is to be able to verify the performance of the <code>pop</code> operation on a list of a known size when the program pops from the end of the list, and again when the program pops from the beginning of the list. We will also want to measure this time for lists of different sizes. What we would expect to see is that the time required to pop from the end of the list will stay constant even as the list grows in size, while the time to pop from the beginning of the list will continue to increase as the list grows.</p> <p><code>Listing 4</code> shows one attempt to measure the difference between the two uses of <code>pop</code>. As you can see from this first example, popping from the end takes 0.00014 milliseconds, whereas popping from the beginning takes 2.09779 milliseconds. For a list of two million elements this is a factor of 15,000.</p> <p>There are a couple of things to notice about <code>Listing 4</code>. The first is the statement <code>from __main__ import x</code>. Although we did not define a function, we do want to be able to use the list object x in our test. This approach allows us to time just the single <code>pop</code> statement and get the most accurate measure of the time for that single operation. Because the timer repeats a thousand times, it is also important to point out that the list is decreasing in size by one each time through the loop. But since the initial list is two million elements in size, we only reduce the overall size by \\(0.05\\%\\).</p> Listing 4<pre><code>pop_zero = Timer(\"x.pop(0)\", \"from __main__ import x\")\npop_end = Timer(\"x.pop()\", \"from __main__ import x\")\n\nx = list(range(2000000))\nprint(f\"pop(0): {pop_zero.timeit(number=1000):10.5f} milliseconds\")\n\nx = list(range(2000000))\nprint(f\"pop(): {pop_end.timeit(number=1000):11.5f} milliseconds\")\n\npop(0):    2.09779 milliseconds\npop():     0.00014 milliseconds\n</code></pre> <p>While our first test does show that <code>pop(0)</code> is indeed slower than <code>pop()</code>, it does not validate the claim that <code>pop(0)</code> is \\(O(n)\\) while <code>pop()</code> is \\(O(1)\\). To validate that claim we need to look at the performance of both calls over a range of list sizes. <code>Listing 5</code> implements this test.</p> Listing 5<pre><code>pop_zero = Timer(\"x.pop(0)\", \"from __main__ import x\")\npop_end = Timer(\"x.pop()\", \"from __main__ import x\")\nprint(f\"{'n':10s}{'pop(0)':&gt;15s}{'pop()':&gt;15s}\")\nfor i in range(1_000_000, 100_000_001, 1_000_000):\n    x = list(range(i))\n    pop_zero_t = pop_zero.timeit(number=1000)\n    x = list(range(i))\n    pop_end_t = pop_end.timeit(number=1000)\n    print(f\"{i:&lt;10d}{pop_zero_t:&gt;15.5f}{pop_end_t:&gt;15.5f}\")\n</code></pre> <p><code>Figure 3</code> shows the results of our experiment. You can see that as the list gets longer and longer the time it takes to <code>pop(0)</code> also increases while the time for <code>pop</code> stays very flat. This is exactly what we would expect to see for an \\(O(n)\\) and \\(O(1)\\) algorithm.</p> <p> Figure 3: Comparing the Performance of <code>pop</code> and <code>pop(0)</code> </p> <p>Among the sources of error in our little experiment is the fact that there are other processes running on the computer as we measure that may slow down our code, so even though we try to minimize other things happening on the computer there is bound to be some variation in time. That is why the loop runs the test one thousand times in the first place to statistically gather enough information to make the measurement reliable.</p> <p>The designers of Python had many choices to make when they implemented the list data structure. Each of these choices could have an impact on how fast list operations perform. To help them make the right choices they looked at the ways that people would most commonly use the list data structure, and they optimized their implementation of a list so that the most common operations were very fast. Of course they also tried to make the less common operations fast, but when a trade-off had to be made the performance of a less common operation was often sacrificed in favor of the more common operation.</p> <p>Two common operations are indexing and assigning to an index position. Both of these operations take the same amount of time no matter how large the list becomes. When an operation like this is independent of the size of the list, it is \\(O(1)\\).</p> <p>Another very common programming task is to grow a list. There are two ways to create a longer list. You can use the append method or the concatenation operator. The <code>append</code> method is \\(O(1)\\). However, the concatenation operator is \\(O(k)\\) where \\(k\\) is the size of the list that is being concatenated. This is important for you to know because it can help you make your own programs more efficient by choosing the right tool for the job.</p> <p>Let's look at four different ways we might generate a list of <code>n</code> numbers starting with 0. First we\u2019ll try a <code>for</code> loop and create the list by concatenation, then we\u2019ll use <code>append</code> rather than concatenation. Next, we\u2019ll try creating the list using list comprehension and finally, and perhaps the most obvious way, using the range function wrapped by a call to the list constructor. <code>Listing 3</code> shows the code for making our list four different ways.</p> Listing 3<pre><code>def test1():\n    l = []\n    for i in range(1000):\n        l = l + [i]\n\n\ndef test2():\n    l = []\n    for i in range(1000):\n        l.append(i)\n\n\ndef test3():\n    l = [i for i in range(1000)]\n\n\ndef test4():\n    l = list(range(1000))\n</code></pre> <p>To capture the time it takes for each of our functions to execute we will use Python\u2019s <code>timeit</code> module. The <code>timeit</code> module is designed to allow Python developers to make cross-platform timing measurements by running functions in a consistent environment and using timing mechanisms that are as similar as possible across operating systems.</p> <p>To use <code>timeit</code> you create a <code>Timer</code> object whose parameters are two Python statements. The first parameter is a Python statement that you want to time; the second parameter is a statement that will run once to set up the test. The <code>timeit</code> module will then time how long it takes to execute the statement some number of times. By default <code>timeit</code> will try to run the statement one million times. When it's done it returns the time as a floating-point value representing the total number of seconds. However, since it executes the statement a million times, you can read the result as the number of microseconds to execute the test one time. You can also pass <code>timeit</code> a named parameter called <code>number</code> that allows you to specify how many times the test statement is executed. The following session shows how long it takes to run each of our test functions a thousand times.</p> <pre><code>from timeit import Timer\n\n\nt1 = Timer(\"test1()\", \"from __main__ import test1\")\nprint(f\"concatenation: {t1.timeit(number=1000):15.2f} milliseconds\")\nt2 = Timer(\"test2()\", \"from __main__ import test2\")\nprint(f\"appending: {t2.timeit(number=1000):19.2f} milliseconds\")\nt3 = Timer(\"test3()\", \"from __main__ import test3\")\nprint(f\"list comprehension: {t3.timeit(number=1000):10.2f} milliseconds\")\nt4 = Timer(\"test4()\", \"from __main__ import test4\")\nprint(f\"list range: {t4.timeit(number=1000):18.2f} milliseconds\")\n\nconcatenation:           6.54 milliseconds\nappending:               0.31 milliseconds\nlist comprehension:      0.15 milliseconds\nlist range:              0.07 milliseconds\n</code></pre> <p>In the experiment above the statement that we are timing is the function call to <code>test1()</code>, <code>test2()</code>, and so on. The setup statement may look very strange to you, so let\u2019s consider it in more detail. You are probably very familiar with the <code>from...import</code> statement, but this is usually used at the beginning of a Python program file. In this case the statement <code>from __main__ import test1</code> imports the function <code>test1</code> from the <code>__main__</code> namespace into the namespace that <code>timeit</code> sets up for the timing experiment. The <code>timeit</code> module does this because it wants to run the timing tests in an environment that is uncluttered by any stray variables you may have created that may interfere with your function\u2019s performance in some unforeseen way.</p> <p>From the experiment above it is clear that the <code>append</code> operation at 0.31 milliseconds is much faster than concatenation at 6.54 milliseconds. We also show the times for two additional methods for creating a list: using the list constructor with a call to <code>range</code> and a list comprehension. It is interesting to note that the list comprehension is twice as fast as a <code>for</code> loop with an <code>append</code> operation.</p> <p>One final observation about this little experiment is that all of the times that you see above include some overhead for actually calling the test function, but we can assume that the function call overhead is identical in all four cases so we still get a meaningful comparison of the operations. So it would not be accurate to say that the concatenation operation takes 6.54 milliseconds but rather the concatenation test function takes 6.54 milliseconds. As an exercise you could test the time it takes to call an empty function and subtract that from the numbers above.</p> <p>Now that we have seen how performance can be measured concretely, you can look at <code>Table 2</code> to see the Big O efficiency of all the basic list operations. After thinking carefully about <code>Table 2</code>, you may be wondering about the two different times for <code>pop</code>. When <code>pop</code> is called on the end of the list it takes \\(O(1)\\), but when <code>pop</code> is called on the first element in the list---or anywhere in the middle it---is \\(O(n)\\) The reason for this lies in how Python chooses to implement lists. When an item is taken from the front of the list, all the other elements in the list are shifted one position closer to the beginning. This may seem silly to you now, but if you look at <code>Table 2</code> you will see that this implementation also allows the index operation to be \\(O(1)\\). This is a tradeoff that the Python designers thought was a good one.</p> <p>Table 2: Big O Efficiency of Python List Operators</p> Operation Big O Efficiency <code>index []</code> O(1) <code>index assignment</code> O(1) <code>append</code> O(1) <code>pop()</code> O(1) <code>pop(i)</code> O(n) <code>insert(i, item)</code> O(n) <code>del operator</code> O(n) <code>iteration</code> O(n) <code>contains (in)</code> O(n) <code>get slice [x:y]</code> O(k) <code>del slice</code> O(n) <code>set slice</code> O(n+k) <code>reverse</code> O(n) <code>concatenate</code> O(k) <code>sort</code> O(n log n) <code>multiply</code> O(nk) <p>As a way of demonstrating this difference in performance, let\u2019s do another experiment using the <code>timeit</code> module. Our goal is to be able to verify the performance of the <code>pop</code> operation on a list of a known size when the program pops from the end of the list, and again when the program pops from the beginning of the list. We will also want to measure this time for lists of different sizes. What we would expect to see is that the time required to pop from the end of the list will stay constant even as the list grows in size, while the time to pop from the beginning of the list will continue to increase as the list grows.</p> <p><code>Listing 4</code> shows one attempt to measure the difference between the two uses of <code>pop</code>. As you can see from this first example, popping from the end takes 0.00014 milliseconds, whereas popping from the beginning takes 2.09779 milliseconds. For a list of two million elements this is a factor of 15,000.</p> <p>There are a couple of things to notice about <code>Listing 4</code>. The first is the statement <code>from __main__ import x</code>. Although we did not define a function, we do want to be able to use the list object x in our test. This approach allows us to time just the single <code>pop</code> statement and get the most accurate measure of the time for that single operation. Because the timer repeats a thousand times, it is also important to point out that the list is decreasing in size by one each time through the loop. But since the initial list is two million elements in size, we only reduce the overall size by \\(0.05\\%\\).</p> Listing 4<pre><code>pop_zero = Timer(\"x.pop(0)\", \"from __main__ import x\")\npop_end = Timer(\"x.pop()\", \"from __main__ import x\")\n\nx = list(range(2000000))\nprint(f\"pop(0): {pop_zero.timeit(number=1000):10.5f} milliseconds\")\n\nx = list(range(2000000))\nprint(f\"pop(): {pop_end.timeit(number=1000):11.5f} milliseconds\")\n\npop(0):    2.09779 milliseconds\npop():     0.00014 milliseconds\n</code></pre> <p>While our first test does show that <code>pop(0)</code> is indeed slower than <code>pop()</code>, it does not validate the claim that <code>pop(0)</code> is \\(O(n)\\) while <code>pop()</code> is \\(O(1)\\). To validate that claim we need to look at the performance of both calls over a range of list sizes. <code>Listing 5</code> implements this test.</p> Listing 5<pre><code>pop_zero = Timer(\"x.pop(0)\", \"from __main__ import x\")\npop_end = Timer(\"x.pop()\", \"from __main__ import x\")\nprint(f\"{'n':10s}{'pop(0)':&gt;15s}{'pop()':&gt;15s}\")\nfor i in range(1_000_000, 100_000_001, 1_000_000):\n    x = list(range(i))\n    pop_zero_t = pop_zero.timeit(number=1000)\n    x = list(range(i))\n    pop_end_t = pop_end.timeit(number=1000)\n    print(f\"{i:&lt;10d}{pop_zero_t:&gt;15.5f}{pop_end_t:&gt;15.5f}\")\n</code></pre> <p><code>Figure 3</code> shows the results of our experiment. You can see that as the list gets longer and longer the time it takes to <code>pop(0)</code> also increases while the time for <code>pop</code> stays very flat. This is exactly what we would expect to see for an \\(O(n)\\) and \\(O(1)\\) algorithm.</p> <p> Figure 3: Comparing the Performance of <code>pop</code> and <code>pop(0)</code> </p> <p>Among the sources of error in our little experiment is the fact that there are other processes running on the computer as we measure that may slow down our code, so even though we try to minimize other things happening on the computer there is bound to be some variation in time. That is why the loop runs the test one thousand times in the first place to statistically gather enough information to make the measurement reliable.</p>"},{"location":"c2/s7/","title":"2.7. \u5b57\u5178","text":"<p>2.7. Dictionaries</p> \u4e2d\u6587\u82f1\u6587 <p>The second major Python data structure is the dictionary. As you probably recall, dictionaries differ from lists in that you can access items in a dictionary by a key rather than a position. Later in this book you will see that there are many ways to implement a dictionary. The thing that is most important to notice right now is that the <code>get item</code> and <code>set item</code> operations on a dictionary are \\(O(1)\\). Another important dictionary operation is the <code>contains</code> operation. Checking to see whether a key is in the dictionary or not is also \\(O(1)\\). The efficiency of all dictionary operations is summarized in <code>Table 3</code>. One important side note on dictionary performance is that the efficiencies we provide in the table are for average performance. In some rare cases the <code>contains</code>, <code>get item</code>, and <code>set item</code> operations can degenerate into \\(O(n)\\) performance, but we will get into that in Chapter 8 when we talk about the different ways that a dictionary could be implemented.</p> <p>Table 3: Big O Efficiency of Python Dictionary Operations</p> Operation Big O Efficiency <code>copy</code> O(n) <code>get item</code> O(1) <code>set item</code> O(1) <code>delete item</code> O(1) <code>contains (in)</code> O(1) <code>iteration</code> O(n) <p>For our last performance experiment we will compare the performance of the contains operation between lists and dictionaries. In the process we will confirm that the contains operator for lists is \\(O(n)\\) and the contains operator for dictionaries is \\(O(1)\\). The experiment we will use to compare the two is simple: we\u2019ll make a list with a range of numbers in it, then we will pick numbers at random and check to see if the numbers are in the list. If our performance tables are correct, the bigger the list, the longer it should take to determine if any one number is contained in the list.</p> <p>We will repeat the same experiment for a dictionary that contains numbers as the keys. In this experiment we should see that determining whether or not a number is in the dictionary is not only much faster, but the time it takes to check should remain constant even as the dictionary grows larger.</p> <p><code>Listing 6</code> implements this comparison. Notice that we are performing exactly the same operation, <code>number in container</code>. The difference is that on line 8 <code>x</code> is a list, and on line 10 <code>x</code> is a dictionary.</p> Listing 6<pre><code>import timeit\nimport random\n\nprint(f\"{'n':10s}{'list':&gt;10s}{'dict':&gt;10s}\")\nfor i in range(10_000, 1_000_001, 20_000):\n    t = timeit.Timer(f\"random.randrange({i}) in x\", \n    \"from __main__ import random, x\")\n    x = list(range(i))\n    lst_time = t.timeit(number=1000)\n    x = {j: None for j in range(i)}\n    dict_time = t.timeit(number=1000)\n    print(f\"{i:&lt;10,}{lst_time:&gt;10.3f}{dict_time:&gt;10.3f}\")\n</code></pre> <p><code>Figure 4</code> summarizes the results of running <code>Listing 6</code>. You can see that the dictionary is consistently faster. For the smallest list size of 10,000 elements a dictionary is 89.4 times faster than a list. For the largest list size of 990,000 elements the dictionary is 11,603 times faster! You can also see that the time it takes for the <code>contains</code> operator on the list grows linearly with the size of the list. This verifies the assertion that the <code>contains</code> operator on a list is :math:<code>O(n)</code>. It can also be seen that the time for the <code>contains</code> operator on a dictionary is constant even as the dictionary size grows. In fact, for a dictionary size of 10,000 the <code>contains</code> operation took 0.004 milliseconds, and for the dictionary size of 990,000 it also took 0.004 milliseconds.</p> <p> Figure 4: Comparing the <code>in</code> Operator for Python Lists and Dictionaries </p> <p>Since Python is an evolving language, there are always changes going on behind the scenes. The latest information on the performance of Python data structures can be found on the Python website. As of this writing the Python wiki has a nice time complexity page that can be found at the Time Complexity Wiki.</p> <p>Self Check</p> Activity: 2.7.1 Multiple ChoiceActivity: 2.7.2 Multiple Choice <p>Which of the list operations shown below is not O(1)?</p> <ul> <li> a: a_list.pop(0)</li> <li> b: a_list.pop()</li> <li> c: a_list.append()</li> <li> d: a_list[10]</li> <li> e: all of the above are O(1)</li> </ul> <p>correct: a</p> <ul> <li> feedback a: When you remove the first element of a list, all the other elements of the list must be shifted forward.</li> <li> feedback b: Removing an element from the end of the list is a constant operation.</li> <li> feedback c: Appending to the end of the list is a constant operation</li> <li> feedback d: Indexing a list is a constant operation</li> <li> feedback e: There is one operation that requires all other list elements to be moved.</li> </ul> <p>Which of the dictionary operations shown below is O(1)?</p> <ul> <li> a: \"x\" in a_dict</li> <li> b: del a_dict[\"x\"]</li> <li> c: a_dict[\"x\"] == 10</li> <li> d: a_dict[\"x\"] = a_dict[\"x\"] + 1</li> <li> e: all of the above are O(1)</li> </ul> <p>correct: e</p> <ul> <li> feedback a: in is a constant operation for a dictionary because you do not have to iterate but there is a better answer.</li> <li> feedback b: deleting an element from a dictionary is a constant operation but there is a better answer.</li> <li> feedback c: Assignment to a dictionary key is constant but there is a better answer.</li> <li> feedback d: Re-assignment to a dictionary key is constant but there is a better answer.</li> <li> feedback e: The only dictionary operations that are not O(1) are those that require iteration.</li> </ul> <p></p> <p>The second major Python data structure is the dictionary. As you probably recall, dictionaries differ from lists in that you can access items in a dictionary by a key rather than a position. Later in this book you will see that there are many ways to implement a dictionary. The thing that is most important to notice right now is that the <code>get item</code> and <code>set item</code> operations on a dictionary are \\(O(1)\\). Another important dictionary operation is the <code>contains</code> operation. Checking to see whether a key is in the dictionary or not is also \\(O(1)\\). The efficiency of all dictionary operations is summarized in <code>Table 3</code>. One important side note on dictionary performance is that the efficiencies we provide in the table are for average performance. In some rare cases the <code>contains</code>, <code>get item</code>, and <code>set item</code> operations can degenerate into \\(O(n)\\) performance, but we will get into that in Chapter 8 when we talk about the different ways that a dictionary could be implemented.</p> <p>Table 3: Big O Efficiency of Python Dictionary Operations</p> Operation Big O Efficiency <code>copy</code> O(n) <code>get item</code> O(1) <code>set item</code> O(1) <code>delete item</code> O(1) <code>contains (in)</code> O(1) <code>iteration</code> O(n) <p>For our last performance experiment we will compare the performance of the contains operation between lists and dictionaries. In the process we will confirm that the contains operator for lists is \\(O(n)\\) and the contains operator for dictionaries is \\(O(1)\\). The experiment we will use to compare the two is simple: we\u2019ll make a list with a range of numbers in it, then we will pick numbers at random and check to see if the numbers are in the list. If our performance tables are correct, the bigger the list, the longer it should take to determine if any one number is contained in the list.</p> <p>We will repeat the same experiment for a dictionary that contains numbers as the keys. In this experiment we should see that determining whether or not a number is in the dictionary is not only much faster, but the time it takes to check should remain constant even as the dictionary grows larger.</p> <p><code>Listing 6</code> implements this comparison. Notice that we are performing exactly the same operation, <code>number in container</code>. The difference is that on line 8 <code>x</code> is a list, and on line 10 <code>x</code> is a dictionary.</p> Listing 6<pre><code>import timeit\nimport random\n\nprint(f\"{'n':10s}{'list':&gt;10s}{'dict':&gt;10s}\")\nfor i in range(10_000, 1_000_001, 20_000):\n    t = timeit.Timer(f\"random.randrange({i}) in x\", \n    \"from __main__ import random, x\")\n    x = list(range(i))\n    lst_time = t.timeit(number=1000)\n    x = {j: None for j in range(i)}\n    dict_time = t.timeit(number=1000)\n    print(f\"{i:&lt;10,}{lst_time:&gt;10.3f}{dict_time:&gt;10.3f}\")\n</code></pre> <p><code>Figure 4</code> summarizes the results of running <code>Listing 6</code>. You can see that the dictionary is consistently faster. For the smallest list size of 10,000 elements a dictionary is 89.4 times faster than a list. For the largest list size of 990,000 elements the dictionary is 11,603 times faster! You can also see that the time it takes for the <code>contains</code> operator on the list grows linearly with the size of the list. This verifies the assertion that the <code>contains</code> operator on a list is :math:<code>O(n)</code>. It can also be seen that the time for the <code>contains</code> operator on a dictionary is constant even as the dictionary size grows. In fact, for a dictionary size of 10,000 the <code>contains</code> operation took 0.004 milliseconds, and for the dictionary size of 990,000 it also took 0.004 milliseconds.</p> <p> Figure 4: Comparing the <code>in</code> Operator for Python Lists and Dictionaries </p> <p>Since Python is an evolving language, there are always changes going on behind the scenes. The latest information on the performance of Python data structures can be found on the Python website. As of this writing the Python wiki has a nice time complexity page that can be found at the Time Complexity Wiki.</p> <p>Self Check</p> Activity: 2.7.1 Multiple ChoiceActivity: 2.7.2 Multiple Choice <p>Which of the list operations shown below is not O(1)?</p> <ul> <li> a: a_list.pop(0)</li> <li> b: a_list.pop()</li> <li> c: a_list.append()</li> <li> d: a_list[10]</li> <li> e: all of the above are O(1)</li> </ul> <p>correct: a</p> <ul> <li> feedback a: When you remove the first element of a list, all the other elements of the list must be shifted forward.</li> <li> feedback b: Removing an element from the end of the list is a constant operation.</li> <li> feedback c: Appending to the end of the list is a constant operation</li> <li> feedback d: Indexing a list is a constant operation</li> <li> feedback e: There is one operation that requires all other list elements to be moved.</li> </ul> <p>Which of the dictionary operations shown below is O(1)?</p> <ul> <li> a: \"x\" in a_dict</li> <li> b: del a_dict[\"x\"]</li> <li> c: a_dict[\"x\"] == 10</li> <li> d: a_dict[\"x\"] = a_dict[\"x\"] + 1</li> <li> e: all of the above are O(1)</li> </ul> <p>correct: e</p> <ul> <li> feedback a: in is a constant operation for a dictionary because you do not have to iterate but there is a better answer.</li> <li> feedback b: deleting an element from a dictionary is a constant operation but there is a better answer.</li> <li> feedback c: Assignment to a dictionary key is constant but there is a better answer.</li> <li> feedback d: Re-assignment to a dictionary key is constant but there is a better answer.</li> <li> feedback e: The only dictionary operations that are not O(1) are those that require iteration.</li> </ul> <p></p>"},{"location":"c2/s8/","title":"2.8. \u603b\u7ed3","text":"<p>2.8. Summary</p> \u4e2d\u6587\u82f1\u6587 <ul> <li>Algorithm analysis is an implementation-independent way of measuring an algorithm.</li> <li>Big O notation allows algorithms to be classified by their dominant process with respect to the size of the problem.</li> </ul> <ul> <li>Algorithm analysis is an implementation-independent way of measuring an algorithm.</li> <li>Big O notation allows algorithms to be classified by their dominant process with respect to the size of the problem.</li> </ul>"},{"location":"c2/s9/","title":"2.9. \u5173\u952e\u672f\u8bed","text":"<p>2.9. Key Terms</p> \u4e2d\u6587\u82f1\u6587 - - - average case constant logarithmic benchmark analysis cubic order of magnitude Big O notation exponential quadratic brute force linear time complexity checking off log linear worst case - - - average case constant logarithmic benchmark analysis cubic order of magnitude Big O notation exponential quadratic brute force linear time complexity checking off log linear worst case"},{"location":"c3/","title":"3. \u57fa\u672c\u6570\u636e\u7ed3\u6784","text":"<p>3. Basic Data Structures</p> \u4e2d\u6587\u82f1\u6587 <ul> <li>3.1. \u76ee\u6807 </li> <li>3.2. \u4ec0\u4e48\u662f\u7ebf\u6027\u7ed3\u6784\uff1f </li> <li>3.3. \u6808 </li> <li>3.4. \u6808\u7684\u62bd\u8c61\u6570\u636e\u7c7b\u578b </li> <li>3.5. \u7528Python\u5b9e\u73b0\u6808 </li> <li>3.6. \u7b80\u5355\u7684\u62ec\u53f7\u5339\u914d </li> <li>3.7. \u7b26\u53f7\u5339\u914d\uff08\u4e00\u822c\u60c5\u51b5\uff09 </li> <li>3.8. \u5c06\u5341\u8fdb\u5236\u6570\u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\u6570 </li> <li>3.9. \u4e2d\u7f00\u3001\u524d\u7f00\u548c\u540e\u7f00\u8868\u8fbe\u5f0f <ul> <li>3.9.1. \u4e2d\u7f00\u8868\u8fbe\u5f0f\u8f6c\u6362\u4e3a\u524d\u7f00\u548c\u540e\u7f00 </li> <li>3.9.2. \u4e00\u822c\u7684\u4e2d\u7f00\u8f6c\u540e\u7f00\u8f6c\u6362 </li> <li>3.9.3. \u540e\u7f00\u8868\u8fbe\u5f0f\u6c42\u503c </li> </ul> </li> <li>3.10. \u961f\u5217 </li> <li>3.11. \u961f\u5217\u7684\u62bd\u8c61\u6570\u636e\u7c7b\u578b </li> <li>3.12. \u7528Python\u5b9e\u73b0\u961f\u5217 </li> <li>3.13. \u961f\u5217\u6a21\u62df\uff1a\u70eb\u624b\u5c71\u828b\u6e38\u620f </li> <li>3.14. \u961f\u5217\u6a21\u62df\uff1a\u6253\u5370\u4efb\u52a1 <ul> <li>3.14.1. \u4e3b\u8981\u6a21\u62df\u6b65\u9aa4 </li> <li>3.14.2. Python\u5b9e\u73b0 </li> <li>3.14.3. \u8ba8\u8bba </li> </ul> </li> <li>3.15. \u53cc\u7aef\u961f\u5217 </li> <li>3.16. \u53cc\u7aef\u961f\u5217\u7684\u62bd\u8c61\u6570\u636e\u7c7b\u578b </li> <li>3.17. \u7528Python\u5b9e\u73b0\u53cc\u7aef\u961f\u5217 </li> <li>3.18. \u56de\u6587\u68c0\u6d4b\u5668 </li> <li>3.19. \u5217\u8868 </li> <li>3.20. \u65e0\u5e8f\u5217\u8868\u7684\u62bd\u8c61\u6570\u636e\u7c7b\u578b </li> <li>3.21. \u7528\u94fe\u8868\u5b9e\u73b0\u65e0\u5e8f\u5217\u8868 <ul> <li>3.21.1. \u8282\u70b9\u7c7b </li> <li>3.21.2. \u65e0\u5e8f\u5217\u8868\u7c7b </li> </ul> </li> <li>3.22. \u6709\u5e8f\u5217\u8868\u7684\u62bd\u8c61\u6570\u636e\u7c7b\u578b </li> <li>3.23. \u5b9e\u73b0\u6709\u5e8f\u5217\u8868 <ul> <li>3.23.1. \u94fe\u8868\u5206\u6790 </li> </ul> </li> <li>3.24. \u603b\u7ed3 </li> <li>3.25. \u5173\u952e\u672f\u8bed </li> <li>3.26. \u7ec3\u4e60</li> </ul> <ul> <li>3.1. Objectives</li> <li>3.2. What Are Linear Structures?</li> <li>3.3. Stacks</li> <li>3.4. The Stack Abstract Data Type</li> <li>3.5. Implementing a Stack in Python</li> <li>3.6. Simple Balanced Parentheses</li> <li>3.7. Balanced Symbols (A General Case)</li> <li>3.8. Converting Decimal Numbers to Binary Numbers</li> <li>3.9. Infix, Prefix, and Postfix Expressions<ul> <li>3.9.1. Conversion of Infix Expressions to Prefix and Postfix</li> <li>3.9.2. General Infix-to-Postfix Conversion</li> <li>3.9.3. Postfix Evaluation</li> </ul> </li> <li>3.10. Queues</li> <li>3.11. The Queue Abstract Data Type</li> <li>3.12. Implementing a Queue in Python</li> <li>3.13. Queue Simulation: Hot Potato</li> <li>3.14. Queue Simulation: Printing Tasks<ul> <li>3.14.1. Main Simulation Steps</li> <li>3.14.2. Python Implementation</li> <li>3.14.3. Discussion</li> </ul> </li> <li>3.15. Deques</li> <li>3.16. The Deque Abstract Data Type</li> <li>3.17. Implementing a Deque in Python</li> <li>3.18. Palindrome Checker</li> <li>3.19. Lists</li> <li>3.20. The Unordered List Abstract Data Type</li> <li>3.21. Implementing an Unordered List: Linked Lists<ul> <li>3.21.1. The Node Class</li> <li>3.21.2. The UnorderedList Class</li> </ul> </li> <li>3.22. The Ordered List Abstract Data Type</li> <li>3.23. Implementing an Ordered List<ul> <li>3.23.1. Analysis of Linked Lists</li> </ul> </li> <li>3.24. Summary</li> <li>3.25. Key Terms</li> <li>3.26. Exercises</li> </ul>"},{"location":"c3/s1/","title":"3.1. \u76ee\u6807","text":"<p>3.1. Objectives</p> \u4e2d\u6587\u82f1\u6587 <ul> <li>To understand the abstract data types stack, queue, deque, and list.</li> <li>To be able to implement the ADTs stack, queue, and deque using Python lists.</li> <li>To understand the performance of the implementations of basic linear data structures.</li> <li>To understand prefix, infix, and postfix expression formats.</li> <li>To use stacks to evaluate postfix expressions.</li> <li>To use stacks to convert expressions from infix to postfix.</li> <li>To use queues for basic timing simulations.</li> <li>To be able to recognize problem properties where stacks, queues, and deques are appropriate data structures.</li> <li>To be able to implement the abstract data type list as a linked list using the node and reference pattern.</li> <li>To be able to compare the performance of our linked list implementation with Python\u2019s list implementation.</li> </ul> <ul> <li>To understand the abstract data types stack, queue, deque, and list.</li> <li>To be able to implement the ADTs stack, queue, and deque using Python lists.</li> <li>To understand the performance of the implementations of basic linear data structures.</li> <li>To understand prefix, infix, and postfix expression formats.</li> <li>To use stacks to evaluate postfix expressions.</li> <li>To use stacks to convert expressions from infix to postfix.</li> <li>To use queues for basic timing simulations.</li> <li>To be able to recognize problem properties where stacks, queues, and deques are appropriate data structures.</li> <li>To be able to implement the abstract data type list as a linked list using the node and reference pattern.</li> <li>To be able to compare the performance of our linked list implementation with Python\u2019s list implementation.</li> </ul>"},{"location":"c3/s10/","title":"3.10. \u961f\u5217","text":"<p>3.10. Queues</p> <p>\u539f\u6587: https://runestone.academy/ns/books/published/pythonds3/BasicDS/WhatIsaQueue.html?mode=browsing</p> \u4e2d\u6587\u82f1\u6587 <p>A queue is an ordered collection of items where the addition of new items happens at one end, called the rear, and the removal of existing items occurs at the other end, commonly called the front. As an element enters the queue it starts at the rear and makes its way toward the front, waiting until that time when it is the next element to be removed.</p> <p>The most recently added item in the queue must wait at the end of the collection. The item that has been in the collection the longest is at the front. This ordering principle is sometimes called FIFO, first in, first out. It is also known as first come, first served.</p> <p>The simplest example of a queue is the typical line that we all participate in from time to time. We wait in a line for a movie, we wait in the checkout line at a grocery store, and we wait in the cafeteria line (so that we can pop the tray stack). Well-behaved lines, or queues, are very restrictive in that they have only one way in and only one way out. There is no jumping in the middle and no leaving before you have waited the necessary amount of time to get to the front.</p> <p>Computer science also has common examples of queues. <code>Figure 1</code>  shows a simple queue of Python data objects. Our computer laboratory has 30 computers networked with a single printer. When students want to print, their print tasks \u201cget in line\u201d with all the other printing tasks that are waiting. The first task in is the next to be completed. If you are last in line, you must wait for all the other tasks to print ahead of you. We will explore this interesting example in more detail later.</p> <p> Figure 1: A Queue of Python Data Objects </p> <p>In addition to printing queues, operating systems use a number of different queues to control processes within a computer. The scheduling of what gets done next is typically based on a queuing algorithm that tries to execute programs as quickly as possible and serve as many users as it can. Also, as we type, sometimes keystrokes get ahead of the characters that appear on the screen. This is due to the computer doing other work at that moment. The keystrokes are being placed in a queue-like buffer so that they can eventually be displayed on the screen in the proper order.</p> <p>A queue is an ordered collection of items where the addition of new items happens at one end, called the rear, and the removal of existing items occurs at the other end, commonly called the front. As an element enters the queue it starts at the rear and makes its way toward the front, waiting until that time when it is the next element to be removed.</p> <p>The most recently added item in the queue must wait at the end of the collection. The item that has been in the collection the longest is at the front. This ordering principle is sometimes called FIFO, first in, first out. It is also known as first come, first served.</p> <p>The simplest example of a queue is the typical line that we all participate in from time to time. We wait in a line for a movie, we wait in the checkout line at a grocery store, and we wait in the cafeteria line (so that we can pop the tray stack). Well-behaved lines, or queues, are very restrictive in that they have only one way in and only one way out. There is no jumping in the middle and no leaving before you have waited the necessary amount of time to get to the front.</p> <p>Computer science also has common examples of queues. <code>Figure 1</code>  shows a simple queue of Python data objects. Our computer laboratory has 30 computers networked with a single printer. When students want to print, their print tasks \u201cget in line\u201d with all the other printing tasks that are waiting. The first task in is the next to be completed. If you are last in line, you must wait for all the other tasks to print ahead of you. We will explore this interesting example in more detail later.</p> <p> Figure 1: A Queue of Python Data Objects </p> <p>In addition to printing queues, operating systems use a number of different queues to control processes within a computer. The scheduling of what gets done next is typically based on a queuing algorithm that tries to execute programs as quickly as possible and serve as many users as it can. Also, as we type, sometimes keystrokes get ahead of the characters that appear on the screen. This is due to the computer doing other work at that moment. The keystrokes are being placed in a queue-like buffer so that they can eventually be displayed on the screen in the proper order.</p>"},{"location":"c3/s11/","title":"3.11. \u961f\u5217\u7684\u62bd\u8c61\u6570\u636e\u7c7b\u578b","text":"<p>3.11. The Queue Abstract Data Type</p> <p>\u539f\u6587: https://runestone.academy/ns/books/published/pythonds3/BasicDS/TheQueueAbstractDataType.html?mode=browsing</p> \u4e2d\u6587\u82f1\u6587 <p>The queue abstract data type is defined by the following structure and operations. A queue is structured, as described above, as an ordered collection of items which are added at one end, called the rear, and removed from the other end, called the front. Queues maintain a FIFO ordering property. The queue operations are given below.</p> <ul> <li> <p><code>Queue()</code> creates a new queue that is empty. It needs no parameters and returns an empty queue.</p> </li> <li> <p><code>enqueue(item)</code> adds a new item to the rear of the queue. It needs the item and returns nothing.</p> </li> <li> <p><code>dequeue()</code> removes the front item from the queue. It needs no parameters and returns the item. The queue is modified.</p> </li> <li> <p><code>is_empty()</code> tests to see whether the queue is empty. It needs no parameters and returns a boolean value.</p> </li> <li> <p><code>size()</code> returns the number of items in the queue. It needs no parameters and returns an integer.</p> </li> </ul> <p>As an example, if we assume that <code>q</code> is a queue that has been created and is currently empty, then <code>Table 5</code> shows the results of a sequence of queue operations. The queue contents are shown such that the front is on the right. The first item enqueued was <code>4</code> so it is the first item returned by <code>dequeue</code>.</p> <p>Table 5: Example Queue Operations</p> Queue Operation Queue Contents Return Value <code>q.is_empty()</code> <code>[]</code> <code>True</code> <code>q.enqueue(4)</code> <code>[4]</code> <code>q.enqueue(\"dog\")</code> <code>['dog',4]</code> <code>q.enqueue(True)</code> <code>[True, 'dog', 4]</code> <code>q.size()</code> <code>[True, 'dog', 4]</code> <code>3</code> <code>q.is_empty()</code> <code>[True, 'dog', 4]</code> <code>False</code> <code>q.enqueue(8.4)</code> <code>[8.4,True, 'dog', 4]</code> <code>q.dequeue()</code> <code>[8.4, True, 'dog']</code> <code>4</code> <code>q.dequeue()</code> <code>[8.4, True]</code> <code>'dog'</code> <code>q.size()</code> <code>[8.4, True]</code> <code>2</code> <p>The queue abstract data type is defined by the following structure and operations. A queue is structured, as described above, as an ordered collection of items which are added at one end, called the rear, and removed from the other end, called the front. Queues maintain a FIFO ordering property. The queue operations are given below.</p> <ul> <li> <p><code>Queue()</code> creates a new queue that is empty. It needs no parameters and returns an empty queue.</p> </li> <li> <p><code>enqueue(item)</code> adds a new item to the rear of the queue. It needs the item and returns nothing.</p> </li> <li> <p><code>dequeue()</code> removes the front item from the queue. It needs no parameters and returns the item. The queue is modified.</p> </li> <li> <p><code>is_empty()</code> tests to see whether the queue is empty. It needs no parameters and returns a boolean value.</p> </li> <li> <p><code>size()</code> returns the number of items in the queue. It needs no parameters and returns an integer.</p> </li> </ul> <p>As an example, if we assume that <code>q</code> is a queue that has been created and is currently empty, then <code>Table 5</code> shows the results of a sequence of queue operations. The queue contents are shown such that the front is on the right. The first item enqueued was <code>4</code> so it is the first item returned by <code>dequeue</code>.</p> <p>Table 5: Example Queue Operations</p> Queue Operation Queue Contents Return Value <code>q.is_empty()</code> <code>[]</code> <code>True</code> <code>q.enqueue(4)</code> <code>[4]</code> <code>q.enqueue(\"dog\")</code> <code>['dog',4]</code> <code>q.enqueue(True)</code> <code>[True, 'dog', 4]</code> <code>q.size()</code> <code>[True, 'dog', 4]</code> <code>3</code> <code>q.is_empty()</code> <code>[True, 'dog', 4]</code> <code>False</code> <code>q.enqueue(8.4)</code> <code>[8.4,True, 'dog', 4]</code> <code>q.dequeue()</code> <code>[8.4, True, 'dog']</code> <code>4</code> <code>q.dequeue()</code> <code>[8.4, True]</code> <code>'dog'</code> <code>q.size()</code> <code>[8.4, True]</code> <code>2</code>"},{"location":"c3/s12/","title":"3.12. \u7528Python\u5b9e\u73b0\u961f\u5217","text":"<p>3.12. Implementing a Queue in Python</p> <p>\u539f\u6587: https://runestone.academy/ns/books/published/pythonds3/BasicDS/ImplementingaQueueinPython.html?mode=browsing</p> \u4e2d\u6587\u82f1\u6587 <p>It is again appropriate to create a new class for the implementation of the abstract data type queue. As before, we will use the power and simplicity of the list collection to build the internal representation of the queue.</p> <p>We need to decide which end of the list to use as the rear and which to use as the front. The implementation shown in <code>Listing 1</code> assumes that the rear is at position 0 in the list. This allows us to use the <code>insert</code> function on lists to add new elements to the rear of the queue. The <code>pop</code> operation can be used to remove the front element (the last element of the list). Recall that this also means that <code>enqueue</code> will be \\(O(n)\\) and <code>dequeue</code> will be \\(O(1)\\). </p> Listing 1<pre><code>class Queue:\n    \"\"\"Queue implementation as a list\"\"\"\n\n    def __init__(self):\n        \"\"\"Create new queue\"\"\"\n        self._items = []\n\n    def is_empty(self):\n        \"\"\"Check if the queue is empty\"\"\"\n        return not bool(self._items)\n\n    def enqueue(self, item):\n        \"\"\"Add an item to the queue\"\"\"\n        self._items.insert(0, item)\n\n    def dequeue(self):\n        \"\"\"Remove an item from the queue\"\"\"\n        return self._items.pop()\n\n    def size(self):\n        \"\"\"Get the number of items in the queue\"\"\"\n        return len(self._items)\n</code></pre> <p>CodeLens 1 shows the <code>Queue</code> class in action as we perform the sequence of operations from <code>Table 1</code>.</p> Activity: CodeLens Example Queue Operations (ququeuetest)<pre><code>class Queue:\n    \"\"\"Queue implementation as a list\"\"\"\n\n    def __init__(self):\n        \"\"\"Create new queue\"\"\"\n        self._items = []\n\n    def is_empty(self):\n        \"\"\"Check if the queue is empty\"\"\"\n        return not bool(self._items)\n\n    def enqueue(self, item):\n        \"\"\"Add an item to the queue\"\"\"\n        self._items.insert(0, item)\n\n    def dequeue(self):\n        \"\"\"Remove an item from the queue\"\"\"\n        return self._items.pop()\n\n    def size(self):\n        \"\"\"Get the number of items in the queue\"\"\"\n        return len(self._items)\n\nq = Queue()\nq.enqueue(4)\nq.enqueue(\"dog\")\nq.enqueue(True)\nprint(q.size())\n</code></pre> <p>Further manipulation of this queue would give the following results:</p> <pre><code>&gt;&gt;&gt; q.size()\n3\n&gt;&gt;&gt; q.is_empty()\nFalse\n&gt;&gt;&gt; q.enqueue(8.4)\n&gt;&gt;&gt; q.dequeue()\n4\n&gt;&gt;&gt; q.dequeue()\n'dog'\n&gt;&gt;&gt; q.size()\n2\n</code></pre> <p>Self Check</p> <p>Suppose you have the following series of queue operations.</p> <pre><code>q = Queue()\nq.enqueue(\"hello\")\nq.enqueue(\"dog\")\nq.enqueue(3)\nq.dequeue()\n</code></pre> <p>What items are left on the queue?</p> <ul> <li>answer a: 'hello', 'dog'</li> <li>answer b: 'dog', 3</li> <li>answer c: 'hello', 3</li> <li>answer d: 'hello', 'dog', 3</li> </ul> <p>correct: b</p> <ul> <li>feedback a: Remember the first thing added to the queue is the first thing removed.  FIFO</li> <li>feedback b: Yes, first in first out means that hello is gone</li> <li>feedback c: Queues, and Stacks are both data structures where you can only access the first and the last thing.</li> <li>feedback d: Ooops, maybe you missed the dequeue call at the end?</li> </ul>"},{"location":"c3/s13/","title":"3.13. \u961f\u5217\u6a21\u62df\uff1a\u70eb\u624b\u5c71\u828b\u6e38\u620f","text":"<p>3.13. Queue Simulation: Hot Potato</p> <p>\u539f\u6587: https://runestone.academy/ns/books/published/pythonds3/BasicDS/SimulationHotPotato.html?mode=browsing</p> \u4e2d\u6587\u82f1\u6587 <p>One of the typical applications for showing a queue in action is to simulate a real situation that requires data to be managed in a FIFO manner. To begin, let\u2019s consider the children\u2019s game hot potato. In this game (see <code>Figure 2</code>) children line up in a circle and pass an item from neighbor to neighbor as fast as they can. At a certain point in the game, the action is stopped and the child who has the item (the potato) is removed from the circle. Play continues until only one child is left.</p> <p> Figure 2: A Six-Person Game of Hot Potato </p> <p>This game is a modern-day equivalent of the famous Josephus problem. Based on a legend about the famous first-century historian Flavius Josephus, the story is told that in the Jewish revolt against Rome, Josephus and 39 of his comrades held out against the Romans in a cave. With defeat imminent, they decided that they would rather die than be slaves to the Romans. They arranged themselves in a circle. One man was designated as number one, and proceeding clockwise they killed every seventh man. Josephus, according to the legend, was among other things an accomplished mathematician. He instantly figured out where he ought to sit in order to be the last to go. When the time came, instead of killing himself, he joined the Roman side. You can find many different versions of this story. Some count every third man and some allow the last man to escape on a horse. In any case, the idea is the same.</p> <p>We will implement a general simulation of Hot Potato. Our program will input a list of names and a constant, call it \u201cnum,\u201d to be used for counting. It will return the name of the last person remaining after repetitive counting by <code>num</code>. What happens at that point is up to you.</p> <p>To simulate the circle, we will use a queue (see <code>Figure 3</code>). Assume that the child holding the potato will be at the front of the queue. Upon passing the potato, the simulation will simply dequeue and then immediately enqueue that child, putting them at the end of the line. They will then wait until all the others have been at the front before it will be their turn again. After <code>num</code> dequeue/enqueue operations, the child at the front will be removed permanently and another cycle will begin. This process will continue until only one name remains (the size of the queue is 1).</p> <p> Figure 3: A Queue Implementation of Hot Potato </p> <p>The program is shown in :ref:<code>ActiveCode 1 &lt;lst_josephussim&gt;</code>. A call to the <code>hot_potato</code> function using 7 as the counting constant returns <code>'Susan'</code>.</p> Activity: 3.13.1 Hot Potato Simulation<pre><code>from pythonds3.basic import Queue\n\n\ndef hot_potato(name_list, num):\n    sim_queue = Queue()\n    for name in name_list:\n        sim_queue.enqueue(name)\n\n    while sim_queue.size() &gt; 1:\n        for i in range(num):\n            sim_queue.enqueue(sim_queue.dequeue())\n\n        sim_queue.dequeue()\n\n    return sim_queue.dequeue()\n\n\nprint(hot_potato([\"Bill\", \"David\", \"Susan\", \"Jane\", \"Kent\", \"Brad\"], 7))\n</code></pre> <p>Note that in this example the value of the counting constant is greater than the number of names in the list. This is not a problem since the queue acts like a circle and counting continues back at the beginning until the value is reached. Also, notice that the list is loaded into the queue such that the first name on the list will be at the front of the queue. <code>'Bill'</code> in this case is the first item in the list and therefore moves to the front of the queue. A variation of this implementation, described in the exercises, allows for a random counter.</p> <p>One of the typical applications for showing a queue in action is to simulate a real situation that requires data to be managed in a FIFO manner. To begin, let\u2019s consider the children\u2019s game hot potato. In this game (see <code>Figure 2</code>) children line up in a circle and pass an item from neighbor to neighbor as fast as they can. At a certain point in the game, the action is stopped and the child who has the item (the potato) is removed from the circle. Play continues until only one child is left.</p> <p> Figure 2: A Six-Person Game of Hot Potato </p> <p>This game is a modern-day equivalent of the famous Josephus problem. Based on a legend about the famous first-century historian Flavius Josephus, the story is told that in the Jewish revolt against Rome, Josephus and 39 of his comrades held out against the Romans in a cave. With defeat imminent, they decided that they would rather die than be slaves to the Romans. They arranged themselves in a circle. One man was designated as number one, and proceeding clockwise they killed every seventh man. Josephus, according to the legend, was among other things an accomplished mathematician. He instantly figured out where he ought to sit in order to be the last to go. When the time came, instead of killing himself, he joined the Roman side. You can find many different versions of this story. Some count every third man and some allow the last man to escape on a horse. In any case, the idea is the same.</p> <p>We will implement a general simulation of Hot Potato. Our program will input a list of names and a constant, call it \u201cnum,\u201d to be used for counting. It will return the name of the last person remaining after repetitive counting by <code>num</code>. What happens at that point is up to you.</p> <p>To simulate the circle, we will use a queue (see <code>Figure 3</code>). Assume that the child holding the potato will be at the front of the queue. Upon passing the potato, the simulation will simply dequeue and then immediately enqueue that child, putting them at the end of the line. They will then wait until all the others have been at the front before it will be their turn again. After <code>num</code> dequeue/enqueue operations, the child at the front will be removed permanently and another cycle will begin. This process will continue until only one name remains (the size of the queue is 1).</p> <p> Figure 3: A Queue Implementation of Hot Potato </p> <p>The program is shown in :ref:<code>ActiveCode 1 &lt;lst_josephussim&gt;</code>. A call to the <code>hot_potato</code> function using 7 as the counting constant returns <code>'Susan'</code>.</p> Activity: 3.13.1 Hot Potato Simulation<pre><code>from pythonds3.basic import Queue\n\n\ndef hot_potato(name_list, num):\n    sim_queue = Queue()\n    for name in name_list:\n        sim_queue.enqueue(name)\n\n    while sim_queue.size() &gt; 1:\n        for i in range(num):\n            sim_queue.enqueue(sim_queue.dequeue())\n\n        sim_queue.dequeue()\n\n    return sim_queue.dequeue()\n\n\nprint(hot_potato([\"Bill\", \"David\", \"Susan\", \"Jane\", \"Kent\", \"Brad\"], 7))\n</code></pre> <p>Note that in this example the value of the counting constant is greater than the number of names in the list. This is not a problem since the queue acts like a circle and counting continues back at the beginning until the value is reached. Also, notice that the list is loaded into the queue such that the first name on the list will be at the front of the queue. <code>'Bill'</code> in this case is the first item in the list and therefore moves to the front of the queue. A variation of this implementation, described in the exercises, allows for a random counter.</p>"},{"location":"c3/s14/","title":"3.14. \u961f\u5217\u6a21\u62df\uff1a\u6253\u5370\u4efb\u52a1","text":"<p>3.14. Queue Simulation: Printing Tasks</p> <p>\u539f\u6587: https://runestone.academy/ns/books/published/pythonds3/BasicDS/SimulationPrintingTasks.html?mode=browsing</p> \u4e2d\u6587\u82f1\u6587 <p>A more interesting simulation allows us to study the behavior of the printing queue described earlier in this section. Recall that as students send printing tasks to the shared printer, the tasks are placed in a queue to be processed in a first come, first served manner. Many questions arise with this configuration. The most important of these might be whether the printer is capable of handling a certain amount of work. If it cannot, students will be waiting too long for printing and may miss their next class.</p> <p>Consider the following situation in a computer science laboratory. On any average day about 10 students are working in the lab at any given hour. These students typically print up to twice during that time, and the length of these tasks ranges from 1 to 20 pages. The printer in the lab is older, capable of processing 10 pages per minute of draft quality. The printer could be switched to give better quality, but then it would produce only five pages per minute. The slower printing speed could make students wait too long. What page rate should be used?</p> <p>We could decide by building a simulation that models the laboratory. We will need to construct representations for students, printing tasks, and the printer (<code>Figure 4</code>). As students submit printing tasks, we will add them to a waiting list, a queue of print tasks attached to the printer. When the printer completes a task, it will look at the queue to see if there are any remaining tasks to process. Of interest for us is the average amount of time students will wait for their papers to be printed. This is equal to the average amount of time a task waits in the queue.</p> <p> Figure 4: Computer Science Laboratory Printing Queue </p> <p>To model this situation we need to use some probabilities. For example, students may print a paper from 1 to 20 pages in length. If each length from 1 to 20 is equally likely, the actual length for a print task can be simulated by using a random number between 1 and 20 inclusive. This means that there is equal chance of any length from 1 to 20 appearing. </p> <p>If there are 10 students in the lab and each prints twice, then there are 20 print tasks per hour on average. What is the chance that at any given second, a print task is going to be created? The way to answer this is to consider the ratio of tasks to time. Twenty tasks per hour means that on average there will be one task every 180 seconds:</p> <p>\\(\\frac {20\\ tasks}{1\\ hour} \\times \\frac {1\\ hour}  {60\\ minutes} \\times \\frac {1\\ minute} {60\\ seconds}=\\frac {1\\ task} {180\\ seconds}\\)</p> <p>For every second we can simulate the chance that a print task occurs by generating a random number between 1 and 180 inclusive. If the number is 180, we say a task has been created. Note that it is possible that many tasks could be created in a row or we may wait quite a while for a task to appear. That is the nature of simulation. You want to simulate the real situation as closely as possible given that you know general parameters.</p> <p>A more interesting simulation allows us to study the behavior of the printing queue described earlier in this section. Recall that as students send printing tasks to the shared printer, the tasks are placed in a queue to be processed in a first come, first served manner. Many questions arise with this configuration. The most important of these might be whether the printer is capable of handling a certain amount of work. If it cannot, students will be waiting too long for printing and may miss their next class.</p> <p>Consider the following situation in a computer science laboratory. On any average day about 10 students are working in the lab at any given hour. These students typically print up to twice during that time, and the length of these tasks ranges from 1 to 20 pages. The printer in the lab is older, capable of processing 10 pages per minute of draft quality. The printer could be switched to give better quality, but then it would produce only five pages per minute. The slower printing speed could make students wait too long. What page rate should be used?</p> <p>We could decide by building a simulation that models the laboratory. We will need to construct representations for students, printing tasks, and the printer (<code>Figure 4</code>). As students submit printing tasks, we will add them to a waiting list, a queue of print tasks attached to the printer. When the printer completes a task, it will look at the queue to see if there are any remaining tasks to process. Of interest for us is the average amount of time students will wait for their papers to be printed. This is equal to the average amount of time a task waits in the queue.</p> <p> Figure 4: Computer Science Laboratory Printing Queue </p> <p>To model this situation we need to use some probabilities. For example, students may print a paper from 1 to 20 pages in length. If each length from 1 to 20 is equally likely, the actual length for a print task can be simulated by using a random number between 1 and 20 inclusive. This means that there is equal chance of any length from 1 to 20 appearing. </p> <p>If there are 10 students in the lab and each prints twice, then there are 20 print tasks per hour on average. What is the chance that at any given second, a print task is going to be created? The way to answer this is to consider the ratio of tasks to time. Twenty tasks per hour means that on average there will be one task every 180 seconds:</p> <p>\\(\\frac {20\\ tasks}{1\\ hour} \\times \\frac {1\\ hour}  {60\\ minutes} \\times \\frac {1\\ minute} {60\\ seconds}=\\frac {1\\ task} {180\\ seconds}\\)</p> <p>For every second we can simulate the chance that a print task occurs by generating a random number between 1 and 180 inclusive. If the number is 180, we say a task has been created. Note that it is possible that many tasks could be created in a row or we may wait quite a while for a task to appear. That is the nature of simulation. You want to simulate the real situation as closely as possible given that you know general parameters.</p>"},{"location":"c3/s14/#3141-\u4e3b\u8981\u6a21\u62df\u6b65\u9aa4","title":"3.14.1. \u4e3b\u8981\u6a21\u62df\u6b65\u9aa4","text":"<p>3.14.1. Main Simulation Steps</p> \u4e2d\u6587\u82f1\u6587 <p>Here is the main simulation.</p> <ol> <li> <p>Create a queue of print tasks. Each task will be given a timestamp upon its arrival. The queue is empty to start.</p> </li> <li> <p>For each second (<code>current_second</code>):</p> <ul> <li> <p>Does a new print task get created? If so, add it to the queue with the <code>current_second</code> as the timestamp.</p> </li> <li> <p>If the printer is not busy and if a task is waiting,</p> <ul> <li> <p>Remove the next task from the print queue and assign it to the printer.</p> </li> <li> <p>Subtract the timestamp from the <code>current_second</code> to compute the waiting time for that task.</p> </li> <li> <p>Append the waiting time for that task to a list for later processing.</p> </li> <li> <p>Based on the number of pages in the print task, figure out how much time will be required.</p> </li> </ul> </li> <li> <p>The printer now does one second of printing if necessary. It also subtracts one second from the time required for that task.</p> </li> <li> <p>If the task has been completed, in other words the time required has reached zero, the printer is no longer busy.</p> </li> </ul> </li> <li> <p>After the simulation is complete, compute the average waiting time from the list of waiting times generated.</p> </li> </ol> <p>Here is the main simulation.</p> <ol> <li> <p>Create a queue of print tasks. Each task will be given a timestamp upon its arrival. The queue is empty to start.</p> </li> <li> <p>For each second (<code>current_second</code>):</p> <ul> <li> <p>Does a new print task get created? If so, add it to the queue with the <code>current_second</code> as the timestamp.</p> </li> <li> <p>If the printer is not busy and if a task is waiting,</p> <ul> <li> <p>Remove the next task from the print queue and assign it to the printer.</p> </li> <li> <p>Subtract the timestamp from the <code>current_second</code> to compute the waiting time for that task.</p> </li> <li> <p>Append the waiting time for that task to a list for later processing.</p> </li> <li> <p>Based on the number of pages in the print task, figure out how much time will be required.</p> </li> </ul> </li> <li> <p>The printer now does one second of printing if necessary. It also subtracts one second from the time required for that task.</p> </li> <li> <p>If the task has been completed, in other words the time required has reached zero, the printer is no longer busy.</p> </li> </ul> </li> <li> <p>After the simulation is complete, compute the average waiting time from the list of waiting times generated.</p> </li> </ol>"},{"location":"c3/s14/#3142-python\u5b9e\u73b0","title":"3.14.2. Python\u5b9e\u73b0","text":"<p>3.14.2. Python Implementation</p> \u4e2d\u6587\u82f1\u6587 <p>To design this simulation we will create classes for the three real-world objects described above: <code>Printer</code>, <code>Task</code>, and <code>PrintQueue</code>.</p> <p>The <code>Printer</code> class (<code>Listing 2</code>) will need to track whether it has a current task. If it does, then it is busy (lines 13\u201317) and the amount of time needed can be computed from the number of pages in the task. The constructor will also allow the pages-per-minute setting to be initialized. The <code>tick</code> method decrements the internal timer and sets the printer to idle (line 11) if the task is completed.</p> Listing 2<pre><code>class Printer:\n    def __init__(self, ppm):\n        self.page_rate = ppm\n        self.current_task = None\n        self.time_remaining = 0\n\n    def tick(self):\n        if self.current_task is not None:\n            self.time_remaining = self.time_remaining - 1\n            if self.time_remaining &lt;= 0:\n                self.current_task = None\n\n    def busy(self):\n        return self.current_task is not None\n\n    def start_next(self, new_task):\n        self.current_task = new_task\n        self.time_remaining = new_task.get_pages() * 60 / self.page_rate\n</code></pre> <p>The <code>Task</code> class (<code>Listing 3</code>) will represent a single printing task. When the task is created, a random number generator will provide a length from 1 to 20 pages. We have chosen to use the <code>randrange</code> function from the <code>random</code> module.</p> <pre><code>&gt;&gt;&gt; import random\n&gt;&gt;&gt; random.randrange(1,21)\n18\n&gt;&gt;&gt; random.randrange(1,21)\n8\n&gt;&gt;&gt;\n</code></pre> <p>Each task will also need to keep a timestamp to be used for computing waiting time. This timestamp will represent the time that the task was created and placed in the printer queue. The <code>wait_time</code> method can then be used to retrieve the amount of time spent in the queue before printing begins.</p> Listing 3<pre><code>import random\n\n\nclass Task:\n    def __init__(self, time):\n        self.timestamp = time\n        self.pages = random.randrange(1, 21)\n\n    def get_stamp(self):\n        return self.timestamp\n\n    def get_pages(self):\n        return self.pages\n\n    def wait_time(self, current_time):\n        return current_time - self.timestamp\n</code></pre> <p>The main simulation (<code>Listing 4</code>) implements the algorithm described above. The <code>print_queue</code> object is an instance of our existing queue ADT. A boolean helper function, <code>new_print_task</code>, decides whether a new printing task has been created. We have again chosen to use the <code>randrange</code> function from the <code>random</code> module to return a random integer between 1 and 180. Print tasks arrive once every 180 seconds. By arbitrarily choosing 180 from the range of random integers (line 31), we can simulate this random event. The simulation function allows us to set the total time and the pages per minute for the printer.</p> Listing 4<pre><code>import random\nfrom pythonds3.basic.queue Queue\n\n\ndef simulation(num_seconds, pages_per_minute):\n    lab_printer = Printer(pages_per_minute)\n    print_queue = Queue()\n    waiting_times = []\n\n    for current_second in range(num_seconds):\n        if new_print_task():\n            task = Task(current_second)\n            print_queue.enqueue(task)\n\n        if (not lab_printer.busy()) and (not print_queue.is_empty()):\n            nexttask = print_queue.dequeue()\n            waiting_times.append(nexttask.wait_time(current_second))\n            lab_printer.start_next(nexttask)\n\n        lab_printer.tick()\n\n    average_wait = sum(waiting_times) / len(waiting_times)\n    print(\n        f\"Average Wait {average_wait:6.2f} secs\" \\\n        + f\"{print_queue.size():3d} tasks remaining.\"\n    )\n\n\ndef new_print_task():\n    num = random.randrange(1, 181)\n    return num == 180\n\n\nfor i in range(10):\n    simulation(3600, 5)\n</code></pre> <p>When we run the simulation, we should not be concerned that the results are different each time. This is due to the probabilistic nature of the random numbers. We are interested in the trends that may be occurring as the parameters to the simulation are adjusted. Here are some results.</p> <p>First, we will run the simulation for a period of 60 minutes (3,600 seconds) using a page rate of five pages per minute. In addition, we will run 10 independent trials. Remember that because the simulation works with random numbers each run will return different results.</p> <pre><code>&gt;&gt;&gt; for i in range(10):\n...     simulation(3600, 5)\n... \nAverage Wait 165.38 secs 2 tasks remaining.\nAverage Wait  95.07 secs 1 tasks remaining.\nAverage Wait  65.05 secs 2 tasks remaining.\nAverage Wait  99.74 secs 1 tasks remaining.\nAverage Wait  17.27 secs 0 tasks remaining.\nAverage Wait 239.61 secs 5 tasks remaining.\nAverage Wait  75.11 secs 1 tasks remaining.\nAverage Wait  48.33 secs 0 tasks remaining.\nAverage Wait  39.31 secs 3 tasks remaining.\nAverage Wait 376.05 secs 1 tasks remaining.\n&gt;&gt;&gt; \n</code></pre> <p>After running our 10 trials we can see that the mean average wait time is (165.38 + 95.07 + 65.05 + 99.74 + 17.27 + 239.61 + 75.11 + 48.33 + 39.31 + 376.05) / 10 = 122.09 seconds. You can also see that there is a large variation in the average wait time with a minimum average of 17.27 seconds and a maximum of 376.05 seconds. You may also notice that in only two of the cases were all the tasks completed.</p> <p>Now we will adjust the page rate to 10 pages per minute and run the 10 trials again. With a faster page rate, our hope would be that more tasks would be completed in the one-hour time frame.</p> <pre><code>&gt;&gt;&gt; for i in range(10):\n...     simulation(3600, 10)\n... \nAverage Wait   1.29 secs 0 tasks remaining.\nAverage Wait   7.00 secs 0 tasks remaining.\nAverage Wait  28.96 secs 1 tasks remaining.\nAverage Wait  13.55 secs 0 tasks remaining.\nAverage Wait  12.67 secs 0 tasks remaining.\nAverage Wait   6.46 secs 0 tasks remaining.\nAverage Wait  22.33 secs 0 tasks remaining.\nAverage Wait  12.39 secs 0 tasks remaining.\nAverage Wait   7.27 secs 0 tasks remaining.\nAverage Wait  18.17 secs 0 tasks remaining.\n&gt;&gt;&gt; \n</code></pre> <p>You can run the simulation for yourself in ActiveCode 2.</p> Activity: 3.14.2.1 Printer Queue Simulation<pre><code>import random\nfrom pythonds3.basic import Queue\n\n\nclass Printer:\n    def __init__(self, ppm):\n        self.page_rate = ppm\n        self.current_task = None\n        self.time_remaining = 0\n\n    def tick(self):\n        if self.current_task is not None:\n            self.time_remaining = self.time_remaining - 1\n            if self.time_remaining &lt;= 0:\n                self.current_task = None\n\n    def busy(self):\n        return self.current_task is not None\n\n    def start_next(self, new_task):\n        self.current_task = new_task\n        self.time_remaining = new_task.get_pages() * 60 / self.page_rate\n\n\nclass Task:\n    def __init__(self, time):\n        self.timestamp = time\n        self.pages = random.randrange(1, 21)\n\n    def get_stamp(self):\n        return self.timestamp\n\n    def get_pages(self):\n        return self.pages\n\n    def wait_time(self, current_time):\n        return current_time - self.timestamp\n\n\ndef simulation(num_seconds, pages_per_minute):\n    lab_printer = Printer(pages_per_minute)\n    print_queue = Queue()\n    waiting_times = []\n\n    for current_second in range(num_seconds):\n        if new_print_task():\n            task = Task(current_second)\n            print_queue.enqueue(task)\n\n        if (not lab_printer.busy()) and (not print_queue.is_empty()):\n            nexttask = print_queue.dequeue()\n            waiting_times.append(nexttask.wait_time(current_second))\n            lab_printer.start_next(nexttask)\n\n        lab_printer.tick()\n\n    average_wait = sum(waiting_times) / len(waiting_times)\n    print(\"Average Wait %6.2f secs %3d tasks remaining.\" % (average_wait, print_queue.size()))\n\n\ndef new_print_task():\n    num = random.randrange(1, 181)\n    return num == 180\n\n\nfor i in range(10):\n    simulation(3600, 5)\n</code></pre> <p>To design this simulation we will create classes for the three real-world objects described above: <code>Printer</code>, <code>Task</code>, and <code>PrintQueue</code>.</p> <p>The <code>Printer</code> class (<code>Listing 2</code>) will need to track whether it has a current task. If it does, then it is busy (lines 13\u201317) and the amount of time needed can be computed from the number of pages in the task. The constructor will also allow the pages-per-minute setting to be initialized. The <code>tick</code> method decrements the internal timer and sets the printer to idle (line 11) if the task is completed.</p> Listing 2<pre><code>class Printer:\n    def __init__(self, ppm):\n        self.page_rate = ppm\n        self.current_task = None\n        self.time_remaining = 0\n\n    def tick(self):\n        if self.current_task is not None:\n            self.time_remaining = self.time_remaining - 1\n            if self.time_remaining &lt;= 0:\n                self.current_task = None\n\n    def busy(self):\n        return self.current_task is not None\n\n    def start_next(self, new_task):\n        self.current_task = new_task\n        self.time_remaining = new_task.get_pages() * 60 / self.page_rate\n</code></pre> <p>The <code>Task</code> class (<code>Listing 3</code>) will represent a single printing task. When the task is created, a random number generator will provide a length from 1 to 20 pages. We have chosen to use the <code>randrange</code> function from the <code>random</code> module.</p> <pre><code>&gt;&gt;&gt; import random\n&gt;&gt;&gt; random.randrange(1,21)\n18\n&gt;&gt;&gt; random.randrange(1,21)\n8\n&gt;&gt;&gt;\n</code></pre> <p>Each task will also need to keep a timestamp to be used for computing waiting time. This timestamp will represent the time that the task was created and placed in the printer queue. The <code>wait_time</code> method can then be used to retrieve the amount of time spent in the queue before printing begins.</p> Listing 3<pre><code>import random\n\n\nclass Task:\n    def __init__(self, time):\n        self.timestamp = time\n        self.pages = random.randrange(1, 21)\n\n    def get_stamp(self):\n        return self.timestamp\n\n    def get_pages(self):\n        return self.pages\n\n    def wait_time(self, current_time):\n        return current_time - self.timestamp\n</code></pre> <p>The main simulation (<code>Listing 4</code>) implements the algorithm described above. The <code>print_queue</code> object is an instance of our existing queue ADT. A boolean helper function, <code>new_print_task</code>, decides whether a new printing task has been created. We have again chosen to use the <code>randrange</code> function from the <code>random</code> module to return a random integer between 1 and 180. Print tasks arrive once every 180 seconds. By arbitrarily choosing 180 from the range of random integers (line 31), we can simulate this random event. The simulation function allows us to set the total time and the pages per minute for the printer.</p> Listing 4<pre><code>import random\nfrom pythonds3.basic.queue Queue\n\n\ndef simulation(num_seconds, pages_per_minute):\n    lab_printer = Printer(pages_per_minute)\n    print_queue = Queue()\n    waiting_times = []\n\n    for current_second in range(num_seconds):\n        if new_print_task():\n            task = Task(current_second)\n            print_queue.enqueue(task)\n\n        if (not lab_printer.busy()) and (not print_queue.is_empty()):\n            nexttask = print_queue.dequeue()\n            waiting_times.append(nexttask.wait_time(current_second))\n            lab_printer.start_next(nexttask)\n\n        lab_printer.tick()\n\n    average_wait = sum(waiting_times) / len(waiting_times)\n    print(\n        f\"Average Wait {average_wait:6.2f} secs\" \\\n        + f\"{print_queue.size():3d} tasks remaining.\"\n    )\n\n\ndef new_print_task():\n    num = random.randrange(1, 181)\n    return num == 180\n\n\nfor i in range(10):\n    simulation(3600, 5)\n</code></pre> <p>When we run the simulation, we should not be concerned that the results are different each time. This is due to the probabilistic nature of the random numbers. We are interested in the trends that may be occurring as the parameters to the simulation are adjusted. Here are some results.</p> <p>First, we will run the simulation for a period of 60 minutes (3,600 seconds) using a page rate of five pages per minute. In addition, we will run 10 independent trials. Remember that because the simulation works with random numbers each run will return different results.</p> <pre><code>&gt;&gt;&gt; for i in range(10):\n...     simulation(3600, 5)\n... \nAverage Wait 165.38 secs 2 tasks remaining.\nAverage Wait  95.07 secs 1 tasks remaining.\nAverage Wait  65.05 secs 2 tasks remaining.\nAverage Wait  99.74 secs 1 tasks remaining.\nAverage Wait  17.27 secs 0 tasks remaining.\nAverage Wait 239.61 secs 5 tasks remaining.\nAverage Wait  75.11 secs 1 tasks remaining.\nAverage Wait  48.33 secs 0 tasks remaining.\nAverage Wait  39.31 secs 3 tasks remaining.\nAverage Wait 376.05 secs 1 tasks remaining.\n&gt;&gt;&gt; \n</code></pre> <p>After running our 10 trials we can see that the mean average wait time is (165.38 + 95.07 + 65.05 + 99.74 + 17.27 + 239.61 + 75.11 + 48.33 + 39.31 + 376.05) / 10 = 122.09 seconds. You can also see that there is a large variation in the average wait time with a minimum average of 17.27 seconds and a maximum of 376.05 seconds. You may also notice that in only two of the cases were all the tasks completed.</p> <p>Now we will adjust the page rate to 10 pages per minute and run the 10 trials again. With a faster page rate, our hope would be that more tasks would be completed in the one-hour time frame.</p> <pre><code>&gt;&gt;&gt; for i in range(10):\n...     simulation(3600, 10)\n... \nAverage Wait   1.29 secs 0 tasks remaining.\nAverage Wait   7.00 secs 0 tasks remaining.\nAverage Wait  28.96 secs 1 tasks remaining.\nAverage Wait  13.55 secs 0 tasks remaining.\nAverage Wait  12.67 secs 0 tasks remaining.\nAverage Wait   6.46 secs 0 tasks remaining.\nAverage Wait  22.33 secs 0 tasks remaining.\nAverage Wait  12.39 secs 0 tasks remaining.\nAverage Wait   7.27 secs 0 tasks remaining.\nAverage Wait  18.17 secs 0 tasks remaining.\n&gt;&gt;&gt; \n</code></pre> <p>You can run the simulation for yourself in ActiveCode 2.</p> Activity: 3.14.2.1 Printer Queue Simulation<pre><code>import random\nfrom pythonds3.basic import Queue\n\n\nclass Printer:\n    def __init__(self, ppm):\n        self.page_rate = ppm\n        self.current_task = None\n        self.time_remaining = 0\n\n    def tick(self):\n        if self.current_task is not None:\n            self.time_remaining = self.time_remaining - 1\n            if self.time_remaining &lt;= 0:\n                self.current_task = None\n\n    def busy(self):\n        return self.current_task is not None\n\n    def start_next(self, new_task):\n        self.current_task = new_task\n        self.time_remaining = new_task.get_pages() * 60 / self.page_rate\n\n\nclass Task:\n    def __init__(self, time):\n        self.timestamp = time\n        self.pages = random.randrange(1, 21)\n\n    def get_stamp(self):\n        return self.timestamp\n\n    def get_pages(self):\n        return self.pages\n\n    def wait_time(self, current_time):\n        return current_time - self.timestamp\n\n\ndef simulation(num_seconds, pages_per_minute):\n    lab_printer = Printer(pages_per_minute)\n    print_queue = Queue()\n    waiting_times = []\n\n    for current_second in range(num_seconds):\n        if new_print_task():\n            task = Task(current_second)\n            print_queue.enqueue(task)\n\n        if (not lab_printer.busy()) and (not print_queue.is_empty()):\n            nexttask = print_queue.dequeue()\n            waiting_times.append(nexttask.wait_time(current_second))\n            lab_printer.start_next(nexttask)\n\n        lab_printer.tick()\n\n    average_wait = sum(waiting_times) / len(waiting_times)\n    print(\"Average Wait %6.2f secs %3d tasks remaining.\" % (average_wait, print_queue.size()))\n\n\ndef new_print_task():\n    num = random.randrange(1, 181)\n    return num == 180\n\n\nfor i in range(10):\n    simulation(3600, 5)\n</code></pre>"},{"location":"c3/s14/#3143-\u8ba8\u8bba","title":"3.14.3. \u8ba8\u8bba","text":"<p>3.14.3. Discussion</p> \u4e2d\u6587\u82f1\u6587 <p>We were trying to answer a question about whether the current printer could handle the task load if it were set to print with a better quality but slower page rate. The approach we took was to write a simulation that modeled the printing tasks as random events of various lengths and arrival times.</p> <p>The output above shows that with 5 pages per minute printing, the average waiting time varied from a low of 17 seconds to a high of 376 seconds (about 6 minutes). With a faster printing rate, the low value was 1 second with a high of only 28. In addition, in 8 out of 10 runs at 5 pages per minute there were print tasks still waiting in the queue at the end of the hour.</p> <p>Therefore, we are perhaps persuaded that slowing the printer down to get better quality may not be a good idea. Students cannot afford to wait that long for their papers, especially when they need to be getting on to their next class. A six-minute wait would simply be too long.</p> <p>This type of simulation analysis allows us to answer many questions, commonly known as what-if questions. All we need to do is vary the parameters used by the simulation and we can simulate any number of interesting behaviors. For example,</p> <ul> <li> <p>What if enrollment goes up and the average number of students increases by 20?</p> </li> <li> <p>What if it is Saturday and students do not need to get to class? Can they afford to wait?</p> </li> <li> <p>What if the size of the average print task decreases since Python is such a powerful language and programs tend to be much shorter?</p> </li> </ul> <p>These questions could all be answered by modifying the above simulation. However, it is important to remember that the simulation is only as good as the assumptions that are used to build it. Real data about the number of print tasks per hour and the number of students per hour was necessary to construct a robust simulation.</p> <p>Self Check</p> <p>How would you modify the printer simulation to reflect a larger number of students?  Suppose that the number of students was doubled.  You make need to make some reasonable assumptions about how this simulation was put together but what would you change?  Modify the code.  Also suppose that the length of the average print task was cut in half.  Change the code to reflect that change.  Finally How would you parametertize the number of students, rather than changing the code we would like to make the number of students a parameter of the simulation.</p> Activity: 3.14.3.1 ActiveCode<pre><code>import random\nfrom pythonds3.basic import Queue\n\n\nclass Printer:\n    def __init__(self, ppm):\n        self.page_rate = ppm\n        self.current_task = None\n        self.time_remaining = 0\n\n    def tick(self):\n        if self.current_task is not None:\n            self.time_remaining = self.time_remaining - 1\n            if self.time_remaining &lt;= 0:\n                self.current_task = None\n\n    def busy(self):\n        return self.current_task is not None\n\n    def start_next(self, new_task):\n        self.current_task = new_task\n        self.time_remaining = new_task.get_pages() * 60 / self.page_rate\n\n\nclass Task:\n    def __init__(self, time):\n        self.timestamp = time\n        self.pages = random.randrange(1, 21)\n\n    def get_stamp(self):\n        return self.timestamp\n\n    def get_pages(self):\n        return self.pages\n\n    def wait_time(self, current_time):\n        return current_time - self.timestamp\n\n\ndef simulation(num_seconds, pages_per_minute):\n    lab_printer = Printer(pages_per_minute)\n    print_queue = Queue()\n    waiting_times = []\n\n    for current_second in range(num_seconds):\n        if new_print_task():\n            task = Task(current_second)\n            print_queue.enqueue(task)\n\n        if (not lab_printer.busy()) and (not print_queue.is_empty()):\n            nexttask = print_queue.dequeue()\n            waiting_times.append(nexttask.wait_time(current_second))\n            lab_printer.start_next(nexttask)\n\n        lab_printer.tick()\n\n    average_wait = sum(waiting_times) / len(waiting_times)\n    print(\"Average Wait %6.2f secs %3d tasks remaining.\" % (average_wait, print_queue.size()))\n\n\ndef new_print_task():\n    num = random.randrange(1, 181)\n    return num == 180\n\n\nfor i in range(10):\n    simulation(3600, 5)\n</code></pre> <p>We were trying to answer a question about whether the current printer could handle the task load if it were set to print with a better quality but slower page rate. The approach we took was to write a simulation that modeled the printing tasks as random events of various lengths and arrival times.</p> <p>The output above shows that with 5 pages per minute printing, the average waiting time varied from a low of 17 seconds to a high of 376 seconds (about 6 minutes). With a faster printing rate, the low value was 1 second with a high of only 28. In addition, in 8 out of 10 runs at 5 pages per minute there were print tasks still waiting in the queue at the end of the hour.</p> <p>Therefore, we are perhaps persuaded that slowing the printer down to get better quality may not be a good idea. Students cannot afford to wait that long for their papers, especially when they need to be getting on to their next class. A six-minute wait would simply be too long.</p> <p>This type of simulation analysis allows us to answer many questions, commonly known as what-if questions. All we need to do is vary the parameters used by the simulation and we can simulate any number of interesting behaviors. For example,</p> <ul> <li> <p>What if enrollment goes up and the average number of students increases by 20?</p> </li> <li> <p>What if it is Saturday and students do not need to get to class? Can they afford to wait?</p> </li> <li> <p>What if the size of the average print task decreases since Python is such a powerful language and programs tend to be much shorter?</p> </li> </ul> <p>These questions could all be answered by modifying the above simulation. However, it is important to remember that the simulation is only as good as the assumptions that are used to build it. Real data about the number of print tasks per hour and the number of students per hour was necessary to construct a robust simulation.</p> <p>Self Check</p> <p>How would you modify the printer simulation to reflect a larger number of students?  Suppose that the number of students was doubled.  You make need to make some reasonable assumptions about how this simulation was put together but what would you change?  Modify the code.  Also suppose that the length of the average print task was cut in half.  Change the code to reflect that change.  Finally How would you parametertize the number of students, rather than changing the code we would like to make the number of students a parameter of the simulation.</p> Activity: 3.14.3.1 ActiveCode<pre><code>import random\nfrom pythonds3.basic import Queue\n\n\nclass Printer:\n    def __init__(self, ppm):\n        self.page_rate = ppm\n        self.current_task = None\n        self.time_remaining = 0\n\n    def tick(self):\n        if self.current_task is not None:\n            self.time_remaining = self.time_remaining - 1\n            if self.time_remaining &lt;= 0:\n                self.current_task = None\n\n    def busy(self):\n        return self.current_task is not None\n\n    def start_next(self, new_task):\n        self.current_task = new_task\n        self.time_remaining = new_task.get_pages() * 60 / self.page_rate\n\n\nclass Task:\n    def __init__(self, time):\n        self.timestamp = time\n        self.pages = random.randrange(1, 21)\n\n    def get_stamp(self):\n        return self.timestamp\n\n    def get_pages(self):\n        return self.pages\n\n    def wait_time(self, current_time):\n        return current_time - self.timestamp\n\n\ndef simulation(num_seconds, pages_per_minute):\n    lab_printer = Printer(pages_per_minute)\n    print_queue = Queue()\n    waiting_times = []\n\n    for current_second in range(num_seconds):\n        if new_print_task():\n            task = Task(current_second)\n            print_queue.enqueue(task)\n\n        if (not lab_printer.busy()) and (not print_queue.is_empty()):\n            nexttask = print_queue.dequeue()\n            waiting_times.append(nexttask.wait_time(current_second))\n            lab_printer.start_next(nexttask)\n\n        lab_printer.tick()\n\n    average_wait = sum(waiting_times) / len(waiting_times)\n    print(\"Average Wait %6.2f secs %3d tasks remaining.\" % (average_wait, print_queue.size()))\n\n\ndef new_print_task():\n    num = random.randrange(1, 181)\n    return num == 180\n\n\nfor i in range(10):\n    simulation(3600, 5)\n</code></pre>"},{"location":"c3/s15/","title":"3.15. \u53cc\u7aef\u961f\u5217","text":"<p>3.15. Deques</p> \u4e2d\u6587\u82f1\u6587"},{"location":"c3/s16/","title":"3.16. \u53cc\u7aef\u961f\u5217\u7684\u62bd\u8c61\u6570\u636e\u7c7b\u578b","text":"<p>3.16. The Deque Abstract Data Type</p> \u4e2d\u6587\u82f1\u6587"},{"location":"c3/s17/","title":"3.17. \u7528Python\u5b9e\u73b0\u53cc\u7aef\u961f\u5217","text":"<p>3.17. Implementing a Deque in Python</p> \u4e2d\u6587\u82f1\u6587"},{"location":"c3/s18/","title":"3.18. \u56de\u6587\u68c0\u6d4b\u5668","text":"<p>3.18. Palindrome Checker</p> \u4e2d\u6587\u82f1\u6587"},{"location":"c3/s19/","title":"3.19. \u5217\u8868","text":"<p>3.19. Lists</p> \u4e2d\u6587\u82f1\u6587"},{"location":"c3/s2/","title":"3.2. \u4ec0\u4e48\u662f\u7ebf\u6027\u7ed3\u6784\uff1f","text":"<p>3.2. What Are Linear Structures?</p> \u4e2d\u6587\u82f1\u6587 <p>We will begin our study of data structures by considering four simple but very powerful concepts. Stacks, queues, deques, and lists are examples of data collections whose items are ordered depending on how they are added or removed. Once an item is added, it stays in that position relative to the other elements that came before and came after it. Collections such as these are often referred to as linear data structures.</p> <p>Linear structures can be thought of as having two ends. Sometimes these ends are referred to as the left and the right, or in some cases the front and the rear. You could also call them the \u201ctop\u201d and the bottom. The names given to the ends are not significant. What distinguishes one linear structure from another is the way in which items are added and removed, in particular the location where these additions and removals occur. For example, a structure might allow new items to be added at only one end. Some structures might allow items to be removed from either end.</p> <p>These variations give rise to some of the most useful data structures in computer science. They appear in many algorithms and can be used to solve a variety of important problems.</p> <p>We will begin our study of data structures by considering four simple but very powerful concepts. Stacks, queues, deques, and lists are examples of data collections whose items are ordered depending on how they are added or removed. Once an item is added, it stays in that position relative to the other elements that came before and came after it. Collections such as these are often referred to as linear data structures.</p> <p>Linear structures can be thought of as having two ends. Sometimes these ends are referred to as the left and the right, or in some cases the front and the rear. You could also call them the \u201ctop\u201d and the bottom. The names given to the ends are not significant. What distinguishes one linear structure from another is the way in which items are added and removed, in particular the location where these additions and removals occur. For example, a structure might allow new items to be added at only one end. Some structures might allow items to be removed from either end.</p> <p>These variations give rise to some of the most useful data structures in computer science. They appear in many algorithms and can be used to solve a variety of important problems.</p>"},{"location":"c3/s20/","title":"3.20. \u65e0\u5e8f\u5217\u8868\u7684\u62bd\u8c61\u6570\u636e\u7c7b\u578b","text":"<p>3.20. The Unordered List Abstract Data Type</p> \u4e2d\u6587\u82f1\u6587"},{"location":"c3/s21/","title":"3.21. \u7528\u94fe\u8868\u5b9e\u73b0\u65e0\u5e8f\u5217\u8868","text":"<p>3.21. Implementing an Unordered List: Linked Lists</p> \u4e2d\u6587\u82f1\u6587"},{"location":"c3/s21/#3211-\u8282\u70b9\u7c7b","title":"3.21.1. \u8282\u70b9\u7c7b","text":"<p>3.21.1. The Node Class</p> \u4e2d\u6587\u82f1\u6587"},{"location":"c3/s21/#3212-\u65e0\u5e8f\u5217\u8868\u7c7b","title":"3.21.2. \u65e0\u5e8f\u5217\u8868\u7c7b","text":"<p>3.21.2. The UnorderedList Class</p> \u4e2d\u6587\u82f1\u6587"},{"location":"c3/s22/","title":"3.22. \u6709\u5e8f\u5217\u8868\u7684\u62bd\u8c61\u6570\u636e\u7c7b\u578b","text":"<p>3.22. The Ordered List Abstract Data Type</p> \u4e2d\u6587\u82f1\u6587"},{"location":"c3/s23/","title":"3.23. \u5b9e\u73b0\u6709\u5e8f\u5217\u8868","text":"<p>3.23. Implementing an Ordered List</p> \u4e2d\u6587\u82f1\u6587"},{"location":"c3/s23/#3231-\u94fe\u8868\u5206\u6790","title":"3.23.1. \u94fe\u8868\u5206\u6790","text":"<p>3.23.1. Analysis of Linked Lists</p> \u4e2d\u6587\u82f1\u6587"},{"location":"c3/s24/","title":"3.24. \u603b\u7ed3","text":"<p>3.24. Summary</p> \u4e2d\u6587\u82f1\u6587"},{"location":"c3/s25/","title":"3.25. \u5173\u952e\u8bcd\u672f\u8bed","text":"<p>3.25. Key Terms</p> \u4e2d\u6587\u82f1\u6587"},{"location":"c3/s26/","title":"3.26. \u7ec3\u4e60","text":"<p>3.26. Exercises</p> \u4e2d\u6587\u82f1\u6587"},{"location":"c3/s3/","title":"3.3. \u6808","text":"<p>3.3. Stacks</p> \u4e2d\u6587\u82f1\u6587 <p>A stack (sometimes called a push-down stack) is an ordered collection of items where the addition of new items and the removal of existing items always takes place at the same end. This end is commonly referred to as the top. The end opposite the top is known as the base.</p> <p>The base of the stack is significant since items stored in the stack that are closer to the base represent those that have been in the stack the longest. The most recently added item is the one that is in position to be removed first. This ordering principle is sometimes called LIFO, or last in, first out. It provides an ordering based on length of time in the collection. Newer items are near the top, while older items are near the base.</p> <p>Many examples of stacks occur in everyday situations. Almost any cafeteria has a stack of trays or plates where you take the one at the top, uncovering a new tray or plate for the next customer in line. Imagine a stack of books on a desk (<code>Figure 1</code>). The only book whose cover is visible is the one on top. To access others in the stack, we need to remove the ones that are sitting on top of them. <code>Figure 2</code> shows another stack that contains a number of primitive Python data objects.</p> <p> Figure 1: A Stack of Books </p> <p> Figure 2: A Stack of Primitive Python Data Objects </p> <p>One of the most useful properties of stacks can be observed  as items are added and then removed. Assume you start out with a clean desktop. Now place books one at a time on top of each other. You are constructing a stack. Consider what happens when you begin removing books. The order that they are removed is exactly the reverse of the order that they were placed. Stacks are fundamentally important, as they can be used to reverse the order of items. The order of insertion is the reverse of the order of removal. <code>Figure 3</code> shows the Python data object stack as it was created and then again as items are removed. Note the order of the objects.</p> <p> Figure 3: The Reversal Property of Stacks </p> <p>Considering this reversal property, you can perhaps think of examples of stacks that occur as you use your computer. For example, every web browser has a Back button. As you navigate from web page to web page, those pages are placed on a stack (actually it is the URLs that are going on the stack). The current page that you are viewing is on the top and the first page you looked at is at the base. If you click on the Back button, you begin to move in reverse order through the pages.</p> <p>A stack (sometimes called a push-down stack) is an ordered collection of items where the addition of new items and the removal of existing items always takes place at the same end. This end is commonly referred to as the top. The end opposite the top is known as the base.</p> <p>The base of the stack is significant since items stored in the stack that are closer to the base represent those that have been in the stack the longest. The most recently added item is the one that is in position to be removed first. This ordering principle is sometimes called LIFO, or last in, first out. It provides an ordering based on length of time in the collection. Newer items are near the top, while older items are near the base.</p> <p>Many examples of stacks occur in everyday situations. Almost any cafeteria has a stack of trays or plates where you take the one at the top, uncovering a new tray or plate for the next customer in line. Imagine a stack of books on a desk (<code>Figure 1</code>). The only book whose cover is visible is the one on top. To access others in the stack, we need to remove the ones that are sitting on top of them. <code>Figure 2</code> shows another stack that contains a number of primitive Python data objects.</p> <p> Figure 1: A Stack of Books </p> <p> Figure 2: A Stack of Primitive Python Data Objects </p> <p>One of the most useful properties of stacks can be observed  as items are added and then removed. Assume you start out with a clean desktop. Now place books one at a time on top of each other. You are constructing a stack. Consider what happens when you begin removing books. The order that they are removed is exactly the reverse of the order that they were placed. Stacks are fundamentally important, as they can be used to reverse the order of items. The order of insertion is the reverse of the order of removal. <code>Figure 3</code> shows the Python data object stack as it was created and then again as items are removed. Note the order of the objects.</p> <p> Figure 3: The Reversal Property of Stacks </p> <p>Considering this reversal property, you can perhaps think of examples of stacks that occur as you use your computer. For example, every web browser has a Back button. As you navigate from web page to web page, those pages are placed on a stack (actually it is the URLs that are going on the stack). The current page that you are viewing is on the top and the first page you looked at is at the base. If you click on the Back button, you begin to move in reverse order through the pages.</p>"},{"location":"c3/s4/","title":"3.4. \u6808\u7684\u62bd\u8c61\u6570\u636e\u7c7b\u578b","text":"<p>3.4. The Stack Abstract Data Type</p> \u4e2d\u6587\u82f1\u6587 <p>The stack abstract data type is defined by the following structure and operations. A stack is structured, as described above, as an ordered collection of items where items are added to and removed from the end called the top. Stacks are ordered LIFO. The stack operations are given below.</p> <ul> <li> <p><code>Stack()</code> creates a new stack that is empty. It needs no parameters and returns an empty stack.</p> </li> <li> <p><code>push(item)</code> adds a new item to the top of the stack. It needs the item and returns nothing.</p> </li> <li> <p><code>pop()</code> removes the top item from the stack. It needs no parameters and returns the item. The stack is modified.</p> </li> <li> <p><code>peek()</code> returns the top item from the stack but does not remove it. It needs no parameters. The stack is not modified.</p> </li> <li> <p><code>is_empty()</code> tests to see whether the stack is empty. It needs no parameters and returns a boolean value.</p> </li> <li> <p><code>size()</code> returns the number of items on the stack. It needs no parameters and returns an integer.</p> </li> </ul> <p>For example, if <code>s</code> is a stack that has been created and starts out empty, then <code>Table 1</code> shows the results of a sequence of stack operations. Under Stack Contents, the top item is listed at the far right.</p> <p>Table 1: Sample Stack Operations</p> Stack Operation Stack Contents Return Value <code>s.is_empty()</code> <code>[]</code> <code>True</code> <code>s.push(4)</code> <code>[4]</code> <code>s.push('dog')</code> <code>[4, 'dog']</code> <code>s.peek()</code> <code>[4, 'dog']</code> <code>'dog'</code> <code>s.push(True)</code> <code>[4, 'dog', True]</code> <code>s.size()</code> <code>[4, 'dog', True]</code> <code>3</code> <code>s.is_empty()</code> <code>[4, 'dog', True]</code> <code>False</code> <code>s.push(8.4)</code> <code>[4, 'dog', True, 8.4]</code> <code>s.pop()</code> <code>[4, 'dog', True]</code> <code>8.4</code> <code>s.pop()</code> <code>[4, 'dog']</code> <code>True</code> <code>s.size()</code> <code>[4, 'dog']</code> <code>2</code> <p>The stack abstract data type is defined by the following structure and operations. A stack is structured, as described above, as an ordered collection of items where items are added to and removed from the end called the top. Stacks are ordered LIFO. The stack operations are given below.</p> <ul> <li> <p><code>Stack()</code> creates a new stack that is empty. It needs no parameters and returns an empty stack.</p> </li> <li> <p><code>push(item)</code> adds a new item to the top of the stack. It needs the item and returns nothing.</p> </li> <li> <p><code>pop()</code> removes the top item from the stack. It needs no parameters and returns the item. The stack is modified.</p> </li> <li> <p><code>peek()</code> returns the top item from the stack but does not remove it. It needs no parameters. The stack is not modified.</p> </li> <li> <p><code>is_empty()</code> tests to see whether the stack is empty. It needs no parameters and returns a boolean value.</p> </li> <li> <p><code>size()</code> returns the number of items on the stack. It needs no parameters and returns an integer.</p> </li> </ul> <p>For example, if <code>s</code> is a stack that has been created and starts out empty, then <code>Table 1</code> shows the results of a sequence of stack operations. Under Stack Contents, the top item is listed at the far right.</p> <p>Table 1: Sample Stack Operations</p> Stack Operation Stack Contents Return Value <code>s.is_empty()</code> <code>[]</code> <code>True</code> <code>s.push(4)</code> <code>[4]</code> <code>s.push('dog')</code> <code>[4, 'dog']</code> <code>s.peek()</code> <code>[4, 'dog']</code> <code>'dog'</code> <code>s.push(True)</code> <code>[4, 'dog', True]</code> <code>s.size()</code> <code>[4, 'dog', True]</code> <code>3</code> <code>s.is_empty()</code> <code>[4, 'dog', True]</code> <code>False</code> <code>s.push(8.4)</code> <code>[4, 'dog', True, 8.4]</code> <code>s.pop()</code> <code>[4, 'dog', True]</code> <code>8.4</code> <code>s.pop()</code> <code>[4, 'dog']</code> <code>True</code> <code>s.size()</code> <code>[4, 'dog']</code> <code>2</code>"},{"location":"c3/s5/","title":"3.5. \u7528Python\u5b9e\u73b0\u6808","text":"<p>3.5. Implementing a Stack in Python</p> <p>\u539f\u6587: https://runestone.academy/ns/books/published/pythonds3/BasicDS/ImplementingaStackinPython.html?mode=browsing</p> \u4e2d\u6587\u82f1\u6587 <p>Now that we have clearly defined the stack as an abstract data type, we will turn our attention to using Python to implement the stack. Recall that when we give an abstract data type a physical implementation, we refer to the implementation as a data structure.</p> <p>As we described in Chapter 1, in Python, as in any object-oriented programming language, the implementation of choice for an abstract data type such as a stack is the creation of a new class. The stack operations are implemented as methods. Further, to implement a stack, which is a collection of elements, it makes sense to utilize the power and simplicity of the primitive collections provided by Python. We will use a list.</p> <p>Recall that the list class in Python provides an ordered collection mechanism and a set of methods. For example, if we have the list [2, 5, 3, 6, 7, 4], we need only to decide which end of the list will be considered the top of the stack and which will be the base. Once that decision is made, the operations can be implemented using the list methods such as <code>append</code> and <code>pop</code>.</p> <p>The following stack implementation (<code>ActiveCode 1</code>) assumes that the end of the list will hold the top element of the stack. As the stack grows (as <code>push</code> operations occur), new items will be added on the end of the list. <code>pop</code> operations will manipulate that same end. </p> Activity: 3.5.1 Implementing a Stack class using Python lists<pre><code>class Stack:\n    \"\"\"Stack implementation as a list\"\"\"\n\n    def __init__(self):\n        \"\"\"Create new stack\"\"\"\n        self._items = []\n\n    def is_empty(self):\n        \"\"\"Check if the stack is empty\"\"\"\n        return not bool(self._items)\n\n    def push(self, item):\n        \"\"\"Add an item to the stack\"\"\"\n        self._items.append(item)\n\n    def pop(self):\n        \"\"\"Remove an item from the stack\"\"\"\n        return self._items.pop()\n\n    def peek(self):\n        \"\"\"Get the value of the top item in the stack\"\"\"\n        return self._items[-1]\n\n    def size(self):\n        \"\"\"Get the number of items in the stack\"\"\"\n        return len(self._items)\n</code></pre> <p>Remember that nothing happens when we click the <code>run</code> button other than the definition of the class.  We must create a <code>Stack</code> object and then use it. <code>ActiveCode 2</code> shows the <code>Stack</code> class in action as we perform the sequence of operations from <code>Table 1</code>.  Notice that the definition of the <code>Stack</code> class is imported from the <code>pythonds3</code> module  that is included with the materials for this book or can be downloaded from the Python Package Index.</p> <p>Note</p> <p>The <code>pythonds3</code> module contains implementations of all data structures discussed in this book. It is structured according to the sections: basic, trees, and graphs. The module can be downloaded from GitHub or installed from the command line as follows:</p> <p><code>python3 -m pip install -U pythonds3</code></p> Activity: 3.5.2 ActiveCode<pre><code>from pythonds3.basic import Stack\n\ns = Stack()\n\nprint(s.is_empty())\ns.push(4)\ns.push(\"dog\")\nprint(s.peek())\ns.push(True)\nprint(s.size())\nprint(s.is_empty())\ns.push(8.4)\nprint(s.pop())\nprint(s.pop())\nprint(s.size())\n</code></pre> <p>It is important to note that we could have chosen to implement the stack using a list where the top is at the beginning instead of at the end. In this case, the previous <code>pop</code> and <code>append</code> methods would no longer work and we would have to index position 0 (the first item in the list) explicitly using <code>pop</code> and <code>insert</code>. The implementation is shown in <code>CodeLens 1</code>.</p> Activity: CodeLens Alternative Implementation of the Stack class (stack_cl_1)<pre><code>class Stack:\n    def __init__(self):\n        self.items = []\n\n    def is_empty(self):\n        return self.items == []\n\n    def push(self, item):\n        self.items.insert(0, item)\n\n    def pop(self):\n        return self.items.pop(0)\n\n    def peek(self):\n        return self.items[0]\n\n    def size(self):\n        return len(self.items)\n\ns = Stack()\ns.push(\"hello\")\ns.push(\"true\")\nprint(s.pop())\n</code></pre> <p>This ability to change the physical implementation of an abstract data type while maintaining the logical characteristics is an example of abstraction at work. However, even though the stack will work either way, if we consider the performance of the two implementations, there is definitely a difference. Recall that the <code>append()</code> and <code>pop()</code> operations were both \\(O(1)\\). This means that the first implementation will perform <code>push</code> and <code>pop</code> in constant time no matter how many items are on the stack. The performance of the second implementation suffers in that the <code>insert(0)</code> and <code>pop(0)</code> operations will both require \\(O(n)\\) for a stack of size <code>n</code>. Clearly, even though the implementations are logically equivalent, they would have very different timings when performing benchmark testing.</p> <p>Self Check</p> Activity: 3.5.4 Multiple ChoiceActivity: 3.5.5 Multiple Choice <p>Given the following sequence of stack operations, what is the top item on the stack when the sequence is complete?</p> <p>:answer_a: \"x\" :answer_b: \"y\" :answer_c: \"z\" :answer_d: The stack is empty</p> <p>:correct: c</p> <p>:feedback_a: Remember that a stack is built from the bottom up. :feedback_b: Remember that a stack is built from the bottom up. :feedback_c: Good job. :feedback_d: Remember that a stack is built from the bottom up.</p> <p>Given the following sequence of stack operations, what is the top item on the stack when the sequence is complete?</p> <pre><code>m = Stack()\nm.push(\"x\")\nm.push(\"y\")\nm.pop()\nm.push(\"z\")\nm.peek()\n</code></pre> <ul> <li> a: \"x\"</li> <li> b: the stack is empty</li> <li> c: an error will occur</li> <li> d: \"z\"</li> </ul> <p>correct: c</p> <ul> <li>feedback a: You may want to check out the docs for isEmpty</li> <li>feedback b: There is an odd number of things on the stack but each time through the loop 2 things are popped.</li> <li>feedback c: Good Job.</li> <li>feedback d: You may want to check out the docs for isEmpty</li> </ul> <pre><code>m = Stack()\nm.push(\"x\")\nm.push(\"y\")\nm.push(\"z\")\nwhile not m.is_empty():\n    m.pop()\n    m.pop()\n</code></pre> <p>Write a function <code>rev_string(my_str)</code> that uses a stack to reverse the characters in a string.</p> <pre><code>from test import testEqual\nfrom pythonds3.basic import Stack\n\ndef rev_string(my_str):\n    # your code here\n\ntestEqual(rev_string(\"apple\"), \"elppa\")\ntestEqual(rev_string(\"x\"), \"x\")\ntestEqual(rev_string(\"1234567890\"), \"0987654321\")\n</code></pre> <p>Now that we have clearly defined the stack as an abstract data type, we will turn our attention to using Python to implement the stack. Recall that when we give an abstract data type a physical implementation, we refer to the implementation as a data structure.</p> <p>As we described in Chapter 1, in Python, as in any object-oriented programming language, the implementation of choice for an abstract data type such as a stack is the creation of a new class. The stack operations are implemented as methods. Further, to implement a stack, which is a collection of elements, it makes sense to utilize the power and simplicity of the primitive collections provided by Python. We will use a list.</p> <p>Recall that the list class in Python provides an ordered collection mechanism and a set of methods. For example, if we have the list [2, 5, 3, 6, 7, 4], we need only to decide which end of the list will be considered the top of the stack and which will be the base. Once that decision is made, the operations can be implemented using the list methods such as <code>append</code> and <code>pop</code>.</p> <p>The following stack implementation (<code>ActiveCode 1</code>) assumes that the end of the list will hold the top element of the stack. As the stack grows (as <code>push</code> operations occur), new items will be added on the end of the list. <code>pop</code> operations will manipulate that same end. </p> Activity: 3.5.1 Implementing a Stack class using Python lists<pre><code>class Stack:\n    \"\"\"Stack implementation as a list\"\"\"\n\n    def __init__(self):\n        \"\"\"Create new stack\"\"\"\n        self._items = []\n\n    def is_empty(self):\n        \"\"\"Check if the stack is empty\"\"\"\n        return not bool(self._items)\n\n    def push(self, item):\n        \"\"\"Add an item to the stack\"\"\"\n        self._items.append(item)\n\n    def pop(self):\n        \"\"\"Remove an item from the stack\"\"\"\n        return self._items.pop()\n\n    def peek(self):\n        \"\"\"Get the value of the top item in the stack\"\"\"\n        return self._items[-1]\n\n    def size(self):\n        \"\"\"Get the number of items in the stack\"\"\"\n        return len(self._items)\n</code></pre> <p>Remember that nothing happens when we click the <code>run</code> button other than the definition of the class.  We must create a <code>Stack</code> object and then use it. <code>ActiveCode 2</code> shows the <code>Stack</code> class in action as we perform the sequence of operations from <code>Table 1</code>.  Notice that the definition of the <code>Stack</code> class is imported from the <code>pythonds3</code> module  that is included with the materials for this book or can be downloaded from the Python Package Index.</p> <p>Note</p> <p>The <code>pythonds3</code> module contains implementations of all data structures discussed in this book. It is structured according to the sections: basic, trees, and graphs. The module can be downloaded from GitHub or installed from the command line as follows:</p> <p><code>python3 -m pip install -U pythonds3</code></p> Activity: 3.5.2 ActiveCode<pre><code>from pythonds3.basic import Stack\n\ns = Stack()\n\nprint(s.is_empty())\ns.push(4)\ns.push(\"dog\")\nprint(s.peek())\ns.push(True)\nprint(s.size())\nprint(s.is_empty())\ns.push(8.4)\nprint(s.pop())\nprint(s.pop())\nprint(s.size())\n</code></pre> <p>It is important to note that we could have chosen to implement the stack using a list where the top is at the beginning instead of at the end. In this case, the previous <code>pop</code> and <code>append</code> methods would no longer work and we would have to index position 0 (the first item in the list) explicitly using <code>pop</code> and <code>insert</code>. The implementation is shown in <code>CodeLens 1</code>.</p> Activity: CodeLens Alternative Implementation of the Stack class (stack_cl_1)<pre><code>class Stack:\n    def __init__(self):\n        self.items = []\n\n    def is_empty(self):\n        return self.items == []\n\n    def push(self, item):\n        self.items.insert(0, item)\n\n    def pop(self):\n        return self.items.pop(0)\n\n    def peek(self):\n        return self.items[0]\n\n    def size(self):\n        return len(self.items)\n\ns = Stack()\ns.push(\"hello\")\ns.push(\"true\")\nprint(s.pop())\n</code></pre> <p>This ability to change the physical implementation of an abstract data type while maintaining the logical characteristics is an example of abstraction at work. However, even though the stack will work either way, if we consider the performance of the two implementations, there is definitely a difference. Recall that the <code>append()</code> and <code>pop()</code> operations were both \\(O(1)\\). This means that the first implementation will perform <code>push</code> and <code>pop</code> in constant time no matter how many items are on the stack. The performance of the second implementation suffers in that the <code>insert(0)</code> and <code>pop(0)</code> operations will both require \\(O(n)\\) for a stack of size <code>n</code>. Clearly, even though the implementations are logically equivalent, they would have very different timings when performing benchmark testing.</p> <p>Self Check</p> Activity: 3.5.4 Multiple ChoiceActivity: 3.5.5 Multiple Choice <p>Given the following sequence of stack operations, what is the top item on the stack when the sequence is complete?</p> <p>:answer_a: \"x\" :answer_b: \"y\" :answer_c: \"z\" :answer_d: The stack is empty</p> <p>:correct: c</p> <p>:feedback_a: Remember that a stack is built from the bottom up. :feedback_b: Remember that a stack is built from the bottom up. :feedback_c: Good job. :feedback_d: Remember that a stack is built from the bottom up.</p> <p>Given the following sequence of stack operations, what is the top item on the stack when the sequence is complete?</p> <pre><code>m = Stack()\nm.push(\"x\")\nm.push(\"y\")\nm.pop()\nm.push(\"z\")\nm.peek()\n</code></pre> <ul> <li> a: \"x\"</li> <li> b: the stack is empty</li> <li> c: an error will occur</li> <li> d: \"z\"</li> </ul> <p>correct: c</p> <ul> <li>feedback a: You may want to check out the docs for isEmpty</li> <li>feedback b: There is an odd number of things on the stack but each time through the loop 2 things are popped.</li> <li>feedback c: Good Job.</li> <li>feedback d: You may want to check out the docs for isEmpty</li> </ul> <pre><code>m = Stack()\nm.push(\"x\")\nm.push(\"y\")\nm.push(\"z\")\nwhile not m.is_empty():\n    m.pop()\n    m.pop()\n</code></pre> <p>Write a function <code>rev_string(my_str)</code> that uses a stack to reverse the characters in a string.</p> <pre><code>from test import testEqual\nfrom pythonds3.basic import Stack\n\ndef rev_string(my_str):\n    # your code here\n\ntestEqual(rev_string(\"apple\"), \"elppa\")\ntestEqual(rev_string(\"x\"), \"x\")\ntestEqual(rev_string(\"1234567890\"), \"0987654321\")\n</code></pre>"},{"location":"c3/s6/","title":"3.6. \u7b80\u5355\u7684\u62ec\u53f7\u5339\u914d","text":"<p>3.6. Simple Balanced Parentheses</p> <p>\u539f\u6587: https://runestone.academy/ns/books/published/pythonds3/BasicDS/SimpleBalancedParentheses.html?mode=browsing</p> \u4e2d\u6587\u82f1\u6587 <p>We now turn our attention to using stacks to solve real computer science problems. You have no doubt written arithmetic expressions such as</p> \\[(5 + 6) * (7 + 8) / (4 + 3)\\] <p>where parentheses are used to order the performance of operations. You may also have some experience programming in a language such as Lisp with constructs like</p> <pre><code>(defun square(n)\n        (* n n))\n</code></pre> <p>This defines a function called <code>square</code> that will return the square of its argument <code>n</code>. Lisp is notorious for using lots and lots of parentheses.</p> <p>In both of these examples, parentheses must appear in a balanced fashion. Balanced parentheses means that each opening symbol has a corresponding closing symbol and the pairs of parentheses are properly nested. Consider the following correctly balanced strings of parentheses:</p> <pre><code>(()()()())\n\n(((())))\n\n(()((())()))\n</code></pre> <p>Compare those with the following, which are not balanced:</p> <pre><code>    ((((((())\n\n    ()))\n\n    (()()(()\n</code></pre> <p>The ability to differentiate between parentheses that are correctly balanced and those that are unbalanced is an important part of recognizing many programming language structures.</p> <p>The challenge then is to write an algorithm that will read a string of parentheses from left to right and decide whether the symbols are balanced. To solve this problem we need to make an important observation. As you process symbols from left to right, the most recent opening parenthesis must match the next closing symbol (see <code>Figure 4</code>). Also, the first opening symbol processed may have to wait until the very last symbol for its match. Closing symbols match opening symbols in the reverse order of their appearance; they match from the inside out. This is a clue that stacks can be used to solve the problem.</p>    ![Image title](./imgs/simpleparcheck.png)   Figure 4: Matching Parentheses <p>Once you agree that a stack is the appropriate data structure for keeping the parentheses, the statement of the algorithm is straightforward. Starting with an empty stack, process the parenthesis strings from left to right. If a symbol is an opening parenthesis, push it on the stack as a signal that a corresponding closing symbol needs to appear later. If, on the other hand, a symbol is a closing parenthesis, pop the stack. As long as it is possible to pop the stack to match every closing symbol, the parentheses remain balanced. If at any time there is no opening symbol on the stack to match a closing symbol, the string is not balanced properly. At the end of the string, when all symbols have been processed, the stack should be empty. The Python code to implement this algorithm is shown in <code>ActiveCode 1</code>.</p> Activity: 3.6.1 Solving the Balanced Parentheses Problem<pre><code>from pythonds3.basic import Stack\n\n\ndef par_checker(symbol_string):\n    s = Stack()\n    for symbol in symbol_string:\n        if symbol == \"(\":\n            s.push(symbol)\n        else:\n            if s.is_empty():\n                return False\n            else:\n                s.pop()\n\n    return s.is_empty()\n\n\nprint(par_checker(\"((()))\"))  # expected True\nprint(par_checker(\"((()()))\"))  # expected True\nprint(par_checker(\"(()\"))  # expected False\nprint(par_checker(\")(\"))  # expected False\n</code></pre> <p>This function, <code>par_checker</code>, assumes that a <code>Stack</code> class is available and returns a Boolean result as to whether the string of parentheses is balanced. If the current symbol is <code>(</code>, then it is pushed on the stack (lines 7--8). Note also in line 13 that <code>pop</code> simply removes a symbol from the stack. The returned value is not used since we know it must be an opening symbol seen earlier. If the stack becomes empty before we reach the end of the <code>symbol_string</code>, then there are too many closing parentheses and the string is not balanced, so we immediately return <code>False</code> (line 11). At the end (line 15), the string represents a correctly balanced sequence of parentheses as long as the stack has been completely cleaned off.</p>"},{"location":"c3/s7/","title":"3.7. \u7b26\u53f7\u5339\u914d\uff08\u4e00\u822c\u60c5\u51b5\uff09","text":"<p>3.7. Balanced Symbols (A General Case)</p> <p>\u539f\u6587: https://runestone.academy/ns/books/published/pythonds3/BasicDS/BalancedSymbolsAGeneralCase.html?mode=browsing</p> \u4e2d\u6587\u82f1\u6587 <p>The balanced parentheses problem shown above is a specific case of a more general situation that arises in many programming languages. The general problem of balancing and nesting different kinds of opening and closing symbols occurs frequently. For example, in Python square brackets, <code>[</code> and <code>]</code>, are used for lists; curly braces, <code>{</code> and <code>}</code>, are used for sets and dictionaries; and parentheses, <code>(</code> and <code>)</code>, are used for tuples and arithmetic expressions. It is possible to mix symbols as long as each maintains its own open and close relationship. Strings of symbols such as</p> <pre><code>{ { ( [ ] [ ] ) } ( ) }\n\n[ [ { { ( ( ) ) } } ] ]\n\n[ ] [ ] [ ] ( ) { }\n</code></pre> <p>are properly balanced in that not only does each opening symbol have a corresponding closing symbol, but the types of symbols match as well.</p> <p>Compare those with the following strings that are not balanced:</p> <pre><code>( [ ) ]\n\n( ( ( ) ] ) )\n\n[ { ( ) ]\n</code></pre> <p>The simple parentheses checker from the previous section can easily be extended to handle these new types of symbols. Recall that each opening symbol is simply pushed on the stack to wait for the matching closing symbol to appear later in the sequence. When a closing symbol does appear, the only difference is that we must check to be sure that it correctly matches the type of the opening symbol on top of the stack. If the two symbols do not match, the string is not balanced. Once again, if the entire string is processed and nothing is left on the stack, the string is correctly balanced.</p> <p>The Python program to implement this is shown in <code>ActiveCode 1</code>. The only change appears in line 13 where we call a helper function, <code>matches</code>, to assist with symbol-matching. Each symbol that is removed from the stack must be checked to see that it matches the current closing symbol. If a mismatch occurs, the balance checker returns <code>False</code> immediately.</p> Activity: 3.7.1 Solving the General Balanced Symbol Problem<pre><code>from pythonds3.basic import Stack\n\n\ndef balance_checker(symbol_string):\n    s = Stack()\n    for symbol in symbol_string:\n        if symbol in \"([{\":\n            s.push(symbol)\n        else:\n            if s.is_empty():\n                return False\n            else:\n                if not matches(s.pop(), symbol):\n                    return False\n\n    return s.is_empty()\n\ndef matches(sym_left, sym_right):\n    all_lefts = \"([{\"\n    all_rights = \")]}\"\n    return all_lefts.index(sym_left) == all_rights.index(sym_right)\n\n\nprint(balance_checker('{({([][])}())}'))\nprint(balance_checker('[{()]'))\n</code></pre> <p>These two examples show that stacks are very important data structures for the processing of language constructs in computer science. Almost any notation you can think of has some type of nested symbol that must be matched in a balanced order. There are a number of other important uses for stacks in computer science. We will continue to explore them in the next sections.</p> <p>The balanced parentheses problem shown above is a specific case of a more general situation that arises in many programming languages. The general problem of balancing and nesting different kinds of opening and closing symbols occurs frequently. For example, in Python square brackets, <code>[</code> and <code>]</code>, are used for lists; curly braces, <code>{</code> and <code>}</code>, are used for sets and dictionaries; and parentheses, <code>(</code> and <code>)</code>, are used for tuples and arithmetic expressions. It is possible to mix symbols as long as each maintains its own open and close relationship. Strings of symbols such as</p> <pre><code>{ { ( [ ] [ ] ) } ( ) }\n\n[ [ { { ( ( ) ) } } ] ]\n\n[ ] [ ] [ ] ( ) { }\n</code></pre> <p>are properly balanced in that not only does each opening symbol have a corresponding closing symbol, but the types of symbols match as well.</p> <p>Compare those with the following strings that are not balanced:</p> <pre><code>( [ ) ]\n\n( ( ( ) ] ) )\n\n[ { ( ) ]\n</code></pre> <p>The simple parentheses checker from the previous section can easily be extended to handle these new types of symbols. Recall that each opening symbol is simply pushed on the stack to wait for the matching closing symbol to appear later in the sequence. When a closing symbol does appear, the only difference is that we must check to be sure that it correctly matches the type of the opening symbol on top of the stack. If the two symbols do not match, the string is not balanced. Once again, if the entire string is processed and nothing is left on the stack, the string is correctly balanced.</p> <p>The Python program to implement this is shown in <code>ActiveCode 1</code>. The only change appears in line 13 where we call a helper function, <code>matches</code>, to assist with symbol-matching. Each symbol that is removed from the stack must be checked to see that it matches the current closing symbol. If a mismatch occurs, the balance checker returns <code>False</code> immediately.</p> Activity: 3.7.1 Solving the General Balanced Symbol Problem<pre><code>from pythonds3.basic import Stack\n\n\ndef balance_checker(symbol_string):\n    s = Stack()\n    for symbol in symbol_string:\n        if symbol in \"([{\":\n            s.push(symbol)\n        else:\n            if s.is_empty():\n                return False\n            else:\n                if not matches(s.pop(), symbol):\n                    return False\n\n    return s.is_empty()\n\ndef matches(sym_left, sym_right):\n    all_lefts = \"([{\"\n    all_rights = \")]}\"\n    return all_lefts.index(sym_left) == all_rights.index(sym_right)\n\n\nprint(balance_checker('{({([][])}())}'))\nprint(balance_checker('[{()]'))\n</code></pre> <p>These two examples show that stacks are very important data structures for the processing of language constructs in computer science. Almost any notation you can think of has some type of nested symbol that must be matched in a balanced order. There are a number of other important uses for stacks in computer science. We will continue to explore them in the next sections.</p>"},{"location":"c3/s8/","title":"3.8. \u5c06\u5341\u8fdb\u5236\u6570\u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\u6570","text":"<p>3.8. Converting Decimal Numbers to Binary Numbers</p> <p>\u539f\u6587: https://runestone.academy/ns/books/published/pythonds3/BasicDS/ConvertingDecimalNumberstoBinaryNumbers.html?mode=browsing</p> \u4e2d\u6587\u82f1\u6587 <p>In your study of computer science, you have probably been exposed in one way or another to the idea of a binary number. Binary representation is important in computer science since all values stored within a computer exist as a string of binary digits, a string of 0s and 1s. Without the ability to convert back and forth between common representations and binary numbers, we would need to interact with computers in very awkward ways.</p> <p>Integer values are common data items. They are used in computer programs and computation all the time. We learn about them in math class and of course represent them using the decimal number system, or base 10. The decimal number \\(233_{10}\\) and its corresponding binary equivalent \\(11101001_{2}\\) are interpreted respectively as</p> \\[2\\times10^{2} + 3\\times10^{1} + 3\\times10^{0}\\] <p>and</p> \\[1\\times2^{7} + 1\\times2^{6} + 1\\times2^{5} + 0\\times2^{4} + 1\\times2^{3} + 0\\times2^{2} + 0\\times2^{1} + 1\\times2^{0}\\] <p>But how can we easily convert integer values into binary numbers? The answer is an algorithm called Divide by 2 that uses a stack to keep track of the digits for the binary result.</p> <p>The Divide by 2 algorithm assumes that we start with an integer greater than 0. A simple iteration then continually divides the decimal number by 2 and keeps track of the remainder. The first division by 2 gives information as to whether the value is even or odd. An even value will  have a remainder of 0 and will have the digit 0 in the ones place. An odd value will have a remainder of 1 and will have the digit 1 in the ones place. We think about building our binary number as a sequence of digits; the first remainder we compute will actually be the last digit in the sequence. As shown in <code>Figure 5</code>, we again see the reversal property that signals that a stack is likely to be the appropriate data structure for solving the problem.</p> <p> Figure 5: Decimal-to-Binary Conversion </p> <p>The Python code in <code>ActiveCode 1</code> implements the Divide by 2 algorithm. The function <code>divide_by_2</code> takes an argument that is a decimal number and repeatedly divides it by 2. Line 8 uses the built-in modulo operator, <code>%</code>, to extract the remainder and line 9 then pushes it on the stack. After the division process reaches 0, a binary string is constructed in lines 12-14. Line 12 creates an empty string. The binary digits are popped from the stack one at a time and appended to the right-hand end of the string. The binary string is then returned.</p> Activity: 3.8.1 Converting from Decimal to Binary<pre><code>from pythonds3.basic import Stack\n\n\ndef divide_by_2(decimal_num):\n    rem_stack = Stack()\n\n    while decimal_num &gt; 0:\n        rem = decimal_num % 2\n        rem_stack.push(rem)\n        decimal_num = decimal_num // 2\n\n    bin_string = \"\"\n    while not rem_stack.is_empty():\n        bin_string = bin_string + str(rem_stack.pop())\n\n    return bin_string\n\nprint(divide_by_2(42))\nprint(divide_by_2(31))\n</code></pre> <p>The algorithm for binary conversion can easily be extended to perform the conversion for any base. In computer science it is common to use a number of different encodings. The most common of these are binary, octal (base 8), and hexadecimal (base 16).</p> <p>The decimal number \\(233\\) and its corresponding octal and hexadecimal equivalents \\(351_{8}\\) and \\(E9_{16}\\) are interpreted as</p> <p>\\(3 \\times 8^{2} + 5 \\times 8^{1} + 1 \\times 8^{0}\\)</p> <p>and</p> <p>\\(14 \\times 16^{1} + 9 \\times 16^{0}\\)</p> <p>The function <code>divide_by_2</code> can be modified to accept not only a decimal value but also a base for the intended conversion. The \u201cDivide by 2\u201d idea is simply replaced with a more general \u201cDivide by base.\u201d A new function called <code>base_converter</code>, shown in <code>ActiveCode 2</code>, takes a decimal number and any base between 2 and 16 as parameters. The remainders are still pushed onto the stack until the value being converted becomes 0. The same left-to-right string construction technique can be used with one slight change. Base 2 through base 10 numbers need a maximum of 10 digits, so the typical digit characters 0  through 9 work fine. The problem comes when we go beyond base 10. We can no longer simply use the remainders, as they are themselves represented as two-digit decimal numbers. Instead we need to create a set of digits that can be used to represent those remainders beyond 9.</p> Activity: 3.8.2 Converting from Decimal to any Base<pre><code>from pythonds3.basic import Stack\n\n\ndef base_converter(decimal_num, base):\n    digits = \"0123456789ABCDEF\"\n    rem_stack = Stack()\n\n    while decimal_num &gt; 0:\n        rem = decimal_num % base\n        rem_stack.push(rem)\n        decimal_num = decimal_num // base\n\n    new_string = \"\"\n    while not rem_stack.is_empty():\n        new_string = new_string + digits[rem_stack.pop()]\n\n    return new_string\n\nprint(base_converter(25, 2))\nprint(base_converter(25, 16))\n</code></pre> <p>A solution to this problem is to extend the digit set to include some alphabet characters. For example, hexadecimal uses the ten decimal digits along with the first six alphabet characters for the 16 digits. To implement this, a digit string is created (line 5 in <code>Listing 6</code>) that stores the digits in their corresponding positions. 0 is at position 0, 1 is at position 1, A is at position 10, B is at position 11, and so on. When a remainder is removed from the stack, it can be used to index into the digit string and the correct resulting digit can be appended to the answer. For example, if the remainder 13 is removed from the stack, the digit D is appended to the resulting string.</p> <p>Self Check</p> Activity: 3.8.3 Fill in the BlankActivity: 3.8.4 Fill in the BlankActivity: 3.8.5 Fill in the Blank <p>What is value of 25 expressed as an octal number?</p> <p>|blank|</p> <ul> <li>:31: Correct.</li> <li> Incorrect</li> </ul> <p>What is value of 256 expressed as a hexidecimal number?</p> <p>|blank|</p> <ul> <li> Correct.</li> <li> Incorrect.</li> </ul> <p>What is value of 26 expressed in base 26?</p> <p>|blank|</p> <ul> <li>:10: Correct.</li> <li> You may need to modify the baseConverter function, or simply find a pattern in the conversion of bases.</li> </ul> <p>In your study of computer science, you have probably been exposed in one way or another to the idea of a binary number. Binary representation is important in computer science since all values stored within a computer exist as a string of binary digits, a string of 0s and 1s. Without the ability to convert back and forth between common representations and binary numbers, we would need to interact with computers in very awkward ways.</p> <p>Integer values are common data items. They are used in computer programs and computation all the time. We learn about them in math class and of course represent them using the decimal number system, or base 10. The decimal number \\(233_{10}\\) and its corresponding binary equivalent \\(11101001_{2}\\) are interpreted respectively as</p> \\[2\\times10^{2} + 3\\times10^{1} + 3\\times10^{0}\\] <p>and</p> \\[1\\times2^{7} + 1\\times2^{6} + 1\\times2^{5} + 0\\times2^{4} + 1\\times2^{3} + 0\\times2^{2} + 0\\times2^{1} + 1\\times2^{0}\\] <p>But how can we easily convert integer values into binary numbers? The answer is an algorithm called Divide by 2 that uses a stack to keep track of the digits for the binary result.</p> <p>The Divide by 2 algorithm assumes that we start with an integer greater than 0. A simple iteration then continually divides the decimal number by 2 and keeps track of the remainder. The first division by 2 gives information as to whether the value is even or odd. An even value will  have a remainder of 0 and will have the digit 0 in the ones place. An odd value will have a remainder of 1 and will have the digit 1 in the ones place. We think about building our binary number as a sequence of digits; the first remainder we compute will actually be the last digit in the sequence. As shown in <code>Figure 5</code>, we again see the reversal property that signals that a stack is likely to be the appropriate data structure for solving the problem.</p> <p> Figure 5: Decimal-to-Binary Conversion </p> <p>The Python code in <code>ActiveCode 1</code> implements the Divide by 2 algorithm. The function <code>divide_by_2</code> takes an argument that is a decimal number and repeatedly divides it by 2. Line 8 uses the built-in modulo operator, <code>%</code>, to extract the remainder and line 9 then pushes it on the stack. After the division process reaches 0, a binary string is constructed in lines 12-14. Line 12 creates an empty string. The binary digits are popped from the stack one at a time and appended to the right-hand end of the string. The binary string is then returned.</p> Activity: 3.8.1 Converting from Decimal to Binary<pre><code>from pythonds3.basic import Stack\n\n\ndef divide_by_2(decimal_num):\n    rem_stack = Stack()\n\n    while decimal_num &gt; 0:\n        rem = decimal_num % 2\n        rem_stack.push(rem)\n        decimal_num = decimal_num // 2\n\n    bin_string = \"\"\n    while not rem_stack.is_empty():\n        bin_string = bin_string + str(rem_stack.pop())\n\n    return bin_string\n\nprint(divide_by_2(42))\nprint(divide_by_2(31))\n</code></pre> <p>The algorithm for binary conversion can easily be extended to perform the conversion for any base. In computer science it is common to use a number of different encodings. The most common of these are binary, octal (base 8), and hexadecimal (base 16).</p> <p>The decimal number \\(233\\) and its corresponding octal and hexadecimal equivalents \\(351_{8}\\) and \\(E9_{16}\\) are interpreted as</p> <p>\\(3 \\times 8^{2} + 5 \\times 8^{1} + 1 \\times 8^{0}\\)</p> <p>and</p> <p>\\(14 \\times 16^{1} + 9 \\times 16^{0}\\)</p> <p>The function <code>divide_by_2</code> can be modified to accept not only a decimal value but also a base for the intended conversion. The \u201cDivide by 2\u201d idea is simply replaced with a more general \u201cDivide by base.\u201d A new function called <code>base_converter</code>, shown in <code>ActiveCode 2</code>, takes a decimal number and any base between 2 and 16 as parameters. The remainders are still pushed onto the stack until the value being converted becomes 0. The same left-to-right string construction technique can be used with one slight change. Base 2 through base 10 numbers need a maximum of 10 digits, so the typical digit characters 0  through 9 work fine. The problem comes when we go beyond base 10. We can no longer simply use the remainders, as they are themselves represented as two-digit decimal numbers. Instead we need to create a set of digits that can be used to represent those remainders beyond 9.</p> Activity: 3.8.2 Converting from Decimal to any Base<pre><code>from pythonds3.basic import Stack\n\n\ndef base_converter(decimal_num, base):\n    digits = \"0123456789ABCDEF\"\n    rem_stack = Stack()\n\n    while decimal_num &gt; 0:\n        rem = decimal_num % base\n        rem_stack.push(rem)\n        decimal_num = decimal_num // base\n\n    new_string = \"\"\n    while not rem_stack.is_empty():\n        new_string = new_string + digits[rem_stack.pop()]\n\n    return new_string\n\nprint(base_converter(25, 2))\nprint(base_converter(25, 16))\n</code></pre> <p>A solution to this problem is to extend the digit set to include some alphabet characters. For example, hexadecimal uses the ten decimal digits along with the first six alphabet characters for the 16 digits. To implement this, a digit string is created (line 5 in <code>Listing 6</code>) that stores the digits in their corresponding positions. 0 is at position 0, 1 is at position 1, A is at position 10, B is at position 11, and so on. When a remainder is removed from the stack, it can be used to index into the digit string and the correct resulting digit can be appended to the answer. For example, if the remainder 13 is removed from the stack, the digit D is appended to the resulting string.</p> <p>Self Check</p> Activity: 3.8.3 Fill in the BlankActivity: 3.8.4 Fill in the BlankActivity: 3.8.5 Fill in the Blank <p>What is value of 25 expressed as an octal number?</p> <p>|blank|</p> <ul> <li>:31: Correct.</li> <li> Incorrect</li> </ul> <p>What is value of 256 expressed as a hexidecimal number?</p> <p>|blank|</p> <ul> <li> Correct.</li> <li> Incorrect.</li> </ul> <p>What is value of 26 expressed in base 26?</p> <p>|blank|</p> <ul> <li>:10: Correct.</li> <li> You may need to modify the baseConverter function, or simply find a pattern in the conversion of bases.</li> </ul>"},{"location":"c3/s9/","title":"3.9. \u4e2d\u7f00\u3001\u524d\u7f00\u548c\u540e\u7f00\u8868\u8fbe\u5f0f","text":"<p>3.9. Infix, Prefix, and Postfix Expressions</p> <p>\u539f\u6587: https://runestone.academy/ns/books/published/pythonds3/BasicDS/InfixPrefixandPostfixExpressions.html?mode=browsing</p> \u4e2d\u6587\u82f1\u6587 <p>When you write an arithmetic expression such as B \u00b7 C, the form of the expression provides you with information so that you can interpret it correctly. In this case we know that the variable B is being multiplied by the variable C since the multiplication operator \u00b7 appears between them in the expression. This type of notation is referred to as infix since the operator is in between the two operands that it is working on.</p> <p>Consider another infix example, A + B \u00b7 C. The operators + and \u00b7 still appear between the operands, but there is a problem. Which operands do they work on? Does the + work on A and B, or does the \u00b7 take B and C? The expression seems ambiguous.</p> <p>In fact, you have been reading and writing these types of expressions for a long time and they do not cause you any problem. The reason for this is that you know something about the operators + and \u00b7. Each operator has a precedence level. Operators of higher precedence are used before operators of lower precedence. The only thing that can change that order is the presence of parentheses. The precedence order for arithmetic operators places multiplication and division above addition and subtraction. If two operators of equal precedence appear, then a left-to-right ordering or associativity is used.</p> <p>Let\u2019s interpret the troublesome expression A + B \u00b7 C using operator precedence. B and C are multiplied first, and A is then added to that result. (A + B) \u00b7 C would force the addition of A and B to be done first before the multiplication. In the expression A + B + C, by precedence (via associativity), the leftmost + would be done first.</p> <p>Although all this may be obvious to you, remember that computers need to know exactly what operations to perform and in what order. One way to write an expression that guarantees there will be no confusion with respect to the order of operations is to create what is called a fully parenthesized expression. This type of expression uses one pair of parentheses for each operator. The parentheses dictate the order of operations; there is no ambiguity. There is also no need to remember any precedence rules.</p> <p>The expression A + B \u00b7 C + D can be rewritten as ((A + (B \u00b7 C)) + D) to show that the multiplication happens first, followed by the leftmost addition. A + B + C + D can be written as (((A + B) + C) + D) since the addition operations associate from left to right.</p> <p>There are two other very important expression formats that may not seem obvious to you at first. Consider the infix expression A + B. What would happen if we moved the operator before the two operands? The resulting expression would be + A B. Likewise, we could move the operator to the end, resulting in A B +. These look a bit strange.</p> <p>These changes to the position of the operator with respect to the operands create two new expression formats, prefix and postfix. Prefix expression notation requires that all operators precede the two operands that they work on. Postfix, on the other hand, requires that its operators come after the corresponding operands. A few more examples should help to make this a bit clearer (see <code>Table 2</code>).</p> <p>A + B \u00b7 C would be written as + A \u00b7 B C in prefix. The multiplication operator comes immediately before the operands B and C, denoting that \u00b7 has precedence over +. The addition operator then appears before the A and the result of the multiplication.</p> <p>In postfix, the expression would be A B C \u00b7 +. Again, the order of operations is preserved since the \u00b7 appears immediately after the B and the C, denoting that \u00b7 has precedence, with + coming after. Although the operators moved and now appear either before or after their respective operands, the order of the operands stayed exactly the same relative to one another.</p> <p>Table 2: Examples of Infix, Prefix, and Postfix Expressions</p> Infix Expression Prefix Expression Postfix Expression A + B + A B A B + A + B \u00b7 C + A \u00b7 B C A B C \u00b7 + <p>Now consider the infix expression (A + B) \u00b7 C. Recall that in this case, infix requires the parentheses to force the performance of the addition before the multiplication. However, when A + B was written in prefix, the addition operator was simply moved before the operands, + A B. The result of this operation becomes the first operand for the multiplication. The multiplication operator is moved in front of the entire expression, giving us \u00b7 + A B C. Likewise, in postfix A B + forces the addition to happen first. The multiplication can be done to that result and the remaining operand C. The proper postfix expression is then A B + C \u00b7.</p> <p>Consider these three expressions again (see <code>Table 3</code>). Something very important has happened. Where did the parentheses go? Why don\u2019t we need them in prefix and postfix? The answer is that the operators are no longer ambiguous with respect to the operands that they work on. Only infix notation requires the additional symbols. The order of operations within prefix and postfix expressions is completely determined by the position of the operator and nothing else. In many ways, this makes infix the least desirable notation to use.</p> <p>Table 3: Comparison of Infix, Prefix, and Postfix Expressions</p> Infix Expression Prefix Expression Postfix Expression (A + B) \u00b7 C \u00b7 + A B C A B + C \u00b7 <p><code>Table 4</code> shows some additional examples of infix expressions and the equivalent prefix and postfix expressions. Be sure that you understand how they are equivalent in terms of the order of the operations being performed.</p> <p>Table 4: Additional Examples of Infix, Prefix, and Postfix Expressions</p> Infix Expression Prefix Expression Postfix Expression A + B \u00b7 C + D + + A \u00b7 B C D A B C \u00b7 + D + (A + B) \u00b7 (C + D) \u00b7 + A B + C D A B + C D + \u00b7 A \u00b7 B + C \u00b7 D + \u00b7 A B \u00b7 C D A B \u00b7 C D \u00b7 + A + B + C + D + + + A B C D A B + C + D + <p>When you write an arithmetic expression such as B \u00b7 C, the form of the expression provides you with information so that you can interpret it correctly. In this case we know that the variable B is being multiplied by the variable C since the multiplication operator \u00b7 appears between them in the expression. This type of notation is referred to as infix since the operator is in between the two operands that it is working on.</p> <p>Consider another infix example, A + B \u00b7 C. The operators + and \u00b7 still appear between the operands, but there is a problem. Which operands do they work on? Does the + work on A and B, or does the \u00b7 take B and C? The expression seems ambiguous.</p> <p>In fact, you have been reading and writing these types of expressions for a long time and they do not cause you any problem. The reason for this is that you know something about the operators + and \u00b7. Each operator has a precedence level. Operators of higher precedence are used before operators of lower precedence. The only thing that can change that order is the presence of parentheses. The precedence order for arithmetic operators places multiplication and division above addition and subtraction. If two operators of equal precedence appear, then a left-to-right ordering or associativity is used.</p> <p>Let\u2019s interpret the troublesome expression A + B \u00b7 C using operator precedence. B and C are multiplied first, and A is then added to that result. (A + B) \u00b7 C would force the addition of A and B to be done first before the multiplication. In the expression A + B + C, by precedence (via associativity), the leftmost + would be done first.</p> <p>Although all this may be obvious to you, remember that computers need to know exactly what operations to perform and in what order. One way to write an expression that guarantees there will be no confusion with respect to the order of operations is to create what is called a fully parenthesized expression. This type of expression uses one pair of parentheses for each operator. The parentheses dictate the order of operations; there is no ambiguity. There is also no need to remember any precedence rules.</p> <p>The expression A + B \u00b7 C + D can be rewritten as ((A + (B \u00b7 C)) + D) to show that the multiplication happens first, followed by the leftmost addition. A + B + C + D can be written as (((A + B) + C) + D) since the addition operations associate from left to right.</p> <p>There are two other very important expression formats that may not seem obvious to you at first. Consider the infix expression A + B. What would happen if we moved the operator before the two operands? The resulting expression would be + A B. Likewise, we could move the operator to the end, resulting in A B +. These look a bit strange.</p> <p>These changes to the position of the operator with respect to the operands create two new expression formats, prefix and postfix. Prefix expression notation requires that all operators precede the two operands that they work on. Postfix, on the other hand, requires that its operators come after the corresponding operands. A few more examples should help to make this a bit clearer (see <code>Table 2</code>).</p> <p>A + B \u00b7 C would be written as + A \u00b7 B C in prefix. The multiplication operator comes immediately before the operands B and C, denoting that \u00b7 has precedence over +. The addition operator then appears before the A and the result of the multiplication.</p> <p>In postfix, the expression would be A B C \u00b7 +. Again, the order of operations is preserved since the \u00b7 appears immediately after the B and the C, denoting that \u00b7 has precedence, with + coming after. Although the operators moved and now appear either before or after their respective operands, the order of the operands stayed exactly the same relative to one another.</p> <p>Table 2: Examples of Infix, Prefix, and Postfix Expressions</p> Infix Expression Prefix Expression Postfix Expression A + B + A B A B + A + B \u00b7 C + A \u00b7 B C A B C \u00b7 + <p>Now consider the infix expression (A + B) \u00b7 C. Recall that in this case, infix requires the parentheses to force the performance of the addition before the multiplication. However, when A + B was written in prefix, the addition operator was simply moved before the operands, + A B. The result of this operation becomes the first operand for the multiplication. The multiplication operator is moved in front of the entire expression, giving us \u00b7 + A B C. Likewise, in postfix A B + forces the addition to happen first. The multiplication can be done to that result and the remaining operand C. The proper postfix expression is then A B + C \u00b7.</p> <p>Consider these three expressions again (see <code>Table 3</code>). Something very important has happened. Where did the parentheses go? Why don\u2019t we need them in prefix and postfix? The answer is that the operators are no longer ambiguous with respect to the operands that they work on. Only infix notation requires the additional symbols. The order of operations within prefix and postfix expressions is completely determined by the position of the operator and nothing else. In many ways, this makes infix the least desirable notation to use.</p> <p>Table 3: Comparison of Infix, Prefix, and Postfix Expressions</p> Infix Expression Prefix Expression Postfix Expression (A + B) \u00b7 C \u00b7 + A B C A B + C \u00b7 <p><code>Table 4</code> shows some additional examples of infix expressions and the equivalent prefix and postfix expressions. Be sure that you understand how they are equivalent in terms of the order of the operations being performed.</p> <p>Table 4: Additional Examples of Infix, Prefix, and Postfix Expressions</p> Infix Expression Prefix Expression Postfix Expression A + B \u00b7 C + D + + A \u00b7 B C D A B C \u00b7 + D + (A + B) \u00b7 (C + D) \u00b7 + A B + C D A B + C D + \u00b7 A \u00b7 B + C \u00b7 D + \u00b7 A B \u00b7 C D A B \u00b7 C D \u00b7 + A + B + C + D + + + A B C D A B + C + D +"},{"location":"c3/s9/#391-\u4e2d\u7f00\u8868\u8fbe\u5f0f\u8f6c\u6362\u4e3a\u524d\u7f00\u548c\u540e\u7f00","title":"3.9.1. \u4e2d\u7f00\u8868\u8fbe\u5f0f\u8f6c\u6362\u4e3a\u524d\u7f00\u548c\u540e\u7f00","text":"<p>3.9.1. Conversion of Infix Expressions to Prefix and Postfix</p> \u4e2d\u6587\u82f1\u6587 <p>So far, we have used ad hoc methods to convert between infix expressions and the equivalent prefix and postfix expression notations. As you might expect, there are algorithmic ways to perform the conversion that allow any expression of any complexity to be correctly transformed.</p> <p>The first technique that we will consider uses the notion of a fully parenthesized expression that was discussed earlier. Recall that A + B \u00b7 C can be written as (A + (B \u00b7 C)) to show explicitly that the multiplication has precedence over the addition. On closer observation, however, you can see that each parenthesis pair also denotes the beginning and the end of an operand pair with the corresponding operator in the middle.</p> <p>Look at the right parenthesis in the subexpression (B \u00b7 C) above. If we were to move the multiplication symbol to that position and remove the matching left parenthesis, giving us B C \u00b7, we would in effect have converted the subexpression to postfix notation. If the addition operator were also moved to its corresponding right parenthesis position and the matching left parenthesis were removed, the complete postfix expression would result (see <code>Figure 6</code>).</p> <p> Figure 6: Moving Operators to the Right for Postfix Notation </p> <p>If we do the same thing but instead of moving the symbol to the position of the right parenthesis, we move it to the left, we get prefix notation (see <code>Figure 7</code>). The position of the parenthesis pair is actually a clue to the final position of the enclosed operator.</p> <p> Figure 7: Moving Operators to the Left for Prefix Notation </p> <p>So in order to convert an expression, no matter how complex, to either prefix or postfix notation, fully parenthesize the expression using the order of operations. Then move the enclosed operator to the position of either the left or the right parenthesis depending on whether you want prefix or postfix notation.</p> <p>Here is a more complex expression: (A + B) \u00b7 C - (D - E) \u00b7 (F + G). <code>Figure 8</code> shows the conversion to prefix and postfix notations.</p> <p> Figure 8: Converting a Complex Expression to Prefix and Postfix Notations </p> <p>So far, we have used ad hoc methods to convert between infix expressions and the equivalent prefix and postfix expression notations. As you might expect, there are algorithmic ways to perform the conversion that allow any expression of any complexity to be correctly transformed.</p> <p>The first technique that we will consider uses the notion of a fully parenthesized expression that was discussed earlier. Recall that A + B \u00b7 C can be written as (A + (B \u00b7 C)) to show explicitly that the multiplication has precedence over the addition. On closer observation, however, you can see that each parenthesis pair also denotes the beginning and the end of an operand pair with the corresponding operator in the middle.</p> <p>Look at the right parenthesis in the subexpression (B \u00b7 C) above. If we were to move the multiplication symbol to that position and remove the matching left parenthesis, giving us B C \u00b7, we would in effect have converted the subexpression to postfix notation. If the addition operator were also moved to its corresponding right parenthesis position and the matching left parenthesis were removed, the complete postfix expression would result (see <code>Figure 6</code>).</p> <p> Figure 6: Moving Operators to the Right for Postfix Notation </p> <p>If we do the same thing but instead of moving the symbol to the position of the right parenthesis, we move it to the left, we get prefix notation (see <code>Figure 7</code>). The position of the parenthesis pair is actually a clue to the final position of the enclosed operator.</p> <p> Figure 7: Moving Operators to the Left for Prefix Notation </p> <p>So in order to convert an expression, no matter how complex, to either prefix or postfix notation, fully parenthesize the expression using the order of operations. Then move the enclosed operator to the position of either the left or the right parenthesis depending on whether you want prefix or postfix notation.</p> <p>Here is a more complex expression: (A + B) \u00b7 C - (D - E) \u00b7 (F + G). <code>Figure 8</code> shows the conversion to prefix and postfix notations.</p> <p> Figure 8: Converting a Complex Expression to Prefix and Postfix Notations </p>"},{"location":"c3/s9/#392-\u4e00\u822c\u7684\u4e2d\u7f00\u8f6c\u540e\u7f00\u8f6c\u6362","title":"3.9.2. \u4e00\u822c\u7684\u4e2d\u7f00\u8f6c\u540e\u7f00\u8f6c\u6362","text":"<p>3.9.2. General Infix-to-Postfix Conversion</p> \u4e2d\u6587\u82f1\u6587 <p>We need to develop an algorithm to convert any infix expression to a postfix expression. To do this we will look closer at the conversion process.</p> <p>Consider once again the expression A + B \u00b7 C. As shown above, A B C \u00b7 + is the postfix equivalent. We have already noted that the operands A, B, and C stay in their relative positions. It is only the operators that change position. Let\u2019s look again at the operators in the infix expression. The first operator that appears from left to right is +. However, in the postfix expression, + is at the end since the next operator, \u00b7, has precedence over addition. The order of the operators in the original expression is reversed in the resulting postfix expression.</p> <p>As we process the expression, the operators have to be saved somewhere since their corresponding right operands are not seen yet. Also, the order of these saved operators may need to be reversed due to their precedence. This is the case with the addition and the multiplication in this example. Since the addition operator comes before the multiplication operator and has lower precedence, it needs to appear after the multiplication operator is used. Because of this reversal of order, it makes sense to consider using a stack to keep the operators until they are needed.</p> <p>What about (A + B) \u00b7 C? Recall that A B + C \u00b7 is the postfix equivalent. Again, processing this infix expression from left to right, we see + first. In this case, when we see \u00b7, + has already been placed in the result expression because it has precedence over \u00b7 by virtue of the parentheses. We can now start to see how the conversion algorithm will work. When we see a left parenthesis, we will save it to denote that another operator of high precedence will be coming. That operator will need to wait until the corresponding right parenthesis appears to denote its position (recall the fully parenthesized technique). When that right parenthesis does appear, the operator can be popped from the stack.</p> <p>As we scan the infix expression from left to right, we will use a stack to keep the operators. This will provide the reversal that we noted in the first example. The top of the stack will always be the most recently saved operator. Whenever we read a new operator, we will need to consider how that operator compares in precedence with the operators, if any, already on the stack.</p> <p>Assume the infix expression is a string of tokens delimited by spaces. The operator tokens are \u00b7, /, +, and -, along with the left and right parentheses, ( and ). The operand tokens are the single-character identifiers A, B, C, and so on. The following steps will produce a string of tokens in postfix order.</p> <ol> <li>Create an empty stack called <code>op_stack</code> for keeping operators. Create an empty list for output.</li> <li>Convert the input infix string to a list by using the string method <code>split</code>.</li> <li> <p>Scan the token list from left to right.</p> </li> <li> <p>If the token is an operand, append it to the end of the output list.</p> </li> <li> <p>If the token is a left parenthesis, push it on the <code>op_stack</code>.</p> </li> <li> <p>If the token is a right parenthesis, pop the <code>op_stack</code> until the corresponding left parenthesis is removed. Append each operator to the end of the output list.</p> </li> <li> <p>If the token is an operator, \u00b7, /, +, or -, push it on the <code>op_stack</code>. However, first remove any operators already on the <code>op_stack</code> that have higher or equal precedence and append them to the output list.</p> </li> <li> <p>When the input expression has been completely processed, check the <code>op_stack</code>. Any operators still on the stack can be removed and appended to the end of the output list.</p> </li> </ol> <p><code>Figure 9</code> shows the conversion algorithm working on the expression A \u00b7 B + C \u00b7 D. Note that the first \u00b7 operator is removed upon seeing the + operator. Also, + stays on the stack when the second \u00b7 occurs, since multiplication has precedence over addition. At the end of the infix expression the stack is popped twice, removing both operators and placing + as the last operator in the postfix expression.</p> <p> Figure 9: Converting A \u00b7 B + C \u00b7 D to Postfix Notation </p> <p>In order to code the algorithm in Python, we will use a dictionary called <code>prec</code> to hold the precedence values for the operators, as seen in in <code>ActiveCode 1</code>. This dictionary will map each operator to an integer that can be compared against the precedence levels of other operators (we have arbitrarily used the integers 3, 2, and 1). The left parenthesis will receive the lowest value possible. This way any operator that is compared against it will have higher precedence and will be placed on top of it. Line 15 defines the operands to be any upper-case character or digit.</p> Activity: 3.9.2.1 Converting Infix Expressions to Postfix Expressions<pre><code>from pythonds3.basic import Stack\n\ndef infix_to_postfix(infix_expr):\n    prec = {}\n    prec[\"*\"] = 3\n    prec[\"/\"] = 3\n    prec[\"+\"] = 2\n    prec[\"-\"] = 2\n    prec[\"(\"] = 1\n    op_stack = Stack()\n    postfix_list = []\n    token_list = infix_expr.split()\n\n    for token in token_list:\n        if token in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" or token in \"0123456789\":\n            postfix_list.append(token)\n        elif token == \"(\":\n            op_stack.push(token)\n        elif token == \")\":\n            top_token = op_stack.pop()\n            while top_token != \"(\":\n                postfix_list.append(top_token)\n                top_token = op_stack.pop()\n        else:\n            while (not op_stack.is_empty()) and (prec[op_stack.peek()] &gt;= prec[token]):\n                postfix_list.append(op_stack.pop())\n            op_stack.push(token)\n\n    while not op_stack.is_empty():\n        postfix_list.append(op_stack.pop())\n\n    return \" \".join(postfix_list)\n\nprint(infix_to_postfix(\"A * B + C * D\"))\nprint(infix_to_postfix(\"( A + B ) * C - ( D - E ) * ( F + G )\"))\n</code></pre> <p>A few more examples of execution in the Python shell are shown below.</p> <pre><code>&gt;&gt;&gt; infix_to_postfix(\"( A + B ) * ( C + D )\")\n'A B + C D + *'\n&gt;&gt;&gt; infix_to_postfix(\"( A + B ) * C\")\n'A B + C *'\n&gt;&gt;&gt; infix_to_postfix(\"A + B * C\")\n'A B C * +'\n&gt;&gt;&gt;\n</code></pre> <p>We need to develop an algorithm to convert any infix expression to a postfix expression. To do this we will look closer at the conversion process.</p> <p>Consider once again the expression A + B \u00b7 C. As shown above, A B C \u00b7 + is the postfix equivalent. We have already noted that the operands A, B, and C stay in their relative positions. It is only the operators that change position. Let\u2019s look again at the operators in the infix expression. The first operator that appears from left to right is +. However, in the postfix expression, + is at the end since the next operator, \u00b7, has precedence over addition. The order of the operators in the original expression is reversed in the resulting postfix expression.</p> <p>As we process the expression, the operators have to be saved somewhere since their corresponding right operands are not seen yet. Also, the order of these saved operators may need to be reversed due to their precedence. This is the case with the addition and the multiplication in this example. Since the addition operator comes before the multiplication operator and has lower precedence, it needs to appear after the multiplication operator is used. Because of this reversal of order, it makes sense to consider using a stack to keep the operators until they are needed.</p> <p>What about (A + B) \u00b7 C? Recall that A B + C \u00b7 is the postfix equivalent. Again, processing this infix expression from left to right, we see + first. In this case, when we see \u00b7, + has already been placed in the result expression because it has precedence over \u00b7 by virtue of the parentheses. We can now start to see how the conversion algorithm will work. When we see a left parenthesis, we will save it to denote that another operator of high precedence will be coming. That operator will need to wait until the corresponding right parenthesis appears to denote its position (recall the fully parenthesized technique). When that right parenthesis does appear, the operator can be popped from the stack.</p> <p>As we scan the infix expression from left to right, we will use a stack to keep the operators. This will provide the reversal that we noted in the first example. The top of the stack will always be the most recently saved operator. Whenever we read a new operator, we will need to consider how that operator compares in precedence with the operators, if any, already on the stack.</p> <p>Assume the infix expression is a string of tokens delimited by spaces. The operator tokens are \u00b7, /, +, and -, along with the left and right parentheses, ( and ). The operand tokens are the single-character identifiers A, B, C, and so on. The following steps will produce a string of tokens in postfix order.</p> <ol> <li>Create an empty stack called <code>op_stack</code> for keeping operators. Create an empty list for output.</li> <li>Convert the input infix string to a list by using the string method <code>split</code>.</li> <li> <p>Scan the token list from left to right.</p> </li> <li> <p>If the token is an operand, append it to the end of the output list.</p> </li> <li> <p>If the token is a left parenthesis, push it on the <code>op_stack</code>.</p> </li> <li> <p>If the token is a right parenthesis, pop the <code>op_stack</code> until the corresponding left parenthesis is removed. Append each operator to the end of the output list.</p> </li> <li> <p>If the token is an operator, \u00b7, /, +, or -, push it on the <code>op_stack</code>. However, first remove any operators already on the <code>op_stack</code> that have higher or equal precedence and append them to the output list.</p> </li> <li> <p>When the input expression has been completely processed, check the <code>op_stack</code>. Any operators still on the stack can be removed and appended to the end of the output list.</p> </li> </ol> <p><code>Figure 9</code> shows the conversion algorithm working on the expression A \u00b7 B + C \u00b7 D. Note that the first \u00b7 operator is removed upon seeing the + operator. Also, + stays on the stack when the second \u00b7 occurs, since multiplication has precedence over addition. At the end of the infix expression the stack is popped twice, removing both operators and placing + as the last operator in the postfix expression.</p> <p> Figure 9: Converting A \u00b7 B + C \u00b7 D to Postfix Notation </p> <p>In order to code the algorithm in Python, we will use a dictionary called <code>prec</code> to hold the precedence values for the operators, as seen in in <code>ActiveCode 1</code>. This dictionary will map each operator to an integer that can be compared against the precedence levels of other operators (we have arbitrarily used the integers 3, 2, and 1). The left parenthesis will receive the lowest value possible. This way any operator that is compared against it will have higher precedence and will be placed on top of it. Line 15 defines the operands to be any upper-case character or digit.</p> Activity: 3.9.2.1 Converting Infix Expressions to Postfix Expressions<pre><code>from pythonds3.basic import Stack\n\ndef infix_to_postfix(infix_expr):\n    prec = {}\n    prec[\"*\"] = 3\n    prec[\"/\"] = 3\n    prec[\"+\"] = 2\n    prec[\"-\"] = 2\n    prec[\"(\"] = 1\n    op_stack = Stack()\n    postfix_list = []\n    token_list = infix_expr.split()\n\n    for token in token_list:\n        if token in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" or token in \"0123456789\":\n            postfix_list.append(token)\n        elif token == \"(\":\n            op_stack.push(token)\n        elif token == \")\":\n            top_token = op_stack.pop()\n            while top_token != \"(\":\n                postfix_list.append(top_token)\n                top_token = op_stack.pop()\n        else:\n            while (not op_stack.is_empty()) and (prec[op_stack.peek()] &gt;= prec[token]):\n                postfix_list.append(op_stack.pop())\n            op_stack.push(token)\n\n    while not op_stack.is_empty():\n        postfix_list.append(op_stack.pop())\n\n    return \" \".join(postfix_list)\n\nprint(infix_to_postfix(\"A * B + C * D\"))\nprint(infix_to_postfix(\"( A + B ) * C - ( D - E ) * ( F + G )\"))\n</code></pre> <p>A few more examples of execution in the Python shell are shown below.</p> <pre><code>&gt;&gt;&gt; infix_to_postfix(\"( A + B ) * ( C + D )\")\n'A B + C D + *'\n&gt;&gt;&gt; infix_to_postfix(\"( A + B ) * C\")\n'A B + C *'\n&gt;&gt;&gt; infix_to_postfix(\"A + B * C\")\n'A B C * +'\n&gt;&gt;&gt;\n</code></pre>"},{"location":"c3/s9/#393-\u540e\u7f00\u8868\u8fbe\u5f0f\u6c42\u503c","title":"3.9.3. \u540e\u7f00\u8868\u8fbe\u5f0f\u6c42\u503c","text":"<p>3.9.3. Postfix Evaluation</p> \u4e2d\u6587\u82f1\u6587 <p>As a final stack example, we will consider the evaluation of an expression that is already in postfix notation. In this case, a stack is again the data structure of choice. However, as you scan the postfix expression, it is the operands that must wait, not the operators as in the conversion algorithm above. Another way to think about the solution is that whenever an operator is seen on the input, the two most recent operands will be used in the evaluation.</p> <p>To see this in more detail, consider the postfix expression 4 5 6 \u00b7 +. As you scan the expression from left to right, you first encounter the operands 4 and 5. At this point, you are still unsure what to do with them until you see the next symbol. Placing each on the stack ensures that they are available if an operator comes next.</p> <p>In this case, the next symbol is another operand. So, as before, push it and check the next symbol. Now we see an operator, \u00b7. This means that the two most recent operands need to be used in a multiplication operation. By popping the stack twice, we can get the proper operands and then perform the multiplication (in this case getting the result 30).</p> <p>We can now handle this result by placing it back on the stack so that it can be used as an operand for the later operators in the expression. When the final operator is processed, there will be only one value left on the stack. Pop and return it as the result of the expression. <code>Figure 10</code> shows the stack contents as this entire example expression is being processed.</p> <p> Figure 10: Stack Contents During Evaluation </p> <p><code>Figure 11</code> shows a slightly more complex example, 7 8 + 3 2 + /. There are two things to note in this example. First, the stack size grows, shrinks, and then grows again as the subexpressions are evaluated. Second, the division operation needs to be handled carefully. Recall that the operands in the postfix expression are in their original order since postfix changes only the placement of operators. When the operands for the division are popped from the stack, they are reversed. Since division is not a commutative operator, in other words \\(15/5\\) is not the same as \\(5/15\\), we must be sure that the order of the operands is not switched.</p> <p> Figure 11: A More Complex Example of Evaluation </p> <p>Assume the postfix expression is a string of tokens delimited by spaces. The operators are \u00b7, /, +, and - and the operands are assumed to be single-digit integer values. The output will be an integer result.</p> <ol> <li>Create an empty stack called <code>operand_stack</code>.</li> <li>Convert the string to a list by using the string method <code>split</code>.</li> <li> <p>Scan the token list from left to right.</p> </li> <li> <p>If the token is an operand, convert it from a string to an integer and push the value onto the <code>operand_stack</code>.</p> </li> <li> <p>If the token is an operator, \u00b7, /, +, or -, it will need two operands. Pop the <code>operand_stack</code> twice. The first pop is the second operand and the second pop is the first operand. Perform the arithmetic operation. Push the result back on the <code>operand_stack</code>.</p> </li> <li> <p>When the input expression has been completely processed, the result is on the stack. Pop the <code>operand_stack</code> and return the value.</p> </li> </ol> <p>The complete function for the evaluation of postfix expressions is shown in <code>ActiveCode 2</code>. To assist with the arithmetic, a helper function <code>do_math</code> is defined. It will take two operands and an operator and then perform the proper arithmetic operation.</p> Activity: 3.9.3.1 Postfix Evaluation<pre><code>from pythonds3.basic import Stack\n\ndef postfix_eval(postfix_expr):\n    operand_stack = Stack()\n    token_list = postfix_expr.split()\n\n    for token in token_list:\n        if token in \"0123456789\":\n            operand_stack.push(int(token))\n        else:\n            operand2 = operand_stack.pop()\n            operand1 = operand_stack.pop()\n            result = do_math(token, operand1, operand2)\n            operand_stack.push(result)\n    return operand_stack.pop()\n\n\ndef do_math(op, op1, op2):\n    if op == \"*\":\n        return op1 * op2\n    elif op == \"/\":\n        return op1 / op2\n    elif op == \"+\":\n        return op1 + op2\n    else:\n        return op1 - op2\n\n\nprint(postfix_eval(\"7 8 + 3 2 + /\"))\n</code></pre> <p>It is important to note that in both the postfix conversion and the postfix evaluation programs we assumed that there were no errors in the input expression. Using these programs as a starting point, you can easily see how error detection and reporting can be included. We leave this as an exercise at the end of the chapter.</p> <p>Self Check</p> Activity: 3.9.3.2 Fill in the BlankActivity: 3.9.3.3 Fill in the BlankActivity: 3.9.3.4 Fill in the Blank <p>Without using the activecode <code>infix_to_postfix</code> function, convert the following expression to postfix  <code>10 + 3 * 5 / (16 - 4)</code> .</p> <p>|blank|</p> <ul> <li>:10\\s+3\\s+5\\s*\\s16\\s+4\\s-\\s/\\s*+: Correct.</li> <li>:10.3.5.16.4\\s+[ /+-]: The numbers appear to be in the correct order check your operators</li> <li> Remember the numbers will be in the same order as the original equation</li> </ul> <p>What is the result of evaluating the following: <code>17 10 + 3 * 9 / ==</code> ?</p> <p>|blank|</p> <ul> <li>:9: Correct.</li> <li> Remember to push each intermediate result back on the stack</li> </ul> <p>Modify the <code>infix_to_postfix</code> function so that it can convert the following expression:  <code>5 * 3 ^ (4 - 2)</code>. Run the function on the expression and paste the answer here:</p> <p>|blank|</p> <ul> <li>:5\\s+3\\s+4\\s+2\\s-\\s**\\s**: Correct.</li> <li> Hint: You only need to add one line to the function!!</li> </ul> <p>As a final stack example, we will consider the evaluation of an expression that is already in postfix notation. In this case, a stack is again the data structure of choice. However, as you scan the postfix expression, it is the operands that must wait, not the operators as in the conversion algorithm above. Another way to think about the solution is that whenever an operator is seen on the input, the two most recent operands will be used in the evaluation.</p> <p>To see this in more detail, consider the postfix expression 4 5 6 \u00b7 +. As you scan the expression from left to right, you first encounter the operands 4 and 5. At this point, you are still unsure what to do with them until you see the next symbol. Placing each on the stack ensures that they are available if an operator comes next.</p> <p>In this case, the next symbol is another operand. So, as before, push it and check the next symbol. Now we see an operator, \u00b7. This means that the two most recent operands need to be used in a multiplication operation. By popping the stack twice, we can get the proper operands and then perform the multiplication (in this case getting the result 30).</p> <p>We can now handle this result by placing it back on the stack so that it can be used as an operand for the later operators in the expression. When the final operator is processed, there will be only one value left on the stack. Pop and return it as the result of the expression. <code>Figure 10</code> shows the stack contents as this entire example expression is being processed.</p> <p> Figure 10: Stack Contents During Evaluation </p> <p><code>Figure 11</code> shows a slightly more complex example, 7 8 + 3 2 + /. There are two things to note in this example. First, the stack size grows, shrinks, and then grows again as the subexpressions are evaluated. Second, the division operation needs to be handled carefully. Recall that the operands in the postfix expression are in their original order since postfix changes only the placement of operators. When the operands for the division are popped from the stack, they are reversed. Since division is not a commutative operator, in other words \\(15/5\\) is not the same as \\(5/15\\), we must be sure that the order of the operands is not switched.</p> <p> Figure 11: A More Complex Example of Evaluation </p> <p>Assume the postfix expression is a string of tokens delimited by spaces. The operators are \u00b7, /, +, and - and the operands are assumed to be single-digit integer values. The output will be an integer result.</p> <ol> <li>Create an empty stack called <code>operand_stack</code>.</li> <li>Convert the string to a list by using the string method <code>split</code>.</li> <li> <p>Scan the token list from left to right.</p> </li> <li> <p>If the token is an operand, convert it from a string to an integer and push the value onto the <code>operand_stack</code>.</p> </li> <li> <p>If the token is an operator, \u00b7, /, +, or -, it will need two operands. Pop the <code>operand_stack</code> twice. The first pop is the second operand and the second pop is the first operand. Perform the arithmetic operation. Push the result back on the <code>operand_stack</code>.</p> </li> <li> <p>When the input expression has been completely processed, the result is on the stack. Pop the <code>operand_stack</code> and return the value.</p> </li> </ol> <p>The complete function for the evaluation of postfix expressions is shown in <code>ActiveCode 2</code>. To assist with the arithmetic, a helper function <code>do_math</code> is defined. It will take two operands and an operator and then perform the proper arithmetic operation.</p> Activity: 3.9.3.1 Postfix Evaluation<pre><code>from pythonds3.basic import Stack\n\ndef postfix_eval(postfix_expr):\n    operand_stack = Stack()\n    token_list = postfix_expr.split()\n\n    for token in token_list:\n        if token in \"0123456789\":\n            operand_stack.push(int(token))\n        else:\n            operand2 = operand_stack.pop()\n            operand1 = operand_stack.pop()\n            result = do_math(token, operand1, operand2)\n            operand_stack.push(result)\n    return operand_stack.pop()\n\n\ndef do_math(op, op1, op2):\n    if op == \"*\":\n        return op1 * op2\n    elif op == \"/\":\n        return op1 / op2\n    elif op == \"+\":\n        return op1 + op2\n    else:\n        return op1 - op2\n\n\nprint(postfix_eval(\"7 8 + 3 2 + /\"))\n</code></pre> <p>It is important to note that in both the postfix conversion and the postfix evaluation programs we assumed that there were no errors in the input expression. Using these programs as a starting point, you can easily see how error detection and reporting can be included. We leave this as an exercise at the end of the chapter.</p> <p>Self Check</p> Activity: 3.9.3.2 Fill in the BlankActivity: 3.9.3.3 Fill in the BlankActivity: 3.9.3.4 Fill in the Blank <p>Without using the activecode <code>infix_to_postfix</code> function, convert the following expression to postfix  <code>10 + 3 * 5 / (16 - 4)</code> .</p> <p>|blank|</p> <ul> <li>:10\\s+3\\s+5\\s*\\s16\\s+4\\s-\\s/\\s*+: Correct.</li> <li>:10.3.5.16.4\\s+[ /+-]: The numbers appear to be in the correct order check your operators</li> <li> Remember the numbers will be in the same order as the original equation</li> </ul> <p>What is the result of evaluating the following: <code>17 10 + 3 * 9 / ==</code> ?</p> <p>|blank|</p> <ul> <li>:9: Correct.</li> <li> Remember to push each intermediate result back on the stack</li> </ul> <p>Modify the <code>infix_to_postfix</code> function so that it can convert the following expression:  <code>5 * 3 ^ (4 - 2)</code>. Run the function on the expression and paste the answer here:</p> <p>|blank|</p> <ul> <li>:5\\s+3\\s+4\\s+2\\s-\\s**\\s**: Correct.</li> <li> Hint: You only need to add one line to the function!!</li> </ul>"},{"location":"c4/","title":"4. \u9012\u5f52","text":"<p>4. Recursion</p> \u4e2d\u6587\u82f1\u6587 <ul> <li>4.1. \u76ee\u6807 </li> <li>4.2. \u4ec0\u4e48\u662f\u9012\u5f52\uff1f </li> <li>4.3. \u8ba1\u7b97\u4e00\u4e2a\u6570\u5217\u7684\u548c </li> <li>4.4. \u9012\u5f52\u7684\u4e09\u6761\u6cd5\u5219 </li> <li>4.5. \u5c06\u6574\u6570\u8f6c\u6362\u4e3a\u4efb\u610f\u8fdb\u5236\u7684\u5b57\u7b26\u4e32 </li> <li>4.6. \u6808\u5e27\uff1a\u5b9e\u73b0\u9012\u5f52 </li> <li>4.7. \u9012\u5f52\u7684\u53ef\u89c6\u5316 </li> <li>4.8. \u8c22\u5c14\u5bbe\u65af\u57fa\u4e09\u89d2\u5f62 </li> <li>4.9. \u590d\u6742\u7684\u9012\u5f52\u95ee\u9898 </li> <li>4.10. \u6c49\u8bfa\u5854\u95ee\u9898 </li> <li>4.11. \u8ff7\u5bab\u63a2\u7d22 </li> <li>4.12. \u52a8\u6001\u89c4\u5212 </li> <li>4.13. \u603b\u7ed3 </li> <li>4.14. \u5173\u952e\u672f\u8bed </li> <li>4.15. \u7ec3\u4e60</li> </ul> <ul> <li>4.1. Objectives</li> <li>4.2. What Is Recursion?</li> <li>4.3. Calculating the Sum of a List of Numbers</li> <li>4.4. The Three Laws of Recursion</li> <li>4.5. Converting an Integer to a String in Any Base</li> <li>4.6. Stack Frames: Implementing Recursion</li> <li>4.7. Visualizing Recursion</li> <li>4.8. Sierpinski Triangle</li> <li>4.9. Complex Recursive Problems</li> <li>4.10. Tower of Hanoi</li> <li>4.11. Exploring a Maze</li> <li>4.12. Dynamic Programming</li> <li>4.13. Summary</li> <li>4.14. Key Terms</li> <li>4.15. Exercises</li> </ul>"},{"location":"c5/","title":"5. \u641c\u7d22\u4e0e\u6392\u5e8f","text":"<p>5. Searching and Sorting</p> \u4e2d\u6587\u82f1\u6587 <ul> <li>5.1. \u76ee\u6807</li> <li>5.2. \u641c\u7d22</li> <li>5.3. \u987a\u5e8f\u641c\u7d22<ul> <li>5.3.1. \u987a\u5e8f\u641c\u7d22\u7684\u5206\u6790</li> </ul> </li> <li>5.4. \u4e8c\u5206\u641c\u7d22<ul> <li>5.4.1. \u4e8c\u5206\u641c\u7d22\u7684\u5206\u6790</li> </ul> </li> <li>5.5. \u54c8\u5e0c<ul> <li>5.5.1. \u54c8\u5e0c\u51fd\u6570</li> <li>5.5.2. \u78b0\u649e\u89e3\u51b3</li> <li>5.5.3. \u5b9e\u73b0Map\u62bd\u8c61\u6570\u636e\u7c7b\u578b</li> <li>5.5.4. \u54c8\u5e0c\u5206\u6790</li> </ul> </li> <li>5.6. \u6392\u5e8f</li> <li>5.7. \u5192\u6ce1\u6392\u5e8f</li> <li>5.8. \u9009\u62e9\u6392\u5e8f</li> <li>5.9. \u63d2\u5165\u6392\u5e8f</li> <li>5.10. \u5e0c\u5c14\u6392\u5e8f</li> <li>5.11. \u5f52\u5e76\u6392\u5e8f</li> <li>5.12. \u5feb\u901f\u6392\u5e8f</li> <li>5.13. \u603b\u7ed3</li> <li>5.14. \u5173\u952e\u672f\u8bed</li> <li>5.15. \u7ec3\u4e60</li> </ul> <ul> <li>5.1. Objectives</li> <li>5.2. Searching</li> <li>5.3. The Sequential Search<ul> <li>5.3.1. Analysis of Sequential Search</li> </ul> </li> <li>5.4. The Binary Search<ul> <li>5.4.1. Analysis of Binary Search</li> </ul> </li> <li>5.5. Hashing<ul> <li>5.5.1. Hash Functions</li> <li>5.5.2. Collision Resolution</li> <li>5.5.3. Implementing the Map Abstract Data Type</li> <li>5.5.4. Analysis of Hashing</li> </ul> </li> <li>5.6. Sorting</li> <li>5.7. The Bubble Sort</li> <li>5.8. The Selection Sort</li> <li>5.9. The Insertion Sort</li> <li>5.10. The Shell Sort</li> <li>5.11. The Merge Sort</li> <li>5.12. The Quicksort</li> <li>5.13. Summary</li> <li>5.14. Key Terms</li> <li>5.15. Exercises</li> </ul>"},{"location":"c6/","title":"6. \u6811\u548c\u6811\u7b97\u6cd5","text":"\u4e2d\u6587\u82f1\u6587 <ul> <li>6.1. \u76ee\u6807</li> <li>6.2. \u6811\u7684\u793a\u4f8b</li> <li>6.3. \u8bcd\u6c47\u548c\u5b9a\u4e49</li> <li>6.4. \u5b9e\u73b0</li> <li>6.5. \u5217\u8868\u8868\u793a\u6cd5</li> <li>6.6. \u8282\u70b9\u4e0e\u5f15\u7528</li> <li>6.7. \u89e3\u6790\u6811</li> <li>6.8. \u6811\u904d\u5386</li> <li>6.9. \u4f7f\u7528\u4e8c\u53c9\u5806\u7684\u4f18\u5148\u961f\u5217</li> <li>6.10. \u4e8c\u53c9\u5806\u64cd\u4f5c</li> <li>6.11. \u4e8c\u53c9\u5806\u5b9e\u73b0<ul> <li>6.11.1. \u7ed3\u6784\u5c5e\u6027</li> <li>6.11.2. \u5806\u5e8f\u5c5e\u6027</li> <li>6.11.3. \u5806\u64cd\u4f5c</li> </ul> </li> <li>6.12. \u4e8c\u53c9\u641c\u7d22\u6811</li> <li>6.13. \u641c\u7d22\u6811\u64cd\u4f5c</li> <li>6.14. \u641c\u7d22\u6811\u5b9e\u73b0</li> <li>6.15. \u641c\u7d22\u6811\u5206\u6790</li> <li>6.16. \u5e73\u8861\u4e8c\u53c9\u641c\u7d22\u6811</li> <li>6.17. AVL\u6811\u6027\u80fd</li> <li>6.18. AVL\u6811\u5b9e\u73b0</li> <li>6.19. Map ADT\u5b9e\u73b0\u603b\u7ed3</li> <li>6.20. \u603b\u7ed3</li> <li>6.21. \u5173\u952e\u672f\u8bed</li> <li>6.22. \u7ec3\u4e60</li> </ul> <ul> <li>6.1. Objectives</li> <li>6.2. Examples of Trees</li> <li>6.3. Vocabulary and Definitions</li> <li>6.4. Implementation</li> <li>6.5. List of Lists Representation</li> <li>6.6. Nodes and References</li> <li>6.7. Parse Tree</li> <li>6.8. Tree Traversals</li> <li>6.9. Priority Queues with Binary Heaps</li> <li>6.10. Binary Heap Operations</li> <li>6.11. Binary Heap Implementation<ul> <li>6.11.1. The Structure Property</li> <li>6.11.2. The Heap Order Property</li> <li>6.11.3. Heap Operations</li> </ul> </li> <li>6.12. Binary Search Trees</li> <li>6.13. Search Tree Operations</li> <li>6.14. Search Tree Implementation</li> <li>6.15. Search Tree Analysis</li> <li>6.16. Balanced Binary Search Trees</li> <li>6.17. AVL Tree Performance</li> <li>6.18. AVL Tree Implementation</li> <li>6.19. Summary of Map ADT Implementations</li> <li>6.20. Summary</li> <li>6.21. Key Terms</li> <li>6.22. Exercises</li> </ul>"},{"location":"c7/","title":"7. \u56fe\u548c\u56fe\u7b97\u6cd5","text":"<p>7. Graphs and Graphing Algorithms</p> \u4e2d\u6587\u82f1\u6587 <p>7.1. \u76ee\u6807 7.2. \u8bcd\u6c47\u548c\u5b9a\u4e49 7.3. \u56fe\u7684\u62bd\u8c61\u6570\u636e\u7c7b\u578b 7.4. \u90bb\u63a5\u77e9\u9635 7.5. \u90bb\u63a5\u8868 7.6. \u5b9e\u73b0 7.7. \u5b57\u68af\u95ee\u9898 7.8. \u6784\u5efa\u5b57\u68af\u56fe 7.9. \u5b9e\u73b0\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22 7.10. \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u5206\u6790 7.11. \u9a91\u58eb\u5de1\u6e38\u95ee\u9898 7.12. \u6784\u5efa\u9a91\u58eb\u5de1\u6e38\u56fe 7.13. \u5b9e\u73b0\u9a91\u58eb\u5de1\u6e38 7.14. \u9a91\u58eb\u5de1\u6e38\u5206\u6790 7.15. \u4e00\u822c\u7684\u6df1\u5ea6\u4f18\u5148\u641c\u7d22 7.16. \u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u5206\u6790 7.17. \u62d3\u6251\u6392\u5e8f 7.18. \u5f3a\u8fde\u901a\u5206\u91cf 7.19. \u6700\u77ed\u8def\u5f84\u95ee\u9898 7.20. Dijkstra\u7b97\u6cd5 7.21. Dijkstra\u7b97\u6cd5\u5206\u6790 7.22. Prim\u751f\u6210\u6811\u7b97\u6cd5 7.23. \u603b\u7ed3 7.24. \u5173\u952e\u672f\u8bed 7.25. \u7ec3\u4e60</p> <ul> <li>7.1. Objectives</li> <li>7.2. Vocabulary and Definitions</li> <li>7.3. The Graph Abstract Data Type</li> <li>7.4. An Adjacency Matrix</li> <li>7.5. An Adjacency List</li> <li>7.6. Implementation</li> <li>7.7. The Word Ladder Problem</li> <li>7.8. Building the Word Ladder Graph</li> <li>7.9. Implementing Breadth-First Search</li> <li>7.10. Breadth-First Search Analysis</li> <li>7.11. The Knight\u2019s Tour Problem</li> <li>7.12. Building the Knight\u2019s Tour Graph</li> <li>7.13. Implementing Knight\u2019s Tour</li> <li>7.14. Knight\u2019s Tour Analysis</li> <li>7.15. General Depth-First Search</li> <li>7.16. Depth-First Search Analysis</li> <li>7.17. Topological Sorting</li> <li>7.18. Strongly Connected Components</li> <li>7.19. Shortest Path Problems</li> <li>7.20. Dijkstra\u2019s Algorithm</li> <li>7.21. Analysis of Dijkstra\u2019s Algorithm</li> <li>7.22. Prim\u2019s Spanning Tree Algorithm</li> <li>7.23. Summary</li> <li>7.24. Key Terms</li> <li>7.25. Exercises</li> </ul>"},{"location":"c8/","title":"8. \u9ad8\u7ea7\u4e3b\u9898","text":"<p>8. Advanced Topics</p> \u4e2d\u6587\u82f1\u6587 <ul> <li>8.1. \u76ee\u6807</li> <li>8.2. Python\u5217\u8868\u518d\u63a2</li> <li>8.3. \u9012\u5f52\u518d\u63a2<ul> <li>8.3.1. \u6a21\u8fd0\u7b97\u5b9a\u7406</li> <li>8.3.2. \u6a21\u5e42\u8fd0\u7b97</li> <li>8.3.3. \u6700\u5927\u516c\u7ea6\u6570\u4e0e\u4e58\u6cd5\u9006\u5143</li> <li>8.3.4. RSA\u7b97\u6cd5</li> </ul> </li> <li>8.4. \u5b57\u5178\u518d\u63a2\uff1a\u8df3\u8868<ul> <li>8.4.1. Map\u62bd\u8c61\u6570\u636e\u7c7b\u578b</li> <li>8.4.2. \u7528Python\u5b9e\u73b0\u5b57\u5178</li> </ul> </li> <li>8.5. \u6811\u518d\u63a2\uff1a\u56fe\u50cf\u91cf\u5316<ul> <li>8.5.1. \u6570\u5b57\u56fe\u50cf\u5feb\u901f\u56de\u987e</li> <li>8.5.2. \u56fe\u50cf\u91cf\u5316</li> <li>8.5.3. \u4f7f\u7528\u516b\u53c9\u6811\u7684\u6539\u8fdb\u91cf\u5316\u7b97\u6cd5</li> </ul> </li> <li>8.6. \u56fe\u518d\u63a2\uff1a\u6a21\u5f0f\u5339\u914d<ul> <li>8.6.1. \u751f\u7269\u5b57\u7b26\u4e32</li> <li>8.6.2. \u7b80\u5355\u6bd4\u8f83</li> <li>8.6.3. \u4f7f\u7528\u56fe\uff1a\u6709\u9650\u72b6\u6001\u81ea\u52a8\u673a</li> <li>8.6.4. \u4f7f\u7528\u56fe\uff1aKnuth-Morris-Pratt\u7b97\u6cd5</li> </ul> </li> </ul> <ul> <li>8.1. Objectives</li> <li>8.2. Python Lists Revisited</li> <li>8.3. Recursion Revisited<ul> <li>8.3.1. Modular Arithmetic Theorems</li> <li>8.3.2. Modular Exponentiation</li> <li>8.3.3. The Greatest Common Divisor and Multiplicative Inverses</li> <li>8.3.4. RSA Algorithm</li> </ul> </li> <li>8.4. Dictionaries Revisited: Skip Lists<ul> <li>8.4.1. The Map Abstract Data Type</li> <li>8.4.2. Implementing a Dictionary in Python</li> </ul> </li> <li>8.5. Trees Revisited: Quantizing Images<ul> <li>8.5.1. A Quick Review of Digital Images</li> <li>8.5.2. Quantizing an Image</li> <li>8.5.3. An Improved Quantization Algorithm Using Octrees</li> </ul> </li> <li>8.6. Graphs Revisited: Pattern Matching<ul> <li>8.6.1. Biological Strings</li> <li>8.6.2. Simple Comparison</li> <li>8.6.3. Using Graphs: Finite State Automata</li> <li>8.6.4. Using Graphs: Knuth-Morris-Pratt</li> </ul> </li> </ul>"}]}